
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package AnalizadoresLex_Sin;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.Symbol;
import Frontend.*;
import Objects.tipoDatos;
import Objects.metodoObject;
import Objects.VariableObject;
import Objects.classObject;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\302\000\002\002\004\000\002\002\004\000\002\003" +
    "\003\000\002\003\006\000\002\004\007\000\002\004\002" +
    "\000\002\010\005\000\002\010\003\000\002\104\003\000" +
    "\002\104\002\000\002\006\004\000\002\006\003\000\002" +
    "\007\004\000\002\007\004\000\002\005\003\000\002\005" +
    "\003\000\002\124\002\000\002\013\012\000\002\022\002" +
    "\000\002\022\006\000\002\022\006\000\002\023\005\000" +
    "\002\023\002\000\002\017\004\000\002\017\004\000\002" +
    "\011\003\000\002\011\002\000\002\012\003\000\002\012" +
    "\002\000\002\016\004\000\002\016\004\000\002\052\003" +
    "\000\002\052\002\000\002\053\003\000\002\053\002\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\014\004\000\002\014\002\000\002\042\003\000\002\042" +
    "\002\000\002\025\004\000\002\025\003\000\002\020\004" +
    "\000\002\020\003\000\002\125\002\000\002\021\005\000" +
    "\002\126\002\000\002\021\005\000\002\113\003\000\002" +
    "\113\003\000\002\113\003\000\002\113\003\000\002\113" +
    "\003\000\002\113\003\000\002\113\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\127\002\000\002" +
    "\030\005\000\002\130\002\000\002\031\005\000\002\131" +
    "\002\000\002\032\005\000\002\132\002\000\002\033\005" +
    "\000\002\133\002\000\002\034\005\000\002\134\002\000" +
    "\002\035\005\000\002\051\004\000\002\135\002\000\002" +
    "\051\006\000\002\066\004\000\002\066\002\000\002\024" +
    "\005\000\002\024\003\000\002\037\004\000\002\120\005" +
    "\000\002\120\003\000\002\121\005\000\002\121\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\122\003\000\002\122" +
    "\003\000\002\123\003\000\002\123\003\000\002\123\003" +
    "\000\002\043\004\000\002\043\002\000\002\117\006\000" +
    "\002\117\006\000\002\057\004\000\002\057\006\000\002" +
    "\057\002\000\002\115\003\000\002\115\003\000\002\115" +
    "\003\000\002\115\003\000\002\115\003\000\002\116\003" +
    "\000\002\116\003\000\002\116\003\000\002\116\003\000" +
    "\002\116\003\000\002\116\003\000\002\116\003\000\002" +
    "\116\003\000\002\116\003\000\002\106\003\000\002\106" +
    "\003\000\002\106\003\000\002\106\003\000\002\026\005" +
    "\000\002\114\003\000\002\055\005\000\002\055\004\000" +
    "\002\036\004\000\002\041\004\000\002\041\002\000\002" +
    "\136\002\000\002\044\011\000\002\137\002\000\002\140" +
    "\002\000\002\044\014\000\002\141\002\000\002\044\012" +
    "\000\002\142\002\000\002\045\005\000\002\045\002\000" +
    "\002\046\004\000\002\046\002\000\002\062\004\000\002" +
    "\062\002\000\002\061\003\000\002\061\003\000\002\061" +
    "\003\000\002\060\004\000\002\073\004\000\002\073\003" +
    "\000\002\073\003\000\002\073\003\000\002\070\003\000" +
    "\002\070\003\000\002\070\003\000\002\070\003\000\002" +
    "\070\003\000\002\075\004\000\002\075\004\000\002\075" +
    "\010\000\002\047\005\000\002\047\002\000\002\112\005" +
    "\000\002\112\002\000\002\076\003\000\002\076\004\000" +
    "\002\076\003\000\002\076\004\000\002\076\004\000\002" +
    "\076\003\000\002\064\005\000\002\064\002\000\002\067" +
    "\004\000\002\067\003\000\002\071\005\000\002\071\003" +
    "\000\002\065\004\000\002\065\005\000\002\074\007\000" +
    "\002\074\011\000\002\074\010\000\002\074\011\000\002" +
    "\050\005\000\002\107\007\000\002\107\005\000\002\107" +
    "\002\000\002\110\004\000\002\110\003\000\002\111\003" +
    "\000\002\111\003\000\002\102\004\000\002\102\002\000" +
    "\002\103\005\000\002\103\012\000\002\103\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u013c\000\020\022\006\023\005\052\ufffc\053\ufffc\054" +
    "\ufffc\055\ufffc\056\ufffc\001\002\000\014\052\uffff\053\uffff" +
    "\054\uffff\055\uffff\056\uffff\001\002\000\006\017\ufff8\056" +
    "\u0134\001\002\000\004\017\u012c\001\002\000\004\002\u012b" +
    "\001\002\000\014\052\016\053\012\054\014\055\021\056" +
    "\013\001\002\000\010\031\uffe5\055\021\056\013\001\002" +
    "\000\036\003\uffde\004\uffde\005\uffde\006\uffde\010\uffde\017" +
    "\uffde\020\uffde\025\uffde\031\uffde\037\uffde\055\uffde\056\uffde" +
    "\067\uffde\102\uffde\001\002\000\042\003\uffe1\004\uffe1\005" +
    "\uffe1\006\uffe1\010\uffe1\017\uffe1\020\uffe1\025\uffe1\031\uffe1" +
    "\037\uffe1\052\uffe1\053\uffe1\054\uffe1\055\u0128\067\uffe1\102" +
    "\uffe1\001\002\000\036\003\uffdc\004\uffdc\005\uffdc\006\uffdc" +
    "\010\uffdc\017\uffdc\020\uffdc\025\uffdc\031\uffdc\037\uffdc\055" +
    "\uffdc\056\uffdc\067\uffdc\102\uffdc\001\002\000\012\031\uffe7" +
    "\052\016\053\012\054\014\001\002\000\036\003\uffdd\004" +
    "\uffdd\005\uffdd\006\uffdd\010\uffdd\017\uffdd\020\uffdd\025\uffdd" +
    "\031\uffdd\037\uffdd\055\uffdd\056\uffdd\067\uffdd\102\uffdd\001" +
    "\002\000\004\031\024\001\002\000\004\002\000\001\002" +
    "\000\042\003\uffdf\004\uffdf\005\uffdf\006\uffdf\010\uffdf\017" +
    "\uffdf\020\uffdf\025\uffdf\031\uffdf\037\uffdf\052\uffdf\053\uffdf" +
    "\054\uffdf\056\023\067\uffdf\102\uffdf\001\002\000\040\003" +
    "\uffe3\004\uffe3\005\uffe3\006\uffe3\010\uffe3\017\uffe3\020\uffe3" +
    "\025\uffe3\031\uffe3\037\uffe3\052\uffe3\053\uffe3\054\uffe3\067" +
    "\uffe3\102\uffe3\001\002\000\040\003\uffe0\004\uffe0\005\uffe0" +
    "\006\uffe0\010\uffe0\017\uffe0\020\uffe0\025\uffe0\031\uffe0\037" +
    "\uffe0\052\uffe0\053\uffe0\054\uffe0\067\uffe0\102\uffe0\001\002" +
    "\000\004\017\025\001\002\000\010\033\ufff1\034\ufff1\104" +
    "\ufff1\001\002\000\010\033\030\034\027\104\uffef\001\002" +
    "\000\004\017\u0122\001\002\000\004\017\u011c\001\002\000" +
    "\004\104\032\001\002\000\044\003\uffd8\004\uffd8\005\uffd8" +
    "\006\uffd8\010\uffd8\017\uffd8\020\uffd8\025\uffd8\037\uffd8\052" +
    "\016\053\012\054\014\055\021\056\013\067\uffd8\102\uffd8" +
    "\105\uffda\001\002\000\034\003\uffd8\004\uffd8\005\uffd8\006" +
    "\uffd8\010\uffd8\017\uffd8\020\uffd8\025\uffd8\037\uffd8\055\021" +
    "\056\013\067\uffd8\102\uffd8\001\002\000\030\003\060\004" +
    "\043\005\067\006\045\010\054\017\052\020\055\025\064" +
    "\037\066\067\044\102\uff80\001\002\000\030\003\uffd9\004" +
    "\uffd9\005\uffd9\006\uffd9\010\uffd9\017\uffd9\020\uffd9\025\uffd9" +
    "\037\uffd9\067\uffd9\102\uffd9\001\002\000\004\105\040\001" +
    "\002\000\030\003\uffd6\004\uffd6\005\uffd6\006\uffd6\010\uffd6" +
    "\017\uffd6\020\uffd6\025\uffd6\037\uffd6\067\uffd6\102\uffd6\001" +
    "\002\000\004\002\ufff0\001\002\000\022\003\uffc7\017\uffc7" +
    "\025\uffc7\030\uffc7\037\uffc7\067\uffc7\102\uffc7\103\uffc7\001" +
    "\002\000\004\105\uffdb\001\002\000\006\017\uffc2\106\uffc2" +
    "\001\002\000\022\003\165\011\157\012\163\015\154\016" +
    "\160\021\167\026\164\102\155\001\002\000\006\017\uffbe" +
    "\106\uffbe\001\002\000\004\102\u0107\001\002\000\022\003" +
    "\uffc8\017\uffc8\025\uffc8\030\uffc8\037\uffc8\067\uffc8\102\uffc8" +
    "\103\uffc8\001\002\000\004\105\uffd4\001\002\000\022\003" +
    "\uffc5\017\uffc5\025\uffc5\030\uffc5\037\uffc5\067\uffc5\102\uffc5" +
    "\103\uffc5\001\002\000\010\017\uffb8\102\uff7b\106\uffb8\001" +
    "\002\000\044\003\uffd1\004\uffd1\005\uffd1\006\uffd1\010\uffd1" +
    "\017\uffd1\020\uffd1\025\uffd1\037\uffd1\052\uffd1\053\uffd1\054" +
    "\uffd1\055\uffd1\056\uffd1\067\uffd1\102\uffd1\105\uffd1\001\002" +
    "\000\006\017\uffbc\106\uffbc\001\002\000\006\017\uffba\106" +
    "\uffba\001\002\000\044\003\uffd3\004\uffd3\005\uffd3\006\uffd3" +
    "\010\uffd3\017\uffd3\020\uffd3\025\uffd3\037\uffd3\052\uffd3\053" +
    "\uffd3\054\uffd3\055\uffd3\056\uffd3\067\uffd3\102\uffd3\105\uffd3" +
    "\001\002\000\022\003\uffc6\017\uffc6\025\uffc6\030\uffc6\037" +
    "\uffc6\067\uffc6\102\uffc6\103\uffc6\001\002\000\072\003\ufff2" +
    "\004\ufff2\005\ufff2\006\ufff2\010\ufff2\017\ufff2\020\ufff2\023" +
    "\ufff2\025\ufff2\032\ufff2\035\ufff2\037\ufff2\041\ufff2\042\ufff2" +
    "\043\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2\051\ufff2\052" +
    "\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2\067\ufff2\102\ufff2" +
    "\105\ufff2\001\002\000\016\003\060\017\366\025\064\037" +
    "\066\067\044\102\uff80\001\002\000\022\003\uffc3\017\uffc3" +
    "\025\uffc3\030\uffc3\037\uffc3\067\uffc3\102\uffc3\103\uffc3\001" +
    "\002\000\022\003\uffc4\017\uffc4\025\uffc4\030\uffc4\037\uffc4" +
    "\067\uffc4\102\uffc4\103\uffc4\001\002\000\072\003\ufff3\004" +
    "\ufff3\005\ufff3\006\ufff3\010\ufff3\017\ufff3\020\ufff3\023\ufff3" +
    "\025\ufff3\032\ufff3\035\ufff3\037\ufff3\041\ufff3\042\ufff3\043" +
    "\ufff3\045\ufff3\046\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3" +
    "\053\ufff3\054\ufff3\055\ufff3\056\ufff3\067\ufff3\102\ufff3\105" +
    "\ufff3\001\002\000\064\003\uffb0\004\uffb0\005\uffb0\006\uffb0" +
    "\010\uffb0\017\uffb0\020\uffb0\025\uffb0\032\uffb0\035\uffb0\037" +
    "\uffb0\041\uffb0\042\uffb0\043\uffb0\045\uffb0\050\uffb0\051\uffb0" +
    "\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\067\uffb0\102" +
    "\uffb0\105\uffb0\001\002\000\004\017\uff7e\001\002\000\006" +
    "\017\uffc0\106\uffc0\001\002\000\006\017\072\106\073\001" +
    "\002\000\022\003\uffbf\017\uffbf\025\uffbf\030\uffbf\037\uffbf" +
    "\067\uffbf\102\uffbf\103\uffbf\001\002\000\024\003\uffb2\017" +
    "\uffb2\025\uffb2\030\uffb2\037\uffb2\067\uffb2\102\uffb2\103\uffb2" +
    "\106\077\001\002\000\004\107\074\001\002\000\006\017" +
    "\uffb5\106\uffb5\001\002\000\006\017\072\106\073\001\002" +
    "\000\022\003\uffb4\017\uffb4\025\uffb4\030\uffb4\037\uffb4\067" +
    "\uffb4\102\uffb4\103\uffb4\001\002\000\004\107\101\001\002" +
    "\000\022\003\uffb6\017\uffb6\025\uffb6\030\uffb6\037\uffb6\067" +
    "\uffb6\102\uffb6\103\uffb6\001\002\000\022\003\uffb3\017\uffb3" +
    "\025\uffb3\030\uffb3\037\uffb3\067\uffb3\102\uffb3\103\uffb3\001" +
    "\002\000\004\017\103\001\002\000\004\102\uff7d\001\002" +
    "\000\004\102\105\001\002\000\020\004\043\005\067\006" +
    "\045\010\054\017\110\020\055\103\uff77\001\002\000\004" +
    "\103\117\001\002\000\006\030\uff79\103\uff79\001\002\000" +
    "\006\017\uffb8\106\uffb8\001\002\000\006\017\072\106\073" +
    "\001\002\000\022\003\uffb7\017\uffb7\025\uffb7\030\uffb7\037" +
    "\uffb7\067\uffb7\102\uffb7\103\uffb7\001\002\000\006\030\114" +
    "\103\uff75\001\002\000\020\004\043\005\067\006\045\010" +
    "\054\017\110\020\055\103\uff77\001\002\000\004\103\uff78" +
    "\001\002\000\004\103\uff76\001\002\000\004\104\120\001" +
    "\002\000\042\004\043\005\067\006\045\010\054\017\132" +
    "\020\055\032\134\035\146\041\122\042\135\043\130\045" +
    "\126\050\136\051\123\055\141\105\uff73\001\002\000\010" +
    "\003\uff69\025\uff69\067\uff69\001\002\000\004\102\362\001" +
    "\002\000\022\003\165\011\157\012\163\015\154\016\160" +
    "\021\167\026\164\102\155\001\002\000\010\003\uff6c\025" +
    "\uff6c\067\uff6c\001\002\000\050\003\uff6b\004\uff70\005\uff70" +
    "\006\uff70\010\uff70\017\uff70\020\uff70\025\uff6b\032\uff70\035" +
    "\uff70\041\uff70\042\uff70\043\uff70\045\uff70\050\uff70\051\uff70" +
    "\055\uff70\067\uff6b\105\uff70\001\002\000\004\102\331\001" +
    "\002\000\010\003\uff6a\025\uff6a\067\uff6a\001\002\000\004" +
    "\102\306\001\002\000\010\003\uff67\025\uff67\067\uff67\001" +
    "\002\000\024\003\uff57\017\274\024\261\025\uff57\057\300" +
    "\061\276\062\301\063\277\067\uff57\001\002\000\010\003" +
    "\uff6d\025\uff6d\067\uff6d\001\002\000\012\003\uff57\024\261" +
    "\025\uff57\067\uff57\001\002\000\004\104\250\001\002\000" +
    "\006\003\060\025\064\001\002\000\042\004\043\005\067" +
    "\006\045\010\054\017\132\020\055\032\134\035\146\041" +
    "\122\042\135\043\130\045\126\050\136\051\123\055\141" +
    "\105\uff73\001\002\000\010\003\uff68\025\uff68\067\uff68\001" +
    "\002\000\014\004\043\005\067\006\045\010\054\020\055" +
    "\001\002\000\004\105\244\001\002\000\010\003\060\025" +
    "\064\067\044\001\002\000\010\003\uff66\025\uff66\067\uff66" +
    "\001\002\000\042\004\uff72\005\uff72\006\uff72\010\uff72\017" +
    "\uff72\020\uff72\032\uff72\035\uff72\041\uff72\042\uff72\043\uff72" +
    "\045\uff72\050\uff72\051\uff72\055\uff72\105\uff72\001\002\000" +
    "\006\024\150\102\uff61\001\002\000\042\004\uff71\005\uff71" +
    "\006\uff71\010\uff71\017\uff71\020\uff71\032\uff71\035\uff71\041" +
    "\uff71\042\uff71\043\uff71\045\uff71\050\uff71\051\uff71\055\uff71" +
    "\105\uff71\001\002\000\004\017\241\001\002\000\004\102" +
    "\152\001\002\000\022\003\165\011\157\012\163\015\154" +
    "\016\160\021\167\026\164\102\155\001\002\000\046\003" +
    "\uffa7\025\uffa7\027\uffa7\030\uffa7\060\uffa7\064\uffa7\065\uffa7" +
    "\066\uffa7\067\uffa7\070\uffa7\071\uffa7\072\uffa7\073\uffa7\074" +
    "\uffa7\075\uffa7\076\uffa7\101\uffa7\103\uffa7\001\002\000\046" +
    "\003\uffa2\025\uffa2\027\uffa2\030\uffa2\060\uffa2\064\uffa2\065" +
    "\uffa2\066\uffa2\067\uffa2\070\uffa2\071\uffa2\072\uffa2\073\uffa2" +
    "\074\uffa2\075\uffa2\076\uffa2\101\uffa2\103\uffa2\001\002\000" +
    "\034\003\165\004\220\005\226\006\221\010\223\011\157" +
    "\012\163\015\154\016\160\020\224\021\167\026\164\102" +
    "\155\001\002\000\046\003\uff9f\025\uff9f\027\uff9f\030\uff9f" +
    "\060\203\064\214\065\207\066\213\067\uff9f\070\216\071" +
    "\200\072\211\073\204\074\215\075\212\076\210\101\201" +
    "\103\uff9f\001\002\000\046\003\uffa5\025\uffa5\027\uffa5\030" +
    "\uffa5\060\uffa5\064\uffa5\065\uffa5\066\uffa5\067\uffa5\070\uffa5" +
    "\071\uffa5\072\uffa5\073\uffa5\074\uffa5\075\uffa5\076\uffa5\101" +
    "\uffa5\103\uffa5\001\002\000\046\003\uffa3\025\uffa3\027\uffa3" +
    "\030\uffa3\060\uffa3\064\uffa3\065\uffa3\066\uffa3\067\uffa3\070" +
    "\uffa3\071\uffa3\072\uffa3\073\uffa3\074\uffa3\075\uffa3\076\uffa3" +
    "\101\uffa3\103\uffa3\001\002\000\046\003\uffa9\025\uffa9\027" +
    "\uffa9\030\uffa9\060\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9" +
    "\070\uffa9\071\uffa9\072\uffa9\073\uffa9\074\uffa9\075\uffa9\076" +
    "\uffa9\101\uffa9\103\uffa9\001\002\000\046\003\uffaa\025\uffaa" +
    "\027\uffaa\030\uffaa\060\uffaa\064\uffaa\065\uffaa\066\uffaa\067" +
    "\uffaa\070\uffaa\071\uffaa\072\uffaa\073\uffaa\074\uffaa\075\uffaa" +
    "\076\uffaa\101\uffaa\103\uffaa\001\002\000\046\003\uffa4\025" +
    "\uffa4\027\uffa4\030\uffa4\060\uffa4\064\uffa4\065\uffa4\066\uffa4" +
    "\067\uffa4\070\uffa4\071\uffa4\072\uffa4\073\uffa4\074\uffa4\075" +
    "\uffa4\076\uffa4\101\uffa4\103\uffa4\001\002\000\004\007\176" +
    "\001\002\000\046\003\uffa6\025\uffa6\027\uffa6\030\uffa6\060" +
    "\uffa6\064\uffa6\065\uffa6\066\uffa6\067\uffa6\070\uffa6\071\uffa6" +
    "\072\uffa6\073\uffa6\074\uffa6\075\uffa6\076\uffa6\101\uffa6\103" +
    "\uffa6\001\002\000\046\003\uffa8\025\uffa8\027\uffa8\030\uffa8" +
    "\060\uffa8\064\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8\071" +
    "\uffa8\072\uffa8\073\uffa8\074\uffa8\075\uffa8\076\uffa8\101\uffa8" +
    "\103\uffa8\001\002\000\046\003\uffa1\025\uffa1\027\uffa1\030" +
    "\uffa1\060\uffa1\064\uffa1\065\uffa1\066\uffa1\067\uffa1\070\uffa1" +
    "\071\uffa1\072\uffa1\073\uffa1\074\uffa1\075\uffa1\076\uffa1\101" +
    "\uffa1\103\uffa1\001\002\000\006\030\171\103\uff5f\001\002" +
    "\000\022\003\165\011\157\012\163\015\154\016\160\021" +
    "\167\026\164\102\155\001\002\000\004\103\173\001\002" +
    "\000\010\003\uff63\025\uff63\067\uff63\001\002\000\006\030" +
    "\171\103\uff5f\001\002\000\004\103\uff60\001\002\000\004" +
    "\026\177\001\002\000\046\003\uff87\025\uff87\027\uff87\030" +
    "\uff87\060\uff87\064\uff87\065\uff87\066\uff87\067\uff87\070\uff87" +
    "\071\uff87\072\uff87\073\uff87\074\uff87\075\uff87\076\uff87\101" +
    "\uff87\103\uff87\001\002\000\022\003\uff93\011\uff93\012\uff93" +
    "\015\uff93\016\uff93\021\uff93\026\uff93\102\uff93\001\002\000" +
    "\022\003\uff8d\011\uff8d\012\uff8d\015\uff8d\016\uff8d\021\uff8d" +
    "\026\uff8d\102\uff8d\001\002\000\046\003\uffaf\025\uffaf\027" +
    "\uffaf\030\uffaf\060\uffaf\064\uffaf\065\uffaf\066\uffaf\067\uffaf" +
    "\070\uffaf\071\uffaf\072\uffaf\073\uffaf\074\uffaf\075\uffaf\076" +
    "\uffaf\101\uffaf\103\uffaf\001\002\000\022\003\uff8b\011\uff8b" +
    "\012\uff8b\015\uff8b\016\uff8b\021\uff8b\026\uff8b\102\uff8b\001" +
    "\002\000\022\003\uff91\011\uff91\012\uff91\015\uff91\016\uff91" +
    "\021\uff91\026\uff91\102\uff91\001\002\000\022\003\165\011" +
    "\157\012\163\015\154\016\160\021\167\026\164\102\155" +
    "\001\002\000\022\003\uff8c\011\uff8c\012\uff8c\015\uff8c\016" +
    "\uff8c\021\uff8c\026\uff8c\102\uff8c\001\002\000\022\003\uff89" +
    "\011\uff89\012\uff89\015\uff89\016\uff89\021\uff89\026\uff89\102" +
    "\uff89\001\002\000\022\003\uff8e\011\uff8e\012\uff8e\015\uff8e" +
    "\016\uff8e\021\uff8e\026\uff8e\102\uff8e\001\002\000\022\003" +
    "\uff92\011\uff92\012\uff92\015\uff92\016\uff92\021\uff92\026\uff92" +
    "\102\uff92\001\002\000\022\003\uff8f\011\uff8f\012\uff8f\015" +
    "\uff8f\016\uff8f\021\uff8f\026\uff8f\102\uff8f\001\002\000\022" +
    "\003\uff88\011\uff88\012\uff88\015\uff88\016\uff88\021\uff88\026" +
    "\uff88\102\uff88\001\002\000\022\003\uff8a\011\uff8a\012\uff8a" +
    "\015\uff8a\016\uff8a\021\uff8a\026\uff8a\102\uff8a\001\002\000" +
    "\022\003\uff90\011\uff90\012\uff90\015\uff90\016\uff90\021\uff90" +
    "\026\uff90\102\uff90\001\002\000\022\003\uff94\011\uff94\012" +
    "\uff94\015\uff94\016\uff94\021\uff94\026\uff94\102\uff94\001\002" +
    "\000\046\003\uffa0\025\uffa0\027\uffa0\030\uffa0\060\uffa0\064" +
    "\uffa0\065\uffa0\066\uffa0\067\uffa0\070\uffa0\071\uffa0\072\uffa0" +
    "\073\uffa0\074\uffa0\075\uffa0\076\uffa0\101\uffa0\103\uffa0\001" +
    "\002\000\004\103\uff97\001\002\000\004\103\uff96\001\002" +
    "\000\004\103\237\001\002\000\004\103\uff95\001\002\000" +
    "\004\103\uff98\001\002\000\004\103\227\001\002\000\004" +
    "\103\uff99\001\002\000\050\003\uff9a\014\232\025\uff9a\027" +
    "\uff9a\030\uff9a\060\203\064\214\065\207\066\213\067\uff9a" +
    "\070\216\071\200\072\211\073\204\074\215\075\212\076" +
    "\210\101\201\103\uff9a\001\002\000\046\003\uff9e\025\uff9e" +
    "\027\uff9e\030\uff9e\060\uff9e\064\uff9e\065\uff9e\066\uff9e\067" +
    "\uff9e\070\uff9e\071\uff9e\072\uff9e\073\uff9e\074\uff9e\075\uff9e" +
    "\076\uff9e\101\uff9e\103\uff9e\001\002\000\022\003\165\011" +
    "\157\012\163\015\154\016\160\021\167\026\164\102\155" +
    "\001\002\000\022\003\165\011\157\012\163\015\154\016" +
    "\160\021\167\026\164\102\155\001\002\000\004\027\234" +
    "\001\002\000\022\003\165\011\157\012\163\015\154\016" +
    "\160\021\167\026\164\102\155\001\002\000\046\003\uff9b" +
    "\025\uff9b\027\uff9b\030\uff9b\060\uff9b\064\uff9b\065\uff9b\066" +
    "\uff9b\067\uff9b\070\uff9b\071\uff9b\072\uff9b\073\uff9b\074\uff9b" +
    "\075\uff9b\076\uff9b\101\uff9b\103\uff9b\001\002\000\046\003" +
    "\uff9c\025\uff9c\027\uff9c\030\uff9c\060\uff9c\064\uff9c\065\uff9c" +
    "\066\uff9c\067\uff9c\070\uff9c\071\uff9c\072\uff9c\073\uff9c\074" +
    "\uff9c\075\uff9c\076\uff9c\101\uff9c\103\uff9c\001\002\000\022" +
    "\003\165\011\157\012\163\015\154\016\160\021\167\026" +
    "\164\102\155\001\002\000\046\003\uff9d\025\uff9d\027\uff9d" +
    "\030\uff9d\060\uff9d\064\uff9d\065\uff9d\066\uff9d\067\uff9d\070" +
    "\uff9d\071\uff9d\072\uff9d\073\uff9d\074\uff9d\075\uff9d\076\uff9d" +
    "\101\uff9d\103\uff9d\001\002\000\006\024\150\102\uff61\001" +
    "\002\000\004\102\uff62\001\002\000\042\004\uff6f\005\uff6f" +
    "\006\uff6f\010\uff6f\017\uff6f\020\uff6f\032\uff6f\035\uff6f\041" +
    "\uff6f\042\uff6f\043\uff6f\045\uff6f\050\uff6f\051\uff6f\055\uff6f" +
    "\105\uff6f\001\002\000\044\003\uff7c\004\uff7c\005\uff7c\006" +
    "\uff7c\010\uff7c\017\uff7c\020\uff7c\025\uff7c\037\uff7c\052\uff7c" +
    "\053\uff7c\054\uff7c\055\uff7c\056\uff7c\067\uff7c\102\uff7c\105" +
    "\uff7c\001\002\000\010\003\uff6e\025\uff6e\067\uff6e\001\002" +
    "\000\004\105\uff74\001\002\000\054\003\uff52\004\uff52\005" +
    "\uff52\006\uff52\010\uff52\017\uff52\020\uff52\025\uff52\032\uff52" +
    "\035\uff52\041\uff52\042\uff52\043\uff52\045\uff52\046\uff52\047" +
    "\uff52\050\uff52\051\uff52\055\uff52\067\uff52\105\uff52\001\002" +
    "\000\042\004\043\005\067\006\045\010\054\017\132\020" +
    "\055\032\134\035\146\041\122\042\135\043\130\045\126" +
    "\050\136\051\123\055\141\105\uff73\001\002\000\004\041" +
    "\252\001\002\000\004\102\253\001\002\000\022\003\165" +
    "\011\157\012\163\015\154\016\160\021\167\026\164\102" +
    "\155\001\002\000\004\103\255\001\002\000\006\003\060" +
    "\025\064\001\002\000\042\004\uff4f\005\uff4f\006\uff4f\010" +
    "\uff4f\017\uff4f\020\uff4f\032\uff4f\035\uff4f\041\uff4f\042\uff4f" +
    "\043\uff4f\045\uff4f\050\uff4f\051\uff4f\055\uff4f\105\uff4f\001" +
    "\002\000\004\105\260\001\002\000\044\004\uff4c\005\uff4c" +
    "\006\uff4c\010\uff4c\017\uff4c\020\uff4c\032\uff4c\035\uff4c\041" +
    "\uff4c\042\uff4c\043\uff4c\044\uff4c\045\uff4c\050\uff4c\051\uff4c" +
    "\055\uff4c\105\uff4c\001\002\000\004\017\263\001\002\000" +
    "\010\003\uff64\025\uff64\067\uff64\001\002\000\014\003\uff57" +
    "\024\261\025\uff57\067\uff57\102\265\001\002\000\010\003" +
    "\uff58\025\uff58\067\uff58\001\002\000\024\003\165\011\157" +
    "\012\163\015\154\016\160\021\167\026\164\102\155\103" +
    "\270\001\002\000\010\003\uff55\025\uff55\067\uff55\001\002" +
    "\000\010\003\uff56\025\uff56\067\uff56\001\002\000\010\003" +
    "\uff53\025\uff53\067\uff53\001\002\000\006\030\171\103\uff5f" +
    "\001\002\000\004\103\273\001\002\000\010\003\uff54\025" +
    "\uff54\067\uff54\001\002\000\012\003\uff57\024\261\025\uff57" +
    "\067\uff57\001\002\000\010\003\uff65\025\uff65\067\uff65\001" +
    "\002\000\010\003\uff5e\025\uff5e\067\uff5e\001\002\000\022" +
    "\003\165\011\157\012\163\015\154\016\160\021\167\026" +
    "\164\102\155\001\002\000\022\003\165\011\157\012\163" +
    "\015\154\016\160\021\167\026\164\102\155\001\002\000" +
    "\010\003\uff5c\025\uff5c\067\uff5c\001\002\000\010\003\uff59" +
    "\025\uff59\067\uff59\001\002\000\010\003\uff5d\025\uff5d\067" +
    "\uff5d\001\002\000\010\003\uff5b\025\uff5b\067\uff5b\001\002" +
    "\000\010\003\uff5a\025\uff5a\067\uff5a\001\002\000\022\003" +
    "\165\011\157\012\163\015\154\016\160\021\167\026\164" +
    "\102\155\001\002\000\004\103\310\001\002\000\004\104" +
    "\250\001\002\000\044\004\uff43\005\uff43\006\uff43\010\uff43" +
    "\017\uff43\020\uff43\032\uff43\035\uff43\041\uff43\042\uff43\043" +
    "\uff43\044\312\045\uff43\050\uff43\051\uff43\055\uff43\105\uff43" +
    "\001\002\000\010\003\314\043\317\104\315\001\002\000" +
    "\042\004\uff4e\005\uff4e\006\uff4e\010\uff4e\017\uff4e\020\uff4e" +
    "\032\uff4e\035\uff4e\041\uff4e\042\uff4e\043\uff4e\045\uff4e\050" +
    "\uff4e\051\uff4e\055\uff4e\105\uff4e\001\002\000\042\004\uff40" +
    "\005\uff40\006\uff40\010\uff40\017\uff40\020\uff40\032\uff40\035" +
    "\uff40\041\uff40\042\uff40\043\uff40\045\uff40\050\uff40\051\uff40" +
    "\055\uff40\105\uff40\001\002\000\042\004\043\005\067\006" +
    "\045\010\054\017\132\020\055\032\134\035\146\041\122" +
    "\042\135\043\130\045\126\050\136\051\123\055\141\105" +
    "\uff73\001\002\000\042\004\uff44\005\uff44\006\uff44\010\uff44" +
    "\017\uff44\020\uff44\032\uff44\035\uff44\041\uff44\042\uff44\043" +
    "\uff44\045\uff44\050\uff44\051\uff44\055\uff44\105\uff44\001\002" +
    "\000\004\102\320\001\002\000\022\003\165\011\157\012" +
    "\163\015\154\016\160\021\167\026\164\102\155\001\002" +
    "\000\004\103\322\001\002\000\004\104\323\001\002\000" +
    "\042\004\043\005\067\006\045\010\054\017\132\020\055" +
    "\032\134\035\146\041\122\042\135\043\130\045\126\050" +
    "\136\051\123\055\141\105\uff73\001\002\000\004\105\325" +
    "\001\002\000\044\004\uff43\005\uff43\006\uff43\010\uff43\017" +
    "\uff43\020\uff43\032\uff43\035\uff43\041\uff43\042\uff43\043\uff43" +
    "\044\312\045\uff43\050\uff43\051\uff43\055\uff43\105\uff43\001" +
    "\002\000\042\004\uff41\005\uff41\006\uff41\010\uff41\017\uff41" +
    "\020\uff41\032\uff41\035\uff41\041\uff41\042\uff41\043\uff41\045" +
    "\uff41\050\uff41\051\uff41\055\uff41\105\uff41\001\002\000\004" +
    "\105\330\001\002\000\042\004\uff42\005\uff42\006\uff42\010" +
    "\uff42\017\uff42\020\uff42\032\uff42\035\uff42\041\uff42\042\uff42" +
    "\043\uff42\045\uff42\050\uff42\051\uff42\055\uff42\105\uff42\001" +
    "\002\000\022\003\165\011\157\012\163\015\154\016\160" +
    "\021\167\026\164\102\155\001\002\000\004\103\333\001" +
    "\002\000\004\104\334\001\002\000\010\046\337\047\335" +
    "\105\uff49\001\002\000\004\027\356\001\002\000\004\105" +
    "\355\001\002\000\022\003\165\011\157\012\163\015\154" +
    "\016\160\021\167\026\164\102\155\001\002\000\004\027" +
    "\345\001\002\000\006\027\uff81\030\342\001\002\000\022" +
    "\003\165\011\157\012\163\015\154\016\160\021\167\026" +
    "\164\102\155\001\002\000\004\027\uff83\001\002\000\004" +
    "\027\uff82\001\002\000\040\004\043\005\067\006\045\010" +
    "\054\017\132\020\055\032\134\035\146\041\122\042\135" +
    "\043\130\045\126\050\136\051\123\055\141\001\002\000" +
    "\010\046\337\047\335\105\uff49\001\002\000\016\003\uff6b" +
    "\025\uff6b\046\uff47\047\uff47\067\uff6b\105\uff47\001\002\000" +
    "\040\004\043\005\067\006\045\010\054\017\132\020\055" +
    "\032\134\035\146\041\122\042\135\043\130\045\126\050" +
    "\136\051\123\055\141\001\002\000\040\004\uff46\005\uff46" +
    "\006\uff46\010\uff46\017\uff46\020\uff46\032\uff46\035\uff46\041" +
    "\uff46\042\uff46\043\uff46\045\uff46\050\uff46\051\uff46\055\uff46" +
    "\001\002\000\040\004\uff45\005\uff45\006\uff45\010\uff45\017" +
    "\uff45\020\uff45\032\uff45\035\uff45\041\uff45\042\uff45\043\uff45" +
    "\045\uff45\050\uff45\051\uff45\055\uff45\001\002\000\010\046" +
    "\uff48\047\uff48\105\uff48\001\002\000\004\105\uff4b\001\002" +
    "\000\042\004\uff4d\005\uff4d\006\uff4d\010\uff4d\017\uff4d\020" +
    "\uff4d\032\uff4d\035\uff4d\041\uff4d\042\uff4d\043\uff4d\045\uff4d" +
    "\050\uff4d\051\uff4d\055\uff4d\105\uff4d\001\002\000\040\004" +
    "\043\005\067\006\045\010\054\017\132\020\055\032\134" +
    "\035\146\041\122\042\135\043\130\045\126\050\136\051" +
    "\123\055\141\001\002\000\004\105\uff4a\001\002\000\006" +
    "\003\060\025\064\001\002\000\054\003\uff51\004\uff51\005" +
    "\uff51\006\uff51\010\uff51\017\uff51\020\uff51\025\uff51\032\uff51" +
    "\035\uff51\041\uff51\042\uff51\043\uff51\045\uff51\046\uff51\047" +
    "\uff51\050\uff51\051\uff51\055\uff51\067\uff51\105\uff51\001\002" +
    "\000\022\003\165\011\157\012\163\015\154\016\160\021" +
    "\167\026\164\102\155\001\002\000\004\103\364\001\002" +
    "\000\004\104\250\001\002\000\042\004\uff50\005\uff50\006" +
    "\uff50\010\uff50\017\uff50\020\uff50\032\uff50\035\uff50\041\uff50" +
    "\042\uff50\043\uff50\045\uff50\050\uff50\051\uff50\055\uff50\105" +
    "\uff50\001\002\000\004\102\uff7b\001\002\000\004\105\uffd5" +
    "\001\002\000\004\102\371\001\002\000\020\004\043\005" +
    "\067\006\045\010\054\017\110\020\055\103\uff77\001\002" +
    "\000\004\103\373\001\002\000\004\104\374\001\002\000" +
    "\042\004\043\005\067\006\045\010\054\017\132\020\055" +
    "\032\134\035\146\041\122\042\135\043\130\045\126\050" +
    "\136\051\123\055\141\105\uff73\001\002\000\004\105\376" +
    "\001\002\000\044\003\uff7a\004\uff7a\005\uff7a\006\uff7a\010" +
    "\uff7a\017\uff7a\020\uff7a\025\uff7a\037\uff7a\052\uff7a\053\uff7a" +
    "\054\uff7a\055\uff7a\056\uff7a\067\uff7a\102\uff7a\105\uff7a\001" +
    "\002\000\044\003\uffd8\004\uffd8\005\uffd8\006\uffd8\010\uffd8" +
    "\017\uffd8\020\uffd8\025\uffd8\037\uffd8\052\016\053\012\054" +
    "\014\055\021\056\013\067\uffd8\102\uffd8\105\uffda\001\002" +
    "\000\004\105\uffd2\001\002\000\006\017\072\106\073\001" +
    "\002\000\022\003\uffb9\017\uffb9\025\uffb9\030\uffb9\037\uffb9" +
    "\067\uffb9\102\uffb9\103\uffb9\001\002\000\006\017\072\106" +
    "\073\001\002\000\022\003\uffbb\017\uffbb\025\uffbb\030\uffbb" +
    "\037\uffbb\067\uffbb\102\uffbb\103\uffbb\001\002\000\044\003" +
    "\uffd8\004\uffd8\005\uffd8\006\uffd8\010\uffd8\017\uffd8\020\uffd8" +
    "\025\uffd8\037\uffd8\052\016\053\012\054\014\055\021\056" +
    "\013\067\uffd8\102\uffd8\105\uffda\001\002\000\004\105\uffd0" +
    "\001\002\000\020\004\043\005\067\006\045\010\054\017" +
    "\110\020\055\103\uff77\001\002\000\004\103\u0109\001\002" +
    "\000\004\104\u010a\001\002\000\042\004\043\005\067\006" +
    "\045\010\054\017\132\020\055\032\134\035\146\041\122" +
    "\042\135\043\130\045\126\050\136\051\123\055\141\105" +
    "\uff73\001\002\000\004\105\u010c\001\002\000\044\003\uff7f" +
    "\004\uff7f\005\uff7f\006\uff7f\010\uff7f\017\uff7f\020\uff7f\025" +
    "\uff7f\037\uff7f\052\uff7f\053\uff7f\054\uff7f\055\uff7f\056\uff7f" +
    "\067\uff7f\102\uff7f\105\uff7f\001\002\000\006\017\072\106" +
    "\073\001\002\000\022\003\uffbd\017\uffbd\025\uffbd\030\uffbd" +
    "\037\uffbd\067\uffbd\102\uffbd\103\uffbd\001\002\000\010\003" +
    "\060\025\064\030\u0110\001\002\000\004\017\u0113\001\002" +
    "\000\064\003\uffb1\004\uffb1\005\uffb1\006\uffb1\010\uffb1\017" +
    "\uffb1\020\uffb1\025\uffb1\032\uffb1\035\uffb1\037\uffb1\041\uffb1" +
    "\042\uffb1\043\uffb1\045\uffb1\050\uffb1\051\uffb1\052\uffb1\053" +
    "\uffb1\054\uffb1\055\uffb1\056\uffb1\067\uffb1\102\uffb1\105\uffb1" +
    "\001\002\000\064\003\uffad\004\uffad\005\uffad\006\uffad\010" +
    "\uffad\017\uffad\020\uffad\025\uffad\032\uffad\035\uffad\037\uffad" +
    "\041\uffad\042\uffad\043\uffad\045\uffad\050\uffad\051\uffad\052" +
    "\uffad\053\uffad\054\uffad\055\uffad\056\uffad\067\uffad\102\uffad" +
    "\105\uffad\001\002\000\010\003\060\025\064\067\u0115\001" +
    "\002\000\064\003\uffab\004\uffab\005\uffab\006\uffab\010\uffab" +
    "\017\uffab\020\uffab\025\uffab\032\uffab\035\uffab\037\uffab\041" +
    "\uffab\042\uffab\043\uffab\045\uffab\050\uffab\051\uffab\052\uffab" +
    "\053\uffab\054\uffab\055\uffab\056\uffab\067\uffab\102\uffab\105" +
    "\uffab\001\002\000\022\003\165\011\157\012\163\015\154" +
    "\016\160\021\167\026\164\102\155\001\002\000\064\003" +
    "\uffae\004\uffae\005\uffae\006\uffae\010\uffae\017\uffae\020\uffae" +
    "\025\uffae\032\uffae\035\uffae\037\uffae\041\uffae\042\uffae\043" +
    "\uffae\045\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae" +
    "\055\uffae\056\uffae\067\uffae\102\uffae\105\uffae\001\002\000" +
    "\010\003\060\025\064\030\u0110\001\002\000\064\003\uffac" +
    "\004\uffac\005\uffac\006\uffac\010\uffac\017\uffac\020\uffac\025" +
    "\uffac\032\uffac\035\uffac\037\uffac\041\uffac\042\uffac\043\uffac" +
    "\045\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055" +
    "\uffac\056\uffac\067\uffac\102\uffac\105\uffac\001\002\000\006" +
    "\017\072\106\073\001\002\000\022\003\uffc1\017\uffc1\025" +
    "\uffc1\030\uffc1\037\uffc1\067\uffc1\102\uffc1\103\uffc1\001\002" +
    "\000\030\003\uffd7\004\uffd7\005\uffd7\006\uffd7\010\uffd7\017" +
    "\uffd7\020\uffd7\025\uffd7\037\uffd7\067\uffd7\102\uffd7\001\002" +
    "\000\012\024\u011d\033\uffeb\034\uffeb\104\uffeb\001\002\000" +
    "\004\017\u0120\001\002\000\010\033\030\034\027\104\uffef" +
    "\001\002\000\004\104\uffee\001\002\000\012\024\u011d\033" +
    "\uffeb\034\uffeb\104\uffeb\001\002\000\010\033\uffec\034\uffec" +
    "\104\uffec\001\002\000\012\024\u011d\033\uffeb\034\uffeb\104" +
    "\uffeb\001\002\000\010\033\030\034\027\104\uffef\001\002" +
    "\000\004\104\uffed\001\002\000\004\031\uffea\001\002\000" +
    "\004\031\uffe8\001\002\000\040\003\uffe4\004\uffe4\005\uffe4" +
    "\006\uffe4\010\uffe4\017\uffe4\020\uffe4\025\uffe4\031\uffe4\037" +
    "\uffe4\052\uffe4\053\uffe4\054\uffe4\067\uffe4\102\uffe4\001\002" +
    "\000\040\003\uffe2\004\uffe2\005\uffe2\006\uffe2\010\uffe2\017" +
    "\uffe2\020\uffe2\025\uffe2\031\uffe2\037\uffe2\052\uffe2\053\uffe2" +
    "\054\uffe2\067\uffe2\102\uffe2\001\002\000\004\031\uffe6\001" +
    "\002\000\004\031\uffe9\001\002\000\004\002\001\001\002" +
    "\000\010\003\060\024\u012d\025\064\001\002\000\004\017" +
    "\u0131\001\002\000\016\023\005\052\ufffc\053\ufffc\054\ufffc" +
    "\055\ufffc\056\ufffc\001\002\000\016\023\ufffa\052\ufffa\053" +
    "\ufffa\054\ufffa\055\ufffa\056\ufffa\001\002\000\014\052\ufffe" +
    "\053\ufffe\054\ufffe\055\ufffe\056\ufffe\001\002\000\010\003" +
    "\060\024\u012d\025\064\001\002\000\016\023\ufffb\052\ufffb" +
    "\053\ufffb\054\ufffb\055\ufffb\056\ufffb\001\002\000\004\017" +
    "\u0135\001\002\000\004\017\ufff9\001\002\000\010\003\060" +
    "\024\u0136\025\064\001\002\000\006\017\u013a\065\u013b\001" +
    "\002\000\016\023\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6" +
    "\056\ufff6\001\002\000\016\023\005\052\ufffc\053\ufffc\054" +
    "\ufffc\055\ufffc\056\ufffc\001\002\000\014\052\ufffd\053\ufffd" +
    "\054\ufffd\055\ufffd\056\ufffd\001\002\000\010\003\060\024" +
    "\u0136\025\064\001\002\000\006\003\060\025\064\001\002" +
    "\000\016\023\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7\056" +
    "\ufff7\001\002\000\016\023\ufff4\052\ufff4\053\ufff4\054\ufff4" +
    "\055\ufff4\056\ufff4\001\002\000\016\023\ufff5\052\ufff5\053" +
    "\ufff5\054\ufff5\055\ufff5\056\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u013c\000\010\002\006\003\007\004\003\001\001\000" +
    "\002\001\001\000\004\104\u0132\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\017\015\010\016\014\017" +
    "\016\001\001\000\006\012\u0129\016\u0128\001\001\000\002" +
    "\001\001\000\004\052\u0126\001\001\000\002\001\001\000" +
    "\006\011\u0124\015\u0125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\053\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\124\025\001\001\000\004\022\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\014\035" +
    "\015\032\016\034\025\033\042\036\001\001\000\006\016" +
    "\034\042\u011a\001\001\000\034\005\064\020\041\021\047" +
    "\024\055\030\061\031\046\032\040\033\056\034\050\035" +
    "\062\040\060\044\052\136\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\127\u0118\001\001" +
    "\000\016\026\161\027\155\037\u010e\117\152\122\160\123" +
    "\165\001\001\000\004\131\u010c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\134\110\141\367\001\001\000\004\126\u0104\001\001" +
    "\000\004\132\u0102\001\001\000\004\133\u0100\001\001\000" +
    "\004\125\376\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\005\064\021\366\024\055\044\052\136\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\137\101\001\001\000\004\130" +
    "\067\001\001\000\004\051\070\001\001\000\002\001\001" +
    "\000\004\066\077\001\001\000\002\001\001\000\004\135" +
    "\074\001\001\000\004\051\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\140\103\001\001\000\002\001\001" +
    "\000\022\030\061\031\046\032\040\033\056\034\050\035" +
    "\062\040\106\045\105\001\001\000\002\001\001\000\004" +
    "\142\112\001\001\000\004\134\110\001\001\000\004\051" +
    "\111\001\001\000\002\001\001\000\004\046\114\001\001" +
    "\000\022\030\061\031\046\032\040\033\056\034\050\035" +
    "\062\040\106\045\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\030\143\031\126\032" +
    "\120\033\137\034\130\060\144\061\136\062\141\065\124" +
    "\070\132\073\142\074\146\075\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\026\161\027\155\037\357" +
    "\117\152\122\160\123\165\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\064\301\076\274\001" +
    "\001\000\002\001\001\000\004\064\261\001\001\000\004" +
    "\050\250\001\001\000\004\005\246\001\001\000\034\030" +
    "\143\031\126\032\120\033\137\034\130\060\144\061\136" +
    "\062\245\065\124\070\132\073\142\074\146\075\123\001" +
    "\001\000\002\001\001\000\016\030\143\031\126\032\120" +
    "\033\137\034\130\070\244\001\001\000\002\001\001\000" +
    "\006\005\064\024\242\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\026\161\027\155" +
    "\037\167\117\152\122\160\123\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\026\161\027\155\037\224" +
    "\115\221\117\152\122\160\123\165\001\001\000\010\043" +
    "\201\106\205\116\204\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\112\171\001\001\000\016\026" +
    "\161\027\155\037\173\117\152\122\160\123\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\112\174\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\026\161\027\155" +
    "\037\216\117\152\122\160\123\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\057\227\106\205\116\230\001\001\000\002\001" +
    "\001\000\016\026\161\027\155\037\235\117\152\122\160" +
    "\123\165\001\001\000\016\026\161\027\155\037\232\117" +
    "\152\122\160\123\165\001\001\000\002\001\001\000\016" +
    "\026\161\027\155\037\234\117\152\122\160\123\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\026\161" +
    "\027\155\037\237\117\152\122\160\123\165\001\001\000" +
    "\002\001\001\000\004\047\241\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\030\143\031\126" +
    "\032\120\033\137\034\130\060\144\061\136\062\256\065" +
    "\124\070\132\073\142\074\146\075\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\026\161\027\155\037" +
    "\253\117\152\122\160\123\165\001\001\000\002\001\001" +
    "\000\004\005\255\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\064\265\067\263\001\001\000\002\001\001\000" +
    "\020\026\161\027\155\037\270\071\266\117\152\122\160" +
    "\123\165\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\112\271\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\064\304\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\026\161\027\155\037\303" +
    "\117\152\122\160\123\165\001\001\000\016\026\161\027" +
    "\155\037\302\117\152\122\160\123\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\026\161\027\155\037\306" +
    "\117\152\122\160\123\165\001\001\000\002\001\001\000" +
    "\004\050\310\001\001\000\004\102\312\001\001\000\004" +
    "\103\315\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\030\143\031\126\032\120\033\137\034\130\060\144" +
    "\061\136\062\326\065\124\070\132\073\142\074\146\075" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\026\161\027\155\037\320\117\152\122\160\123\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\030\143" +
    "\031\126\032\120\033\137\034\130\060\144\061\136\062" +
    "\323\065\124\070\132\073\142\074\146\075\123\001\001" +
    "\000\002\001\001\000\004\102\325\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\026\161" +
    "\027\155\037\331\117\152\122\160\123\165\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\107\335\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\026\161\027" +
    "\155\036\337\037\340\117\152\122\160\123\165\001\001" +
    "\000\002\001\001\000\004\041\342\001\001\000\020\026" +
    "\161\027\155\036\343\037\340\117\152\122\160\123\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\030" +
    "\143\031\126\032\120\033\137\034\130\060\350\065\346" +
    "\070\132\073\142\074\351\075\123\110\345\111\347\001" +
    "\001\000\004\107\353\001\001\000\002\001\001\000\034" +
    "\030\143\031\126\032\120\033\137\034\130\060\350\065" +
    "\346\070\132\073\142\074\351\075\123\110\352\111\347" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\030\143" +
    "\031\126\032\120\033\137\034\130\060\350\065\346\070" +
    "\132\073\142\074\351\075\123\110\356\111\347\001\001" +
    "\000\002\001\001\000\004\005\360\001\001\000\002\001" +
    "\001\000\016\026\161\027\155\037\362\117\152\122\160" +
    "\123\165\001\001\000\002\001\001\000\004\050\364\001" +
    "\001\000\002\001\001\000\004\141\367\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\030\061\031\046\032" +
    "\040\033\056\034\050\035\062\040\106\045\371\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\030\143\031" +
    "\126\032\120\033\137\034\130\060\144\061\136\062\374" +
    "\065\124\070\132\073\142\074\146\075\123\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\014\377\015\032" +
    "\016\034\025\033\042\036\001\001\000\002\001\001\000" +
    "\004\051\u0101\001\001\000\002\001\001\000\004\051\u0103" +
    "\001\001\000\002\001\001\000\014\014\u0105\015\032\016" +
    "\034\025\033\042\036\001\001\000\002\001\001\000\022" +
    "\030\061\031\046\032\040\033\056\034\050\035\062\040" +
    "\106\045\u0107\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\030\143\031\126\032\120\033\137\034\130\060" +
    "\144\061\136\062\u010a\065\124\070\132\073\142\074\146" +
    "\075\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\051\u010d\001\001\000\002\001\001\000\006\005\u0111" +
    "\120\u0110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\u0113\121\u0115\001\001\000\002" +
    "\001\001\000\016\026\161\027\155\037\u0116\117\152\122" +
    "\160\123\165\001\001\000\002\001\001\000\006\005\u0111" +
    "\120\u0117\001\001\000\002\001\001\000\004\051\u0119\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\u011d" +
    "\001\001\000\002\001\001\000\004\022\u011e\001\001\000" +
    "\002\001\001\000\004\023\u0120\001\001\000\002\001\001" +
    "\000\004\023\u0122\001\001\000\004\022\u0123\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\u012e\010\u012d\001\001" +
    "\000\002\001\001\000\004\004\u012f\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\u012e\010\u0131\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\u0136\006\u0137\001\001\000\004\007\u013b\001\001" +
    "\000\002\001\001\000\004\004\u0138\001\001\000\002\001" +
    "\001\000\006\005\u0136\006\u013d\001\001\000\004\005\u013c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        private classObject classFinalSystax ;
        private tipoDatos typeDate = null;
        private tipoDatos typeMethods = null;


        // variables auxiliares
        private Symbol s;
        private String nameClass;
        private String nameVariable;
        private String nameMethods;

        //listas para guardar
        private List<metodoObject> ListMethods =new ArrayList<>();
        private List<VariableObject> ListVariable= new ArrayList<>();
        private List<VariableObject> listParameters= new ArrayList<>();

        //Errores
        private int cantidadErrores= 0;

    //parser
        parser(Lexico lexico){
            super(lexico);
        }

// errores
        public void syntax_error(Symbol cur_token) {
            cantidadErrores++;

            NewJFrame.jTextArea1.append("\n"+cantidadErrores+" - Clase<"+nameClass+"> en simbolo<" + sym.terminalNames[cur_token.sym]+String.format(">posicion: <%d>, <%d>", (cur_token.left+1), (cur_token.right+1)));
        }


     
        public Symbol getSymbol(){
            return this.s;
        }



        public void arrayType() {
        switch (typeDate) {
           
            case INT:
                typeDate = tipoDatos.ARRAYINT;
                break;
            case DOUBLE:
                typeDate = tipoDatos.ARRAYDOUBLE;
                break;
            case CHAR:
                typeDate = tipoDatos.ARRAYCHAR;
                break;
            case BOOLEAN:
                typeDate = tipoDatos.ARRAYBOOLEAN;
                break;
            case STRING:
                typeDate = tipoDatos.ARRAYSTRING;
                break;
            case OBJECT:
                typeDate = tipoDatos.ARRAYOBJECT;
                break;
            default:
                break;
        }
    }

    //metodos
    public String getNameClass(){
        return this.nameClass;
    }
        public int getcantidadErrores(){
            return this.cantidadErrores;
        }
        public List<VariableObject> getListVariable() {
        return ListVariable;
        }
        public List<metodoObject> getListMethods() {
        return ListMethods;
        }
        public classObject getClassSyntax(){
            return this.classFinalSystax;
        }
        // metodos
       private void addVariable (int aleft,int aright){
            ListVariable.add(new VariableObject(typeDate,aright+1,aleft+1,nameVariable));
            typeDate=null;
            nameVariable = "";
        }
        private void addMethods (int aleft,int aright){
            if(typeMethods ==null){
                typeMethods = tipoDatos.CONSTRUCTOR;
            }
            ListMethods.add(new metodoObject(typeMethods, listParameters, (aright+1), (aleft+1), nameMethods));
            listParameters =  new ArrayList<>();
            typeMethods=null;
            nameVariable = "";
        }
        private void addMethodsParameters (int aleft,int aright){
      
            listParameters.add(new VariableObject(typeDate,aright+1,aleft+1,nameVariable));
            typeDate=null;
            nameVariable = "";
        }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= inicioSintaxis clase 
            {
              Object RESULT =null;
		classFinalSystax = new classObject(nameClass, ListMethods, ListVariable, null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicioSintaxis ::= importSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioSintaxis",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicioSintaxis ::= PACKAGE ID pc importSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioSintaxis",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // importSintaxis ::= IMPORT staticImport ID sp importSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("importSintaxis",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // importSintaxis ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("importSintaxis",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // pc ::= PUNTO ID pc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pc",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // pc ::= puntoComaSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pc",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // staticImport ::= STATIC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("staticImport",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // staticImport ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("staticImport",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sp ::= PUNTO sintaxisMayorImportaciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sp ::= puntoComaSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sintaxisMayorImportaciones ::= ID sp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sintaxisMayorImportaciones",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sintaxisMayorImportaciones ::= MULTIPLICACION puntoComaSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sintaxisMayorImportaciones",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // puntoComaSintaxis ::= PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("puntoComaSintaxis",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // puntoComaSintaxis ::= error 
            {
              Object RESULT =null;
		NewJFrame.jTextArea1.append("\n"+cantidadErrores+"Error en clase: "+nameClass+" lexema:" + sym.terminalNames[cur_token.sym]);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("puntoComaSintaxis",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$0 ::= 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
nameClass = identificador.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // clase ::= v CLASS ID NT$0 herenciaSintaxis LLAVESABIERTO internoClase LLAVESCERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // herenciaSintaxis ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("herenciaSintaxis",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // herenciaSintaxis ::= EXNTENDS ID secuenciIDHRE herenciaSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("herenciaSintaxis",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // herenciaSintaxis ::= IMPLEMENTS ID secuenciIDHRE herenciaSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("herenciaSintaxis",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // secuenciIDHRE ::= PUNTO ID secuenciIDHRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("secuenciIDHRE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // secuenciIDHRE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("secuenciIDHRE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // v ::= staticFinalSintaxisEspecifica vfactorizadoStatic 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("v",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // v ::= visibilidadTerminal vfactorizadoVC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("v",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // vfactorizadoStatic ::= visibilidadTerminal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vfactorizadoStatic",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // vfactorizadoStatic ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vfactorizadoStatic",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // vfactorizadoVC ::= staticFinalSintaxisEspecifica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vfactorizadoVC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // vfactorizadoVC ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vfactorizadoVC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // staticFinalSintaxisEspecifica ::= STATIC staticOpcionInclusion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("staticFinalSintaxisEspecifica",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // staticFinalSintaxisEspecifica ::= FINAL finalOpcionInclusion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("staticFinalSintaxisEspecifica",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // staticOpcionInclusion ::= FINAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("staticOpcionInclusion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // staticOpcionInclusion ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("staticOpcionInclusion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // finalOpcionInclusion ::= STATIC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("finalOpcionInclusion",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // finalOpcionInclusion ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("finalOpcionInclusion",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // visibilidadTerminal ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("visibilidadTerminal",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // visibilidadTerminal ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("visibilidadTerminal",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // visibilidadTerminal ::= PROTECTED 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("visibilidadTerminal",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // internoClase ::= visionEspecificaDeClases internoClaseFa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("internoClase",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // internoClase ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("internoClase",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // visualizacionClaseFinal ::= staticFinalSintaxisEspecifica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("visualizacionClaseFinal",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // visualizacionClaseFinal ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("visualizacionClaseFinal",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // visionEspecificaDeClases ::= visibilidadTerminal visualizacionClaseFinal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("visionEspecificaDeClases",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // visionEspecificaDeClases ::= visualizacionClaseFinal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("visionEspecificaDeClases",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // internoClaseFa ::= variableID ingresoOpcionesClases 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("internoClaseFa",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // internoClaseFa ::= ingresoOpcionesClases 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("internoClaseFa",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$1 ::= 
            {
              Object RESULT =null;
int izquierda = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
    int derecha = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
    addVariable(izquierda,derecha);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",83, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ingresoOpcionesClases ::= ingresoNuevasVariables NT$1 internoClase 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ingresoOpcionesClases",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$2 ::= 
            {
              Object RESULT =null;
int izquierda = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
    int derecha = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
    addMethods(izquierda,derecha);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",84, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ingresoOpcionesClases ::= metodoSintaxis NT$2 internoClase 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ingresoOpcionesClases",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipoDatosSintaxis ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDatosSintaxis",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipoDatosSintaxis ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDatosSintaxis",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipoDatosSintaxis ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDatosSintaxis",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipoDatosSintaxis ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDatosSintaxis",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipoDatosSintaxis ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDatosSintaxis",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tipoDatosSintaxis ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDatosSintaxis",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tipoDatosSintaxis ::= error 
            {
              Object RESULT =null;
		Frontend.NewJFrame.jTextArea1.append("\n"+cantidadErrores+"  Error en clase: "+nameClass+" lexema:" + sym.terminalNames[cur_token.sym]);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDatosSintaxis",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // variableID ::= DoubleTipoDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableID",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // variableID ::= CharTipoDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableID",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // variableID ::= BooleanTipoDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableID",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // variableID ::= StringTipoDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableID",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // variableID ::= ObjectTipoDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableID",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // variableID ::= intTipoDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableID",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$3 ::= 
            {
              Object RESULT =null;
typeDate = tipoDatos.INT;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",85, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // intTipoDato ::= INT NT$3 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("intTipoDato",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$4 ::= 
            {
              Object RESULT =null;
typeDate = tipoDatos.DOUBLE;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DoubleTipoDato ::= DOUBLE NT$4 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DoubleTipoDato",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$5 ::= 
            {
              Object RESULT =null;
typeDate = tipoDatos.CHAR;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",87, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CharTipoDato ::= CHAR NT$5 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CharTipoDato",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$6 ::= 
            {
              Object RESULT =null;
typeDate = tipoDatos.BOOLEAN;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",88, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // BooleanTipoDato ::= BOOLEAN NT$6 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BooleanTipoDato",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$7 ::= 
            {
              Object RESULT =null;
typeDate = tipoDatos.STRING;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // StringTipoDato ::= STRING NT$7 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StringTipoDato",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$8 ::= 
            {
              Object RESULT =null;
typeDate = tipoDatos.OBJECT;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",90, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ObjectTipoDato ::= ID NT$8 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ObjectTipoDato",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // onlyIDArray ::= ID arrayID 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		nameVariable = identificador.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("onlyIDArray",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$9 ::= 
            {
              Object RESULT =null;
arrayType();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",91, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // onlyIDArray ::= CORCHETEABIERTO CORCHETECERRADO NT$9 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("onlyIDArray",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // arrayID ::= CORCHETEABIERTO CORCHETECERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayID",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // arrayID ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayID",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ingresoNuevasVariables ::= IGUAL opcionesDatosIngreso variablesConsecutivas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ingresoNuevasVariables",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ingresoNuevasVariables ::= puntoComaSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ingresoNuevasVariables",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // opcionesDatosIngreso ::= tDAtosFacto tDatosPrima 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesDatosIngreso",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // variablesConsecutivas ::= COMA ID variablesConsecutivasFactores 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesConsecutivas",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // variablesConsecutivas ::= puntoComaSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesConsecutivas",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // variablesConsecutivasFactores ::= IGUAL opcionesDatosIngreso variablesConsecutivas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesConsecutivasFactores",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // variablesConsecutivasFactores ::= puntoComaSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesConsecutivasFactores",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // tDAtosFacto ::= charSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tDAtosFacto",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // tDAtosFacto ::= funcionesBooleanas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tDAtosFacto",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // tDAtosFacto ::= expresionesEspecificasElementales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tDAtosFacto",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // tDAtosFacto ::= Casting 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tDAtosFacto",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // tDAtosFacto ::= error 
            {
              Object RESULT =null;
		NewJFrame.jTextArea1.append("\n"+cantidadErrores+"  Error en clase: "+nameClass+" lexema:" + sym.terminalNames[cur_token.sym]);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tDAtosFacto",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // funcionesBooleanas ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionesBooleanas",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // funcionesBooleanas ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionesBooleanas",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresionesEspecificasElementales ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesEspecificasElementales",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresionesEspecificasElementales ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesEspecificasElementales",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresionesEspecificasElementales ::= TEXT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesEspecificasElementales",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // tDatosPrima ::= operadoresTipos opcionesDatosIngreso 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tDatosPrima",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // tDatosPrima ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tDatosPrima",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Casting ::= PARENTESISABIERTO opcionesDatosIngreso PARENTESISCERRADO tDatosDespues 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Casting",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Casting ::= PARENTESISABIERTO typeVaribleSimple PARENTESISCERRADO opcionesDatosIngreso 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Casting",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // tDatosDespues ::= operadoresTipos opcionesDatosIngreso 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tDatosDespues",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // tDatosDespues ::= INTERO opcionesDatosIngreso DOBLE_PUNTO opcionesDatosIngreso 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tDatosDespues",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // tDatosDespues ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tDatosDespues",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // typeVaribleSimple ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVaribleSimple",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // typeVaribleSimple ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVaribleSimple",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // typeVaribleSimple ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVaribleSimple",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // typeVaribleSimple ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVaribleSimple",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // typeVaribleSimple ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVaribleSimple",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // operadoresTipos ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadoresTipos",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // operadoresTipos ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadoresTipos",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // operadoresTipos ::= DOUBLE_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadoresTipos",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // operadoresTipos ::= MENOR_Q_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadoresTipos",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // operadoresTipos ::= MAYOR_Q_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadoresTipos",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // operadoresTipos ::= MENOR_Q 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadoresTipos",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // operadoresTipos ::= MAYOR_Q 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadoresTipos",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // operadoresTipos ::= ADMIRACION_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadoresTipos",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // operadoresTipos ::= operadoresAritmeticos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadoresTipos",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // operadoresAritmeticos ::= SUMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadoresAritmeticos",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // operadoresAritmeticos ::= RESTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadoresAritmeticos",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // operadoresAritmeticos ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadoresAritmeticos",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // operadoresAritmeticos ::= DIVISION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadoresAritmeticos",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // charSintaxis ::= SIMPLE_COMILLA CARACTER SIMPLE_COMILLA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("charSintaxis",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // newParentesisOCochtes ::= parametrosSintaxisGeneral 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("newParentesisOCochtes",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // parametrosSintaxisGeneral ::= PARENTESISABIERTO parametrosConsecutivosOBjetos PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosSintaxisGeneral",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // parametrosSintaxisGeneral ::= PARENTESISABIERTO PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosSintaxisGeneral",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // parametrosConsecutivosOBjetos ::= opcionesDatosIngreso objectInst 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosConsecutivosOBjetos",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // objectInst ::= COMA parametrosConsecutivosOBjetos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("objectInst",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // objectInst ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("objectInst",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NT$10 ::= 
            {
              Object RESULT =null;
nameMethods=nameVariable;typeMethods = typeDate;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",92, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // metodoSintaxis ::= NT$10 PARENTESISABIERTO pMetodoS PARENTESISCERRADO LLAVESABIERTO localMetodo LLAVESCERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodoSintaxis",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NT$11 ::= 
            {
              Object RESULT =null;
typeMethods = tipoDatos.VOID;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",93, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
nameMethods = a.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",94, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // metodoSintaxis ::= VOID NT$11 ID NT$12 PARENTESISABIERTO pMetodoS PARENTESISCERRADO LLAVESABIERTO localMetodo LLAVESCERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodoSintaxis",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NT$13 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
nameMethods = a.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // metodoSintaxis ::= ID NT$13 PARENTESISABIERTO pMetodoS PARENTESISCERRADO LLAVESABIERTO localMetodo LLAVESCERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodoSintaxis",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // NT$14 ::= 
            {
              Object RESULT =null;
int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
            int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
            addMethodsParameters(aleft,aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",96, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // pMetodoS ::= variableID NT$14 pMetodoSP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pMetodoS",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // pMetodoS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pMetodoS",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // pMetodoSP ::= COMA pMetodoS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pMetodoSP",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // pMetodoSP ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pMetodoSP",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // localMetodo ::= local localMetodo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("localMetodo",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // localMetodo ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("localMetodo",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // local ::= variableLocal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // local ::= SentenciasControlSintaxisGeneral 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // local ::= salidasOpciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // variableLocal ::= variableLocalFinal ingresoNuevasVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableLocal",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // variableLocalFinal ::= FINAL variableIDLocal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableLocalFinal",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // variableLocalFinal ::= variableIDLocal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableLocalFinal",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // variableLocalFinal ::= usarVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableLocalFinal",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // variableLocalFinal ::= salidasOpciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableLocalFinal",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // variableIDLocal ::= DoubleTipoDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableIDLocal",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // variableIDLocal ::= CharTipoDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableIDLocal",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // variableIDLocal ::= BooleanTipoDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableIDLocal",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // variableIDLocal ::= StringTipoDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableIDLocal",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // variableIDLocal ::= intTipoDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableIDLocal",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // usarVariable ::= ID OperadoresIncrementales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("usarVariable",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // usarVariable ::= THIS loclaMetodFacto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("usarVariable",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // usarVariable ::= SUPER soloId PARENTESISABIERTO opcionesDatosIngreso secuenciDatos PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("usarVariable",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // soloId ::= PUNTO ID soloId 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("soloId",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // soloId ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("soloId",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // secuenciDatos ::= COMA opcionesDatosIngreso secuenciDatos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("secuenciDatos",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // secuenciDatos ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("secuenciDatos",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // OperadoresIncrementales ::= CREMENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadoresIncrementales",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // OperadoresIncrementales ::= SUMA_IGUAL opcionesDatosIngreso 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadoresIncrementales",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // OperadoresIncrementales ::= INCREMENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadoresIncrementales",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // OperadoresIncrementales ::= RESTA_IGUAL opcionesDatosIngreso 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadoresIncrementales",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // OperadoresIncrementales ::= ID loclaMetodFacto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadoresIncrementales",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // OperadoresIncrementales ::= loclaMetodFacto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadoresIncrementales",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // loclaMetodFacto ::= PUNTO ID variableObjectUsarCrear 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loclaMetodFacto",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // loclaMetodFacto ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loclaMetodFacto",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // variableObjectUsarCrear ::= PARENTESISABIERTO variableSet 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableObjectUsarCrear",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // variableObjectUsarCrear ::= loclaMetodFacto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableObjectUsarCrear",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // variableSet ::= opcionesDatosIngreso secuenciDatos PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableSet",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // variableSet ::= PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableSet",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // salidasOpciones ::= BREAK puntoComaSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("salidasOpciones",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // salidasOpciones ::= RETURN opcionesDatosIngreso puntoComaSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("salidasOpciones",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // SentenciasControlSintaxisGeneral ::= WHILE PARENTESISABIERTO opcionesDatosIngreso PARENTESISCERRADO realicarSentenciasControlSintaxisGeneral 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciasControlSintaxisGeneral",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // SentenciasControlSintaxisGeneral ::= DO realicarSentenciasControlSintaxisGeneral WHILE PARENTESISABIERTO opcionesDatosIngreso PARENTESISCERRADO puntoComaSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciasControlSintaxisGeneral",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // SentenciasControlSintaxisGeneral ::= IF PARENTESISABIERTO opcionesDatosIngreso PARENTESISCERRADO realicarSentenciasControlSintaxisGeneral sentenciaElse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciasControlSintaxisGeneral",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // SentenciasControlSintaxisGeneral ::= SWITCH PARENTESISABIERTO opcionesDatosIngreso PARENTESISCERRADO LLAVESABIERTO SwitchSintaxisGeneral LLAVESCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciasControlSintaxisGeneral",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // realicarSentenciasControlSintaxisGeneral ::= LLAVESABIERTO localMetodo LLAVESCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("realicarSentenciasControlSintaxisGeneral",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // SwitchSintaxisGeneral ::= CASE parametrosConsecutivosOBjetos DOBLE_PUNTO SwitchEspecificoSintaxis SwitchSintaxisGeneral 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SwitchSintaxisGeneral",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // SwitchSintaxisGeneral ::= DEFAULT DOBLE_PUNTO SwitchEspecificoSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SwitchSintaxisGeneral",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // SwitchSintaxisGeneral ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SwitchSintaxisGeneral",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // SwitchEspecificoSintaxis ::= declaracionesSwitch SwitchEspecificoSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SwitchEspecificoSintaxis",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // SwitchEspecificoSintaxis ::= salidasOpciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SwitchEspecificoSintaxis",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // declaracionesSwitch ::= variableLocal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesSwitch",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // declaracionesSwitch ::= SentenciasControlSintaxisGeneral 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesSwitch",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // sentenciaElse ::= ELSE sentenciaElseFac 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaElse",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // sentenciaElse ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaElse",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // sentenciaElseFac ::= LLAVESABIERTO localMetodo LLAVESCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaElseFac",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // sentenciaElseFac ::= IF PARENTESISABIERTO opcionesDatosIngreso PARENTESISCERRADO LLAVESABIERTO localMetodo LLAVESCERRADO sentenciaElse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaElseFac",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // sentenciaElseFac ::= error 
            {
              Object RESULT =null;
		NewJFrame.jTextArea1.append("\n"+cantidadErrores+"  Error en clase: "+nameClass+" lexema:" + sym.terminalNames[cur_token.sym]);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaElseFac",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
