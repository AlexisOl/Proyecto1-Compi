
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package AnalizadoresLex_Sin;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.Symbol;
import Frontend.*;
import Objects.metodoObject;
import Objects.VariableObject;
import Objects.classObject;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\273\000\002\002\004\000\002\002\004\000\002\003" +
    "\003\000\002\003\006\000\002\004\007\000\002\004\002" +
    "\000\002\010\005\000\002\010\003\000\002\104\003\000" +
    "\002\104\002\000\002\006\004\000\002\006\003\000\002" +
    "\007\004\000\002\007\004\000\002\005\003\000\002\005" +
    "\003\000\002\124\002\000\002\013\012\000\002\022\002" +
    "\000\002\022\006\000\002\022\006\000\002\023\005\000" +
    "\002\023\002\000\002\017\004\000\002\017\004\000\002" +
    "\011\003\000\002\011\002\000\002\012\003\000\002\012" +
    "\002\000\002\016\004\000\002\016\004\000\002\052\003" +
    "\000\002\052\002\000\002\053\003\000\002\053\002\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\014\004\000\002\014\002\000\002\042\003\000\002\042" +
    "\002\000\002\025\004\000\002\025\003\000\002\020\004" +
    "\000\002\020\003\000\002\125\002\000\002\021\005\000" +
    "\002\126\002\000\002\021\005\000\002\113\003\000\002" +
    "\113\003\000\002\113\003\000\002\113\003\000\002\113" +
    "\003\000\002\113\003\000\002\113\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\127\002\000\002" +
    "\030\005\000\002\130\002\000\002\031\005\000\002\131" +
    "\002\000\002\032\005\000\002\132\002\000\002\033\005" +
    "\000\002\133\002\000\002\034\005\000\002\134\002\000" +
    "\002\035\005\000\002\024\005\000\002\024\003\000\002" +
    "\037\004\000\002\120\005\000\002\120\003\000\002\121" +
    "\005\000\002\121\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\122\003\000\002\122\003\000\002\123\003\000\002" +
    "\123\003\000\002\123\003\000\002\043\004\000\002\043" +
    "\002\000\002\117\006\000\002\117\006\000\002\057\004" +
    "\000\002\057\006\000\002\057\002\000\002\115\003\000" +
    "\002\115\003\000\002\115\003\000\002\115\003\000\002" +
    "\115\003\000\002\116\003\000\002\116\003\000\002\116" +
    "\003\000\002\116\003\000\002\116\003\000\002\116\003" +
    "\000\002\116\003\000\002\116\003\000\002\116\003\000" +
    "\002\106\003\000\002\106\003\000\002\106\003\000\002" +
    "\106\003\000\002\026\005\000\002\114\003\000\002\055" +
    "\005\000\002\055\004\000\002\036\004\000\002\041\004" +
    "\000\002\041\002\000\002\135\002\000\002\044\011\000" +
    "\002\136\002\000\002\137\002\000\002\044\014\000\002" +
    "\140\002\000\002\045\005\000\002\045\002\000\002\046" +
    "\004\000\002\046\002\000\002\062\004\000\002\062\002" +
    "\000\002\061\003\000\002\061\003\000\002\061\003\000" +
    "\002\060\004\000\002\073\004\000\002\073\003\000\002" +
    "\073\003\000\002\073\003\000\002\070\003\000\002\070" +
    "\003\000\002\070\003\000\002\070\003\000\002\070\003" +
    "\000\002\075\004\000\002\075\004\000\002\075\010\000" +
    "\002\047\005\000\002\047\002\000\002\112\005\000\002" +
    "\112\002\000\002\076\003\000\002\076\004\000\002\076" +
    "\003\000\002\076\004\000\002\076\004\000\002\076\003" +
    "\000\002\064\005\000\002\064\002\000\002\067\004\000" +
    "\002\067\003\000\002\071\005\000\002\071\003\000\002" +
    "\065\004\000\002\065\005\000\002\074\007\000\002\074" +
    "\011\000\002\074\010\000\002\074\011\000\002\050\005" +
    "\000\002\107\007\000\002\107\005\000\002\107\002\000" +
    "\002\110\004\000\002\110\003\000\002\111\003\000\002" +
    "\111\003\000\002\102\004\000\002\102\002\000\002\103" +
    "\005\000\002\103\012\000\002\103\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012b\000\020\022\006\023\005\052\ufffc\053\ufffc\054" +
    "\ufffc\055\ufffc\056\ufffc\001\002\000\014\052\uffff\053\uffff" +
    "\054\uffff\055\uffff\056\uffff\001\002\000\006\017\ufff8\056" +
    "\u0123\001\002\000\004\017\u011b\001\002\000\004\002\u011a" +
    "\001\002\000\014\052\016\053\012\054\014\055\021\056" +
    "\013\001\002\000\010\031\uffe5\055\021\056\013\001\002" +
    "\000\036\003\uffde\004\uffde\005\uffde\006\uffde\010\uffde\017" +
    "\uffde\020\uffde\025\uffde\031\uffde\037\uffde\055\uffde\056\uffde" +
    "\067\uffde\102\uffde\001\002\000\042\003\uffe1\004\uffe1\005" +
    "\uffe1\006\uffe1\010\uffe1\017\uffe1\020\uffe1\025\uffe1\031\uffe1" +
    "\037\uffe1\052\uffe1\053\uffe1\054\uffe1\055\u0117\067\uffe1\102" +
    "\uffe1\001\002\000\036\003\uffdc\004\uffdc\005\uffdc\006\uffdc" +
    "\010\uffdc\017\uffdc\020\uffdc\025\uffdc\031\uffdc\037\uffdc\055" +
    "\uffdc\056\uffdc\067\uffdc\102\uffdc\001\002\000\012\031\uffe7" +
    "\052\016\053\012\054\014\001\002\000\036\003\uffdd\004" +
    "\uffdd\005\uffdd\006\uffdd\010\uffdd\017\uffdd\020\uffdd\025\uffdd" +
    "\031\uffdd\037\uffdd\055\uffdd\056\uffdd\067\uffdd\102\uffdd\001" +
    "\002\000\004\031\024\001\002\000\004\002\000\001\002" +
    "\000\042\003\uffdf\004\uffdf\005\uffdf\006\uffdf\010\uffdf\017" +
    "\uffdf\020\uffdf\025\uffdf\031\uffdf\037\uffdf\052\uffdf\053\uffdf" +
    "\054\uffdf\056\023\067\uffdf\102\uffdf\001\002\000\040\003" +
    "\uffe3\004\uffe3\005\uffe3\006\uffe3\010\uffe3\017\uffe3\020\uffe3" +
    "\025\uffe3\031\uffe3\037\uffe3\052\uffe3\053\uffe3\054\uffe3\067" +
    "\uffe3\102\uffe3\001\002\000\040\003\uffe0\004\uffe0\005\uffe0" +
    "\006\uffe0\010\uffe0\017\uffe0\020\uffe0\025\uffe0\031\uffe0\037" +
    "\uffe0\052\uffe0\053\uffe0\054\uffe0\067\uffe0\102\uffe0\001\002" +
    "\000\004\017\025\001\002\000\010\033\ufff1\034\ufff1\104" +
    "\ufff1\001\002\000\010\033\030\034\027\104\uffef\001\002" +
    "\000\004\017\u0111\001\002\000\004\017\u010b\001\002\000" +
    "\004\104\032\001\002\000\044\003\uffd8\004\uffd8\005\uffd8" +
    "\006\uffd8\010\uffd8\017\uffd8\020\uffd8\025\uffd8\037\uffd8\052" +
    "\016\053\012\054\014\055\021\056\013\067\uffd8\102\uffd8" +
    "\105\uffda\001\002\000\034\003\uffd8\004\uffd8\005\uffd8\006" +
    "\uffd8\010\uffd8\017\uffd8\020\uffd8\025\uffd8\037\uffd8\055\021" +
    "\056\013\067\uffd8\102\uffd8\001\002\000\030\003\060\004" +
    "\044\005\067\006\046\010\054\017\052\020\055\025\064" +
    "\037\066\067\045\102\uff85\001\002\000\030\003\uffd9\004" +
    "\uffd9\005\uffd9\006\uffd9\010\uffd9\017\uffd9\020\uffd9\025\uffd9" +
    "\037\uffd9\067\uffd9\102\uffd9\001\002\000\004\105\040\001" +
    "\002\000\030\003\uffd6\004\uffd6\005\uffd6\006\uffd6\010\uffd6" +
    "\017\uffd6\020\uffd6\025\uffd6\037\uffd6\067\uffd6\102\uffd6\001" +
    "\002\000\004\002\ufff0\001\002\000\020\003\uffc7\025\uffc7" +
    "\030\uffc7\037\uffc7\067\uffc7\102\uffc7\103\uffc7\001\002\000" +
    "\004\105\uffdb\001\002\000\004\102\u0104\001\002\000\002" +
    "\001\002\000\022\003\152\011\144\012\150\015\141\016" +
    "\145\021\154\026\151\102\142\001\002\000\002\001\002" +
    "\000\020\003\uffc8\025\uffc8\030\uffc8\037\uffc8\067\uffc8\102" +
    "\uffc8\103\uffc8\001\002\000\004\105\uffd4\001\002\000\020" +
    "\003\uffc5\025\uffc5\030\uffc5\037\uffc5\067\uffc5\102\uffc5\103" +
    "\uffc5\001\002\000\002\001\002\000\044\003\uffd1\004\uffd1" +
    "\005\uffd1\006\uffd1\010\uffd1\017\uffd1\020\uffd1\025\uffd1\037" +
    "\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\067\uffd1" +
    "\102\uffd1\105\uffd1\001\002\000\002\001\002\000\002\001" +
    "\002\000\044\003\uffd3\004\uffd3\005\uffd3\006\uffd3\010\uffd3" +
    "\017\uffd3\020\uffd3\025\uffd3\037\uffd3\052\uffd3\053\uffd3\054" +
    "\uffd3\055\uffd3\056\uffd3\067\uffd3\102\uffd3\105\uffd3\001\002" +
    "\000\020\003\uffc6\025\uffc6\030\uffc6\037\uffc6\067\uffc6\102" +
    "\uffc6\103\uffc6\001\002\000\072\003\ufff2\004\ufff2\005\ufff2" +
    "\006\ufff2\010\ufff2\017\ufff2\020\ufff2\023\ufff2\025\ufff2\032" +
    "\ufff2\035\ufff2\037\ufff2\041\ufff2\042\ufff2\043\ufff2\045\ufff2" +
    "\046\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2\053\ufff2\054" +
    "\ufff2\055\ufff2\056\ufff2\067\ufff2\102\ufff2\105\ufff2\001\002" +
    "\000\014\003\060\025\064\037\066\067\045\102\uff85\001" +
    "\002\000\020\003\uffc3\025\uffc3\030\uffc3\037\uffc3\067\uffc3" +
    "\102\uffc3\103\uffc3\001\002\000\020\003\uffc4\025\uffc4\030" +
    "\uffc4\037\uffc4\067\uffc4\102\uffc4\103\uffc4\001\002\000\072" +
    "\003\ufff3\004\ufff3\005\ufff3\006\ufff3\010\ufff3\017\ufff3\020" +
    "\ufff3\023\ufff3\025\ufff3\032\ufff3\035\ufff3\037\ufff3\041\ufff3" +
    "\042\ufff3\043\ufff3\045\ufff3\046\ufff3\047\ufff3\050\ufff3\051" +
    "\ufff3\052\ufff3\053\ufff3\054\ufff3\055\ufff3\056\ufff3\067\ufff3" +
    "\102\ufff3\105\ufff3\001\002\000\064\003\uffb5\004\uffb5\005" +
    "\uffb5\006\uffb5\010\uffb5\017\uffb5\020\uffb5\025\uffb5\032\uffb5" +
    "\035\uffb5\037\uffb5\041\uffb5\042\uffb5\043\uffb5\045\uffb5\050" +
    "\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5" +
    "\067\uffb5\102\uffb5\105\uffb5\001\002\000\004\017\uff83\001" +
    "\002\000\002\001\002\000\002\001\002\000\020\003\uffbf" +
    "\025\uffbf\030\uffbf\037\uffbf\067\uffbf\102\uffbf\103\uffbf\001" +
    "\002\000\004\017\073\001\002\000\004\102\uff82\001\002" +
    "\000\004\102\075\001\002\000\020\004\044\005\067\006" +
    "\046\010\054\017\052\020\055\103\uff7e\001\002\000\004" +
    "\103\104\001\002\000\006\030\uff80\103\uff80\001\002\000" +
    "\006\030\101\103\uff7c\001\002\000\020\004\044\005\067" +
    "\006\046\010\054\017\052\020\055\103\uff7e\001\002\000" +
    "\004\103\uff7f\001\002\000\004\103\uff7d\001\002\000\004" +
    "\104\105\001\002\000\042\004\044\005\067\006\046\010" +
    "\054\017\117\020\055\032\121\035\134\041\107\042\122" +
    "\043\115\045\113\050\123\051\110\055\126\105\uff7a\001" +
    "\002\000\010\003\uff70\025\uff70\067\uff70\001\002\000\004" +
    "\102\347\001\002\000\022\003\152\011\144\012\150\015" +
    "\141\016\145\021\154\026\151\102\142\001\002\000\050" +
    "\003\uff72\004\uff77\005\uff77\006\uff77\010\uff77\017\uff77\020" +
    "\uff77\025\uff72\032\uff77\035\uff77\041\uff77\042\uff77\043\uff77" +
    "\045\uff77\050\uff77\051\uff77\055\uff77\067\uff72\105\uff77\001" +
    "\002\000\010\003\uff73\025\uff73\067\uff73\001\002\000\004" +
    "\102\316\001\002\000\010\003\uff71\025\uff71\067\uff71\001" +
    "\002\000\004\102\273\001\002\000\010\003\uff6e\025\uff6e" +
    "\067\uff6e\001\002\000\024\003\uff5e\017\261\024\246\025" +
    "\uff5e\057\265\061\263\062\267\063\264\067\uff5e\001\002" +
    "\000\010\003\uff74\025\uff74\067\uff74\001\002\000\012\003" +
    "\uff5e\024\246\025\uff5e\067\uff5e\001\002\000\004\104\235" +
    "\001\002\000\006\003\060\025\064\001\002\000\042\004" +
    "\044\005\067\006\046\010\054\017\117\020\055\032\121" +
    "\035\134\041\107\042\122\043\115\045\113\050\123\051" +
    "\110\055\126\105\uff7a\001\002\000\010\003\uff6f\025\uff6f" +
    "\067\uff6f\001\002\000\014\004\044\005\067\006\046\010" +
    "\054\020\055\001\002\000\004\105\231\001\002\000\010" +
    "\003\060\025\064\067\045\001\002\000\010\003\uff6d\025" +
    "\uff6d\067\uff6d\001\002\000\042\004\uff79\005\uff79\006\uff79" +
    "\010\uff79\017\uff79\020\uff79\032\uff79\035\uff79\041\uff79\042" +
    "\uff79\043\uff79\045\uff79\050\uff79\051\uff79\055\uff79\105\uff79" +
    "\001\002\000\042\004\uff78\005\uff78\006\uff78\010\uff78\017" +
    "\uff78\020\uff78\032\uff78\035\uff78\041\uff78\042\uff78\043\uff78" +
    "\045\uff78\050\uff78\051\uff78\055\uff78\105\uff78\001\002\000" +
    "\006\024\135\102\uff68\001\002\000\004\017\226\001\002" +
    "\000\004\102\137\001\002\000\022\003\152\011\144\012" +
    "\150\015\141\016\145\021\154\026\151\102\142\001\002" +
    "\000\046\003\uffac\025\uffac\027\uffac\030\uffac\060\uffac\064" +
    "\uffac\065\uffac\066\uffac\067\uffac\070\uffac\071\uffac\072\uffac" +
    "\073\uffac\074\uffac\075\uffac\076\uffac\101\uffac\103\uffac\001" +
    "\002\000\046\003\uffa7\025\uffa7\027\uffa7\030\uffa7\060\uffa7" +
    "\064\uffa7\065\uffa7\066\uffa7\067\uffa7\070\uffa7\071\uffa7\072" +
    "\uffa7\073\uffa7\074\uffa7\075\uffa7\076\uffa7\101\uffa7\103\uffa7" +
    "\001\002\000\034\003\152\004\205\005\213\006\206\010" +
    "\210\011\144\012\150\015\141\016\145\020\211\021\154" +
    "\026\151\102\142\001\002\000\046\003\uffa4\025\uffa4\027" +
    "\uffa4\030\uffa4\060\170\064\201\065\174\066\200\067\uffa4" +
    "\070\202\071\165\072\176\073\171\074\203\075\177\076" +
    "\175\101\166\103\uffa4\001\002\000\046\003\uffaa\025\uffaa" +
    "\027\uffaa\030\uffaa\060\uffaa\064\uffaa\065\uffaa\066\uffaa\067" +
    "\uffaa\070\uffaa\071\uffaa\072\uffaa\073\uffaa\074\uffaa\075\uffaa" +
    "\076\uffaa\101\uffaa\103\uffaa\001\002\000\046\003\uffa8\025" +
    "\uffa8\027\uffa8\030\uffa8\060\uffa8\064\uffa8\065\uffa8\066\uffa8" +
    "\067\uffa8\070\uffa8\071\uffa8\072\uffa8\073\uffa8\074\uffa8\075" +
    "\uffa8\076\uffa8\101\uffa8\103\uffa8\001\002\000\046\003\uffae" +
    "\025\uffae\027\uffae\030\uffae\060\uffae\064\uffae\065\uffae\066" +
    "\uffae\067\uffae\070\uffae\071\uffae\072\uffae\073\uffae\074\uffae" +
    "\075\uffae\076\uffae\101\uffae\103\uffae\001\002\000\046\003" +
    "\uffaf\025\uffaf\027\uffaf\030\uffaf\060\uffaf\064\uffaf\065\uffaf" +
    "\066\uffaf\067\uffaf\070\uffaf\071\uffaf\072\uffaf\073\uffaf\074" +
    "\uffaf\075\uffaf\076\uffaf\101\uffaf\103\uffaf\001\002\000\046" +
    "\003\uffa9\025\uffa9\027\uffa9\030\uffa9\060\uffa9\064\uffa9\065" +
    "\uffa9\066\uffa9\067\uffa9\070\uffa9\071\uffa9\072\uffa9\073\uffa9" +
    "\074\uffa9\075\uffa9\076\uffa9\101\uffa9\103\uffa9\001\002\000" +
    "\004\007\163\001\002\000\046\003\uffab\025\uffab\027\uffab" +
    "\030\uffab\060\uffab\064\uffab\065\uffab\066\uffab\067\uffab\070" +
    "\uffab\071\uffab\072\uffab\073\uffab\074\uffab\075\uffab\076\uffab" +
    "\101\uffab\103\uffab\001\002\000\046\003\uffad\025\uffad\027" +
    "\uffad\030\uffad\060\uffad\064\uffad\065\uffad\066\uffad\067\uffad" +
    "\070\uffad\071\uffad\072\uffad\073\uffad\074\uffad\075\uffad\076" +
    "\uffad\101\uffad\103\uffad\001\002\000\046\003\uffa6\025\uffa6" +
    "\027\uffa6\030\uffa6\060\uffa6\064\uffa6\065\uffa6\066\uffa6\067" +
    "\uffa6\070\uffa6\071\uffa6\072\uffa6\073\uffa6\074\uffa6\075\uffa6" +
    "\076\uffa6\101\uffa6\103\uffa6\001\002\000\006\030\156\103" +
    "\uff66\001\002\000\022\003\152\011\144\012\150\015\141" +
    "\016\145\021\154\026\151\102\142\001\002\000\004\103" +
    "\160\001\002\000\010\003\uff6a\025\uff6a\067\uff6a\001\002" +
    "\000\006\030\156\103\uff66\001\002\000\004\103\uff67\001" +
    "\002\000\004\026\164\001\002\000\046\003\uff8c\025\uff8c" +
    "\027\uff8c\030\uff8c\060\uff8c\064\uff8c\065\uff8c\066\uff8c\067" +
    "\uff8c\070\uff8c\071\uff8c\072\uff8c\073\uff8c\074\uff8c\075\uff8c" +
    "\076\uff8c\101\uff8c\103\uff8c\001\002\000\022\003\uff98\011" +
    "\uff98\012\uff98\015\uff98\016\uff98\021\uff98\026\uff98\102\uff98" +
    "\001\002\000\022\003\uff92\011\uff92\012\uff92\015\uff92\016" +
    "\uff92\021\uff92\026\uff92\102\uff92\001\002\000\046\003\uffb4" +
    "\025\uffb4\027\uffb4\030\uffb4\060\uffb4\064\uffb4\065\uffb4\066" +
    "\uffb4\067\uffb4\070\uffb4\071\uffb4\072\uffb4\073\uffb4\074\uffb4" +
    "\075\uffb4\076\uffb4\101\uffb4\103\uffb4\001\002\000\022\003" +
    "\uff90\011\uff90\012\uff90\015\uff90\016\uff90\021\uff90\026\uff90" +
    "\102\uff90\001\002\000\022\003\uff96\011\uff96\012\uff96\015" +
    "\uff96\016\uff96\021\uff96\026\uff96\102\uff96\001\002\000\022" +
    "\003\152\011\144\012\150\015\141\016\145\021\154\026" +
    "\151\102\142\001\002\000\022\003\uff91\011\uff91\012\uff91" +
    "\015\uff91\016\uff91\021\uff91\026\uff91\102\uff91\001\002\000" +
    "\022\003\uff8e\011\uff8e\012\uff8e\015\uff8e\016\uff8e\021\uff8e" +
    "\026\uff8e\102\uff8e\001\002\000\022\003\uff93\011\uff93\012" +
    "\uff93\015\uff93\016\uff93\021\uff93\026\uff93\102\uff93\001\002" +
    "\000\022\003\uff97\011\uff97\012\uff97\015\uff97\016\uff97\021" +
    "\uff97\026\uff97\102\uff97\001\002\000\022\003\uff94\011\uff94" +
    "\012\uff94\015\uff94\016\uff94\021\uff94\026\uff94\102\uff94\001" +
    "\002\000\022\003\uff8d\011\uff8d\012\uff8d\015\uff8d\016\uff8d" +
    "\021\uff8d\026\uff8d\102\uff8d\001\002\000\022\003\uff8f\011" +
    "\uff8f\012\uff8f\015\uff8f\016\uff8f\021\uff8f\026\uff8f\102\uff8f" +
    "\001\002\000\022\003\uff99\011\uff99\012\uff99\015\uff99\016" +
    "\uff99\021\uff99\026\uff99\102\uff99\001\002\000\022\003\uff95" +
    "\011\uff95\012\uff95\015\uff95\016\uff95\021\uff95\026\uff95\102" +
    "\uff95\001\002\000\046\003\uffa5\025\uffa5\027\uffa5\030\uffa5" +
    "\060\uffa5\064\uffa5\065\uffa5\066\uffa5\067\uffa5\070\uffa5\071" +
    "\uffa5\072\uffa5\073\uffa5\074\uffa5\075\uffa5\076\uffa5\101\uffa5" +
    "\103\uffa5\001\002\000\004\103\uff9c\001\002\000\004\103" +
    "\uff9b\001\002\000\004\103\224\001\002\000\004\103\uff9a" +
    "\001\002\000\004\103\uff9d\001\002\000\004\103\214\001" +
    "\002\000\004\103\uff9e\001\002\000\050\003\uff9f\014\217" +
    "\025\uff9f\027\uff9f\030\uff9f\060\170\064\201\065\174\066" +
    "\200\067\uff9f\070\202\071\165\072\176\073\171\074\203" +
    "\075\177\076\175\101\166\103\uff9f\001\002\000\046\003" +
    "\uffa3\025\uffa3\027\uffa3\030\uffa3\060\uffa3\064\uffa3\065\uffa3" +
    "\066\uffa3\067\uffa3\070\uffa3\071\uffa3\072\uffa3\073\uffa3\074" +
    "\uffa3\075\uffa3\076\uffa3\101\uffa3\103\uffa3\001\002\000\022" +
    "\003\152\011\144\012\150\015\141\016\145\021\154\026" +
    "\151\102\142\001\002\000\022\003\152\011\144\012\150" +
    "\015\141\016\145\021\154\026\151\102\142\001\002\000" +
    "\004\027\221\001\002\000\022\003\152\011\144\012\150" +
    "\015\141\016\145\021\154\026\151\102\142\001\002\000" +
    "\046\003\uffa0\025\uffa0\027\uffa0\030\uffa0\060\uffa0\064\uffa0" +
    "\065\uffa0\066\uffa0\067\uffa0\070\uffa0\071\uffa0\072\uffa0\073" +
    "\uffa0\074\uffa0\075\uffa0\076\uffa0\101\uffa0\103\uffa0\001\002" +
    "\000\046\003\uffa1\025\uffa1\027\uffa1\030\uffa1\060\uffa1\064" +
    "\uffa1\065\uffa1\066\uffa1\067\uffa1\070\uffa1\071\uffa1\072\uffa1" +
    "\073\uffa1\074\uffa1\075\uffa1\076\uffa1\101\uffa1\103\uffa1\001" +
    "\002\000\022\003\152\011\144\012\150\015\141\016\145" +
    "\021\154\026\151\102\142\001\002\000\046\003\uffa2\025" +
    "\uffa2\027\uffa2\030\uffa2\060\uffa2\064\uffa2\065\uffa2\066\uffa2" +
    "\067\uffa2\070\uffa2\071\uffa2\072\uffa2\073\uffa2\074\uffa2\075" +
    "\uffa2\076\uffa2\101\uffa2\103\uffa2\001\002\000\006\024\135" +
    "\102\uff68\001\002\000\004\102\uff69\001\002\000\042\004" +
    "\uff76\005\uff76\006\uff76\010\uff76\017\uff76\020\uff76\032\uff76" +
    "\035\uff76\041\uff76\042\uff76\043\uff76\045\uff76\050\uff76\051" +
    "\uff76\055\uff76\105\uff76\001\002\000\044\003\uff81\004\uff81" +
    "\005\uff81\006\uff81\010\uff81\017\uff81\020\uff81\025\uff81\037" +
    "\uff81\052\uff81\053\uff81\054\uff81\055\uff81\056\uff81\067\uff81" +
    "\102\uff81\105\uff81\001\002\000\010\003\uff75\025\uff75\067" +
    "\uff75\001\002\000\004\105\uff7b\001\002\000\054\003\uff59" +
    "\004\uff59\005\uff59\006\uff59\010\uff59\017\uff59\020\uff59\025" +
    "\uff59\032\uff59\035\uff59\041\uff59\042\uff59\043\uff59\045\uff59" +
    "\046\uff59\047\uff59\050\uff59\051\uff59\055\uff59\067\uff59\105" +
    "\uff59\001\002\000\042\004\044\005\067\006\046\010\054" +
    "\017\117\020\055\032\121\035\134\041\107\042\122\043" +
    "\115\045\113\050\123\051\110\055\126\105\uff7a\001\002" +
    "\000\004\041\237\001\002\000\004\102\240\001\002\000" +
    "\022\003\152\011\144\012\150\015\141\016\145\021\154" +
    "\026\151\102\142\001\002\000\004\103\242\001\002\000" +
    "\006\003\060\025\064\001\002\000\042\004\uff56\005\uff56" +
    "\006\uff56\010\uff56\017\uff56\020\uff56\032\uff56\035\uff56\041" +
    "\uff56\042\uff56\043\uff56\045\uff56\050\uff56\051\uff56\055\uff56" +
    "\105\uff56\001\002\000\004\105\245\001\002\000\044\004" +
    "\uff53\005\uff53\006\uff53\010\uff53\017\uff53\020\uff53\032\uff53" +
    "\035\uff53\041\uff53\042\uff53\043\uff53\044\uff53\045\uff53\050" +
    "\uff53\051\uff53\055\uff53\105\uff53\001\002\000\004\017\250" +
    "\001\002\000\010\003\uff6b\025\uff6b\067\uff6b\001\002\000" +
    "\014\003\uff5e\024\246\025\uff5e\067\uff5e\102\252\001\002" +
    "\000\010\003\uff5f\025\uff5f\067\uff5f\001\002\000\024\003" +
    "\152\011\144\012\150\015\141\016\145\021\154\026\151" +
    "\102\142\103\255\001\002\000\010\003\uff5c\025\uff5c\067" +
    "\uff5c\001\002\000\010\003\uff5d\025\uff5d\067\uff5d\001\002" +
    "\000\010\003\uff5a\025\uff5a\067\uff5a\001\002\000\006\030" +
    "\156\103\uff66\001\002\000\004\103\260\001\002\000\010" +
    "\003\uff5b\025\uff5b\067\uff5b\001\002\000\012\003\uff5e\024" +
    "\246\025\uff5e\067\uff5e\001\002\000\010\003\uff6c\025\uff6c" +
    "\067\uff6c\001\002\000\010\003\uff65\025\uff65\067\uff65\001" +
    "\002\000\022\003\152\011\144\012\150\015\141\016\145" +
    "\021\154\026\151\102\142\001\002\000\022\003\152\011" +
    "\144\012\150\015\141\016\145\021\154\026\151\102\142" +
    "\001\002\000\010\003\uff60\025\uff60\067\uff60\001\002\000" +
    "\010\003\uff63\025\uff63\067\uff63\001\002\000\010\003\uff64" +
    "\025\uff64\067\uff64\001\002\000\010\003\uff62\025\uff62\067" +
    "\uff62\001\002\000\010\003\uff61\025\uff61\067\uff61\001\002" +
    "\000\022\003\152\011\144\012\150\015\141\016\145\021" +
    "\154\026\151\102\142\001\002\000\004\103\275\001\002" +
    "\000\004\104\235\001\002\000\044\004\uff4a\005\uff4a\006" +
    "\uff4a\010\uff4a\017\uff4a\020\uff4a\032\uff4a\035\uff4a\041\uff4a" +
    "\042\uff4a\043\uff4a\044\277\045\uff4a\050\uff4a\051\uff4a\055" +
    "\uff4a\105\uff4a\001\002\000\010\003\301\043\304\104\302" +
    "\001\002\000\042\004\uff55\005\uff55\006\uff55\010\uff55\017" +
    "\uff55\020\uff55\032\uff55\035\uff55\041\uff55\042\uff55\043\uff55" +
    "\045\uff55\050\uff55\051\uff55\055\uff55\105\uff55\001\002\000" +
    "\042\004\uff47\005\uff47\006\uff47\010\uff47\017\uff47\020\uff47" +
    "\032\uff47\035\uff47\041\uff47\042\uff47\043\uff47\045\uff47\050" +
    "\uff47\051\uff47\055\uff47\105\uff47\001\002\000\042\004\044" +
    "\005\067\006\046\010\054\017\117\020\055\032\121\035" +
    "\134\041\107\042\122\043\115\045\113\050\123\051\110" +
    "\055\126\105\uff7a\001\002\000\042\004\uff4b\005\uff4b\006" +
    "\uff4b\010\uff4b\017\uff4b\020\uff4b\032\uff4b\035\uff4b\041\uff4b" +
    "\042\uff4b\043\uff4b\045\uff4b\050\uff4b\051\uff4b\055\uff4b\105" +
    "\uff4b\001\002\000\004\102\305\001\002\000\022\003\152" +
    "\011\144\012\150\015\141\016\145\021\154\026\151\102" +
    "\142\001\002\000\004\103\307\001\002\000\004\104\310" +
    "\001\002\000\042\004\044\005\067\006\046\010\054\017" +
    "\117\020\055\032\121\035\134\041\107\042\122\043\115" +
    "\045\113\050\123\051\110\055\126\105\uff7a\001\002\000" +
    "\004\105\312\001\002\000\044\004\uff4a\005\uff4a\006\uff4a" +
    "\010\uff4a\017\uff4a\020\uff4a\032\uff4a\035\uff4a\041\uff4a\042" +
    "\uff4a\043\uff4a\044\277\045\uff4a\050\uff4a\051\uff4a\055\uff4a" +
    "\105\uff4a\001\002\000\042\004\uff48\005\uff48\006\uff48\010" +
    "\uff48\017\uff48\020\uff48\032\uff48\035\uff48\041\uff48\042\uff48" +
    "\043\uff48\045\uff48\050\uff48\051\uff48\055\uff48\105\uff48\001" +
    "\002\000\004\105\315\001\002\000\042\004\uff49\005\uff49" +
    "\006\uff49\010\uff49\017\uff49\020\uff49\032\uff49\035\uff49\041" +
    "\uff49\042\uff49\043\uff49\045\uff49\050\uff49\051\uff49\055\uff49" +
    "\105\uff49\001\002\000\022\003\152\011\144\012\150\015" +
    "\141\016\145\021\154\026\151\102\142\001\002\000\004" +
    "\103\320\001\002\000\004\104\321\001\002\000\010\046" +
    "\324\047\322\105\uff50\001\002\000\004\027\343\001\002" +
    "\000\004\105\342\001\002\000\022\003\152\011\144\012" +
    "\150\015\141\016\145\021\154\026\151\102\142\001\002" +
    "\000\004\027\332\001\002\000\006\027\uff86\030\327\001" +
    "\002\000\022\003\152\011\144\012\150\015\141\016\145" +
    "\021\154\026\151\102\142\001\002\000\004\027\uff88\001" +
    "\002\000\004\027\uff87\001\002\000\040\004\044\005\067" +
    "\006\046\010\054\017\117\020\055\032\121\035\134\041" +
    "\107\042\122\043\115\045\113\050\123\051\110\055\126" +
    "\001\002\000\010\046\324\047\322\105\uff50\001\002\000" +
    "\016\003\uff72\025\uff72\046\uff4e\047\uff4e\067\uff72\105\uff4e" +
    "\001\002\000\040\004\044\005\067\006\046\010\054\017" +
    "\117\020\055\032\121\035\134\041\107\042\122\043\115" +
    "\045\113\050\123\051\110\055\126\001\002\000\040\004" +
    "\uff4d\005\uff4d\006\uff4d\010\uff4d\017\uff4d\020\uff4d\032\uff4d" +
    "\035\uff4d\041\uff4d\042\uff4d\043\uff4d\045\uff4d\050\uff4d\051" +
    "\uff4d\055\uff4d\001\002\000\040\004\uff4c\005\uff4c\006\uff4c" +
    "\010\uff4c\017\uff4c\020\uff4c\032\uff4c\035\uff4c\041\uff4c\042" +
    "\uff4c\043\uff4c\045\uff4c\050\uff4c\051\uff4c\055\uff4c\001\002" +
    "\000\010\046\uff4f\047\uff4f\105\uff4f\001\002\000\004\105" +
    "\uff52\001\002\000\042\004\uff54\005\uff54\006\uff54\010\uff54" +
    "\017\uff54\020\uff54\032\uff54\035\uff54\041\uff54\042\uff54\043" +
    "\uff54\045\uff54\050\uff54\051\uff54\055\uff54\105\uff54\001\002" +
    "\000\040\004\044\005\067\006\046\010\054\017\117\020" +
    "\055\032\121\035\134\041\107\042\122\043\115\045\113" +
    "\050\123\051\110\055\126\001\002\000\004\105\uff51\001" +
    "\002\000\006\003\060\025\064\001\002\000\054\003\uff58" +
    "\004\uff58\005\uff58\006\uff58\010\uff58\017\uff58\020\uff58\025" +
    "\uff58\032\uff58\035\uff58\041\uff58\042\uff58\043\uff58\045\uff58" +
    "\046\uff58\047\uff58\050\uff58\051\uff58\055\uff58\067\uff58\105" +
    "\uff58\001\002\000\022\003\152\011\144\012\150\015\141" +
    "\016\145\021\154\026\151\102\142\001\002\000\004\103" +
    "\351\001\002\000\004\104\235\001\002\000\042\004\uff57" +
    "\005\uff57\006\uff57\010\uff57\017\uff57\020\uff57\032\uff57\035" +
    "\uff57\041\uff57\042\uff57\043\uff57\045\uff57\050\uff57\051\uff57" +
    "\055\uff57\105\uff57\001\002\000\004\105\uffd5\001\002\000" +
    "\044\003\uffd8\004\uffd8\005\uffd8\006\uffd8\010\uffd8\017\uffd8" +
    "\020\uffd8\025\uffd8\037\uffd8\052\016\053\012\054\014\055" +
    "\021\056\013\067\uffd8\102\uffd8\105\uffda\001\002\000\004" +
    "\105\uffd2\001\002\000\002\001\002\000\020\003\uffb9\025" +
    "\uffb9\030\uffb9\037\uffb9\067\uffb9\102\uffb9\103\uffb9\001\002" +
    "\000\002\001\002\000\020\003\uffbb\025\uffbb\030\uffbb\037" +
    "\uffbb\067\uffbb\102\uffbb\103\uffbb\001\002\000\044\003\uffd8" +
    "\004\uffd8\005\uffd8\006\uffd8\010\uffd8\017\uffd8\020\uffd8\025" +
    "\uffd8\037\uffd8\052\016\053\012\054\014\055\021\056\013" +
    "\067\uffd8\102\uffd8\105\uffda\001\002\000\004\105\uffd0\001" +
    "\002\000\002\001\002\000\020\003\uffb7\025\uffb7\030\uffb7" +
    "\037\uffb7\067\uffb7\102\uffb7\103\uffb7\001\002\000\002\001" +
    "\002\000\020\003\uffbd\025\uffbd\030\uffbd\037\uffbd\067\uffbd" +
    "\102\uffbd\103\uffbd\001\002\000\010\003\060\025\064\030" +
    "\371\001\002\000\004\017\374\001\002\000\064\003\uffb6" +
    "\004\uffb6\005\uffb6\006\uffb6\010\uffb6\017\uffb6\020\uffb6\025" +
    "\uffb6\032\uffb6\035\uffb6\037\uffb6\041\uffb6\042\uffb6\043\uffb6" +
    "\045\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055" +
    "\uffb6\056\uffb6\067\uffb6\102\uffb6\105\uffb6\001\002\000\064" +
    "\003\uffb2\004\uffb2\005\uffb2\006\uffb2\010\uffb2\017\uffb2\020" +
    "\uffb2\025\uffb2\032\uffb2\035\uffb2\037\uffb2\041\uffb2\042\uffb2" +
    "\043\uffb2\045\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054" +
    "\uffb2\055\uffb2\056\uffb2\067\uffb2\102\uffb2\105\uffb2\001\002" +
    "\000\010\003\060\025\064\067\375\001\002\000\022\003" +
    "\152\011\144\012\150\015\141\016\145\021\154\026\151" +
    "\102\142\001\002\000\064\003\uffb0\004\uffb0\005\uffb0\006" +
    "\uffb0\010\uffb0\017\uffb0\020\uffb0\025\uffb0\032\uffb0\035\uffb0" +
    "\037\uffb0\041\uffb0\042\uffb0\043\uffb0\045\uffb0\050\uffb0\051" +
    "\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\067\uffb0" +
    "\102\uffb0\105\uffb0\001\002\000\064\003\uffb3\004\uffb3\005" +
    "\uffb3\006\uffb3\010\uffb3\017\uffb3\020\uffb3\025\uffb3\032\uffb3" +
    "\035\uffb3\037\uffb3\041\uffb3\042\uffb3\043\uffb3\045\uffb3\050" +
    "\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3" +
    "\067\uffb3\102\uffb3\105\uffb3\001\002\000\010\003\060\025" +
    "\064\030\371\001\002\000\064\003\uffb1\004\uffb1\005\uffb1" +
    "\006\uffb1\010\uffb1\017\uffb1\020\uffb1\025\uffb1\032\uffb1\035" +
    "\uffb1\037\uffb1\041\uffb1\042\uffb1\043\uffb1\045\uffb1\050\uffb1" +
    "\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1\067" +
    "\uffb1\102\uffb1\105\uffb1\001\002\000\002\001\002\000\020" +
    "\003\uffc1\025\uffc1\030\uffc1\037\uffc1\067\uffc1\102\uffc1\103" +
    "\uffc1\001\002\000\020\004\044\005\067\006\046\010\054" +
    "\017\052\020\055\103\uff7e\001\002\000\004\103\u0106\001" +
    "\002\000\004\104\u0107\001\002\000\042\004\044\005\067" +
    "\006\046\010\054\017\117\020\055\032\121\035\134\041" +
    "\107\042\122\043\115\045\113\050\123\051\110\055\126" +
    "\105\uff7a\001\002\000\004\105\u0109\001\002\000\044\003" +
    "\uff84\004\uff84\005\uff84\006\uff84\010\uff84\017\uff84\020\uff84" +
    "\025\uff84\037\uff84\052\uff84\053\uff84\054\uff84\055\uff84\056" +
    "\uff84\067\uff84\102\uff84\105\uff84\001\002\000\030\003\uffd7" +
    "\004\uffd7\005\uffd7\006\uffd7\010\uffd7\017\uffd7\020\uffd7\025" +
    "\uffd7\037\uffd7\067\uffd7\102\uffd7\001\002\000\012\024\u010c" +
    "\033\uffeb\034\uffeb\104\uffeb\001\002\000\004\017\u010f\001" +
    "\002\000\010\033\030\034\027\104\uffef\001\002\000\004" +
    "\104\uffee\001\002\000\012\024\u010c\033\uffeb\034\uffeb\104" +
    "\uffeb\001\002\000\010\033\uffec\034\uffec\104\uffec\001\002" +
    "\000\012\024\u010c\033\uffeb\034\uffeb\104\uffeb\001\002\000" +
    "\010\033\030\034\027\104\uffef\001\002\000\004\104\uffed" +
    "\001\002\000\004\031\uffea\001\002\000\004\031\uffe8\001" +
    "\002\000\040\003\uffe4\004\uffe4\005\uffe4\006\uffe4\010\uffe4" +
    "\017\uffe4\020\uffe4\025\uffe4\031\uffe4\037\uffe4\052\uffe4\053" +
    "\uffe4\054\uffe4\067\uffe4\102\uffe4\001\002\000\040\003\uffe2" +
    "\004\uffe2\005\uffe2\006\uffe2\010\uffe2\017\uffe2\020\uffe2\025" +
    "\uffe2\031\uffe2\037\uffe2\052\uffe2\053\uffe2\054\uffe2\067\uffe2" +
    "\102\uffe2\001\002\000\004\031\uffe6\001\002\000\004\031" +
    "\uffe9\001\002\000\004\002\001\001\002\000\010\003\060" +
    "\024\u011c\025\064\001\002\000\004\017\u0120\001\002\000" +
    "\016\023\005\052\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc" +
    "\001\002\000\016\023\ufffa\052\ufffa\053\ufffa\054\ufffa\055" +
    "\ufffa\056\ufffa\001\002\000\014\052\ufffe\053\ufffe\054\ufffe" +
    "\055\ufffe\056\ufffe\001\002\000\010\003\060\024\u011c\025" +
    "\064\001\002\000\016\023\ufffb\052\ufffb\053\ufffb\054\ufffb" +
    "\055\ufffb\056\ufffb\001\002\000\004\017\u0124\001\002\000" +
    "\004\017\ufff9\001\002\000\010\003\060\024\u0125\025\064" +
    "\001\002\000\006\017\u0129\065\u012a\001\002\000\016\023" +
    "\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6\001\002" +
    "\000\016\023\005\052\ufffc\053\ufffc\054\ufffc\055\ufffc\056" +
    "\ufffc\001\002\000\014\052\ufffd\053\ufffd\054\ufffd\055\ufffd" +
    "\056\ufffd\001\002\000\010\003\060\024\u0125\025\064\001" +
    "\002\000\006\003\060\025\064\001\002\000\016\023\ufff7" +
    "\052\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7\001\002\000" +
    "\016\023\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\056\ufff4" +
    "\001\002\000\016\023\ufff5\052\ufff5\053\ufff5\054\ufff5\055" +
    "\ufff5\056\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012b\000\010\002\006\003\007\004\003\001\001\000" +
    "\002\001\001\000\004\104\u0121\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\017\015\010\016\014\017" +
    "\016\001\001\000\006\012\u0118\016\u0117\001\001\000\002" +
    "\001\001\000\004\052\u0115\001\001\000\002\001\001\000" +
    "\006\011\u0113\015\u0114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\053\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\124\025\001\001\000\004\022\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\014\035" +
    "\015\032\016\034\025\033\042\036\001\001\000\006\016" +
    "\034\042\u0109\001\001\000\034\005\064\020\041\021\047" +
    "\024\055\030\061\031\046\032\040\033\056\034\050\035" +
    "\062\040\060\044\052\135\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\127\u0101\001\001\000\016\026\146\027\142\037\367\117" +
    "\137\122\145\123\152\001\001\000\004\131\365\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\134\363\001\001\000\004\126\361\001\001\000\004" +
    "\132\357\001\001\000\004\133\355\001\001\000\004\125" +
    "\353\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\005\064\021\352\024\055\044\052\135\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\136\071\001\001\000\004\130\067\001" +
    "\001\000\004\051\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\137\073\001\001\000\002\001\001\000" +
    "\022\030\061\031\046\032\040\033\056\034\050\035\062" +
    "\040\076\045\075\001\001\000\002\001\001\000\004\140" +
    "\077\001\001\000\004\046\101\001\001\000\022\030\061" +
    "\031\046\032\040\033\056\034\050\035\062\040\076\045" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\030\130\031\113\032\105\033\124\034" +
    "\115\060\131\061\123\062\126\065\110\070\117\073\127" +
    "\074\132\075\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\026\146\027\142\037\344\117\137\122\145" +
    "\123\152\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\064\265\076\261\001\001\000\002\001" +
    "\001\000\004\064\246\001\001\000\004\050\235\001\001" +
    "\000\004\005\233\001\001\000\034\030\130\031\113\032" +
    "\105\033\124\034\115\060\131\061\123\062\232\065\110" +
    "\070\117\073\127\074\132\075\111\001\001\000\002\001" +
    "\001\000\016\030\130\031\113\032\105\033\124\034\115" +
    "\070\231\001\001\000\002\001\001\000\006\005\064\024" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\026\146\027\142\037\154\117\137" +
    "\122\145\123\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\026\146\027\142\037\211\115\206\117\137" +
    "\122\145\123\152\001\001\000\010\043\166\106\172\116" +
    "\171\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\112\156\001\001\000\016\026\146\027\142\037" +
    "\160\117\137\122\145\123\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\112\161\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\026\146\027\142\037\203\117\137" +
    "\122\145\123\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\057\214" +
    "\106\172\116\215\001\001\000\002\001\001\000\016\026" +
    "\146\027\142\037\222\117\137\122\145\123\152\001\001" +
    "\000\016\026\146\027\142\037\217\117\137\122\145\123" +
    "\152\001\001\000\002\001\001\000\016\026\146\027\142" +
    "\037\221\117\137\122\145\123\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\026\146\027\142\037\224" +
    "\117\137\122\145\123\152\001\001\000\002\001\001\000" +
    "\004\047\226\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\030\130\031\113\032\105\033\124" +
    "\034\115\060\131\061\123\062\243\065\110\070\117\073" +
    "\127\074\132\075\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\026\146\027\142\037\240\117\137\122" +
    "\145\123\152\001\001\000\002\001\001\000\004\005\242" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\064\252" +
    "\067\250\001\001\000\002\001\001\000\020\026\146\027" +
    "\142\037\255\071\253\117\137\122\145\123\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\112\256\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\064\271\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\026\146\027\142\037\270\117\137\122\145" +
    "\123\152\001\001\000\016\026\146\027\142\037\267\117" +
    "\137\122\145\123\152\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\026\146\027\142\037\273\117\137\122\145" +
    "\123\152\001\001\000\002\001\001\000\004\050\275\001" +
    "\001\000\004\102\277\001\001\000\004\103\302\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\030\130\031" +
    "\113\032\105\033\124\034\115\060\131\061\123\062\313" +
    "\065\110\070\117\073\127\074\132\075\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\026\146\027\142" +
    "\037\305\117\137\122\145\123\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\030\130\031\113\032\105" +
    "\033\124\034\115\060\131\061\123\062\310\065\110\070" +
    "\117\073\127\074\132\075\111\001\001\000\002\001\001" +
    "\000\004\102\312\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\026\146\027\142\037\316" +
    "\117\137\122\145\123\152\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\107\322\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\026\146\027\142\036\324\037" +
    "\325\117\137\122\145\123\152\001\001\000\002\001\001" +
    "\000\004\041\327\001\001\000\020\026\146\027\142\036" +
    "\330\037\325\117\137\122\145\123\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\030\130\031\113\032" +
    "\105\033\124\034\115\060\335\065\333\070\117\073\127" +
    "\074\336\075\111\110\332\111\334\001\001\000\004\107" +
    "\340\001\001\000\002\001\001\000\034\030\130\031\113" +
    "\032\105\033\124\034\115\060\335\065\333\070\117\073" +
    "\127\074\336\075\111\110\337\111\334\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\030\130\031\113\032\105" +
    "\033\124\034\115\060\335\065\333\070\117\073\127\074" +
    "\336\075\111\110\343\111\334\001\001\000\002\001\001" +
    "\000\004\005\345\001\001\000\002\001\001\000\016\026" +
    "\146\027\142\037\347\117\137\122\145\123\152\001\001" +
    "\000\002\001\001\000\004\050\351\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\014\354\015\032\016\034" +
    "\025\033\042\036\001\001\000\002\001\001\000\004\051" +
    "\356\001\001\000\002\001\001\000\004\051\360\001\001" +
    "\000\002\001\001\000\014\014\362\015\032\016\034\025" +
    "\033\042\036\001\001\000\002\001\001\000\004\051\364" +
    "\001\001\000\002\001\001\000\004\051\366\001\001\000" +
    "\002\001\001\000\006\005\372\120\371\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\375\121\376\001\001\000\016\026\146\027\142\037\377" +
    "\117\137\122\145\123\152\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\372\120\u0100\001\001\000\002" +
    "\001\001\000\004\051\u0102\001\001\000\002\001\001\000" +
    "\022\030\061\031\046\032\040\033\056\034\050\035\062" +
    "\040\076\045\u0104\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\030\130\031\113\032\105\033\124\034\115" +
    "\060\131\061\123\062\u0107\065\110\070\117\073\127\074" +
    "\132\075\111\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\u010c\001\001\000\002\001" +
    "\001\000\004\022\u010d\001\001\000\002\001\001\000\004" +
    "\023\u010f\001\001\000\002\001\001\000\004\023\u0111\001" +
    "\001\000\004\022\u0112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\u011d\010\u011c\001\001\000\002\001\001\000" +
    "\004\004\u011e\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\u011d\010\u0120\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\u0125\006\u0126" +
    "\001\001\000\004\007\u012a\001\001\000\002\001\001\000" +
    "\004\004\u0127\001\001\000\002\001\001\000\006\005\u0125" +
    "\006\u012c\001\001\000\004\005\u012b\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        private classObject classFinalSystax ;
        private String typeDate = null;
        private String typeMethods = null;


        // variables auxiliares
        private Symbol s;
        private String nameClass;
        private String nameVariable;
        private String nameMethods;

        //listas para guardar
        private List<metodoObject> ListMethods =new ArrayList<>();
        private List<VariableObject> ListVariable= new ArrayList<>();
        private List<VariableObject> listParameters= new ArrayList<>();

        //Errores
        private int cantidadErrores= 0;

    //parser
        parser(Lexico lexico){
            super(lexico);
        }

// errores
        public void syntax_error(Symbol cur_token) {
            cantidadErrores++;

            NewJFrame.jTextArea1.append("\n"+cantidadErrores+" - Clase<"+nameClass+"> en simbolo<" + sym.terminalNames[cur_token.sym]+String.format(">posicion: <%d>, <%d>", (cur_token.left+1), (cur_token.right+1)));
        }


     
        public Symbol getSymbol(){
            return this.s;
        }




    //metodos
    public String getNameClass(){
        return this.nameClass;
    }
        public int getcantidadErrores(){
            return this.cantidadErrores;
        }
        public List<VariableObject> getListVariable() {
        return ListVariable;
        }
        public List<metodoObject> getListMethods() {
        return ListMethods;
        }
        public classObject getClassSyntax(){
            return this.classFinalSystax;
        }
        // metodos
       private void addVariable (int aleft,int aright){
            ListVariable.add(new VariableObject(typeDate,aright+1,aleft+1,nameVariable));
            typeDate=null;
            nameVariable = "";
        }
        private void addMethods (int aleft,int aright){
            if(typeMethods ==null){
                typeMethods = "Constructor";
            }
            ListMethods.add(new metodoObject(typeMethods, listParameters, (aright+1), (aleft+1), nameMethods));
            listParameters =  new ArrayList<>();
            typeMethods=null;
            nameVariable = "";
        }
        private void addMethodsParameters (int aleft,int aright){
      
            listParameters.add(new VariableObject(typeDate,aright+1,aleft+1,nameVariable));
            typeDate=null;
            nameVariable = "";
        }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= inicioSintaxis clase 
            {
              Object RESULT =null;
		classFinalSystax = new classObject(nameClass, ListMethods, ListVariable, null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicioSintaxis ::= importSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioSintaxis",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicioSintaxis ::= PACKAGE ID pc importSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioSintaxis",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // importSintaxis ::= IMPORT staticImport ID sp importSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("importSintaxis",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // importSintaxis ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("importSintaxis",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // pc ::= PUNTO ID pc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pc",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // pc ::= puntoComaSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pc",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // staticImport ::= STATIC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("staticImport",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // staticImport ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("staticImport",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sp ::= PUNTO sintaxisMayorImportaciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sp ::= puntoComaSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sintaxisMayorImportaciones ::= ID sp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sintaxisMayorImportaciones",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sintaxisMayorImportaciones ::= MULTIPLICACION puntoComaSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sintaxisMayorImportaciones",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // puntoComaSintaxis ::= PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("puntoComaSintaxis",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // puntoComaSintaxis ::= error 
            {
              Object RESULT =null;
		NewJFrame.jTextArea1.append("\n"+cantidadErrores+"Error en clase: "+nameClass+" lexema:" + sym.terminalNames[cur_token.sym]);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("puntoComaSintaxis",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$0 ::= 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
nameClass = identificador.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // clase ::= v CLASS ID NT$0 herenciaSintaxis LLAVESABIERTO internoClase LLAVESCERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // herenciaSintaxis ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("herenciaSintaxis",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // herenciaSintaxis ::= EXNTENDS ID secuenciIDHRE herenciaSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("herenciaSintaxis",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // herenciaSintaxis ::= IMPLEMENTS ID secuenciIDHRE herenciaSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("herenciaSintaxis",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // secuenciIDHRE ::= PUNTO ID secuenciIDHRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("secuenciIDHRE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // secuenciIDHRE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("secuenciIDHRE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // v ::= staticFinalSintaxisEspecifica vfactorizadoStatic 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("v",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // v ::= visibilidadTerminal vfactorizadoVC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("v",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // vfactorizadoStatic ::= visibilidadTerminal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vfactorizadoStatic",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // vfactorizadoStatic ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vfactorizadoStatic",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // vfactorizadoVC ::= staticFinalSintaxisEspecifica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vfactorizadoVC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // vfactorizadoVC ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vfactorizadoVC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // staticFinalSintaxisEspecifica ::= STATIC staticOpcionInclusion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("staticFinalSintaxisEspecifica",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // staticFinalSintaxisEspecifica ::= FINAL finalOpcionInclusion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("staticFinalSintaxisEspecifica",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // staticOpcionInclusion ::= FINAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("staticOpcionInclusion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // staticOpcionInclusion ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("staticOpcionInclusion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // finalOpcionInclusion ::= STATIC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("finalOpcionInclusion",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // finalOpcionInclusion ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("finalOpcionInclusion",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // visibilidadTerminal ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("visibilidadTerminal",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // visibilidadTerminal ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("visibilidadTerminal",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // visibilidadTerminal ::= PROTECTED 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("visibilidadTerminal",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // internoClase ::= visionEspecificaDeClases internoClaseFa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("internoClase",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // internoClase ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("internoClase",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // visualizacionClaseFinal ::= staticFinalSintaxisEspecifica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("visualizacionClaseFinal",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // visualizacionClaseFinal ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("visualizacionClaseFinal",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // visionEspecificaDeClases ::= visibilidadTerminal visualizacionClaseFinal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("visionEspecificaDeClases",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // visionEspecificaDeClases ::= visualizacionClaseFinal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("visionEspecificaDeClases",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // internoClaseFa ::= variableID ingresoOpcionesClases 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("internoClaseFa",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // internoClaseFa ::= ingresoOpcionesClases 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("internoClaseFa",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$1 ::= 
            {
              Object RESULT =null;
int izquierda = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
    int derecha = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
    addVariable(izquierda,derecha);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",83, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ingresoOpcionesClases ::= ingresoNuevasVariables NT$1 internoClase 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ingresoOpcionesClases",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$2 ::= 
            {
              Object RESULT =null;
int izquierda = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
    int derecha = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
    addMethods(izquierda,derecha);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",84, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ingresoOpcionesClases ::= metodoSintaxis NT$2 internoClase 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ingresoOpcionesClases",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipoDatosSintaxis ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDatosSintaxis",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipoDatosSintaxis ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDatosSintaxis",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipoDatosSintaxis ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDatosSintaxis",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipoDatosSintaxis ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDatosSintaxis",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipoDatosSintaxis ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDatosSintaxis",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tipoDatosSintaxis ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDatosSintaxis",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tipoDatosSintaxis ::= error 
            {
              Object RESULT =null;
		Frontend.NewJFrame.jTextArea1.append("\n"+cantidadErrores+"  Error en clase: "+nameClass+" lexema:" + sym.terminalNames[cur_token.sym]);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDatosSintaxis",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // variableID ::= DoubleTipoDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableID",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // variableID ::= CharTipoDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableID",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // variableID ::= BooleanTipoDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableID",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // variableID ::= StringTipoDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableID",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // variableID ::= ObjectTipoDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableID",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // variableID ::= intTipoDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableID",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$3 ::= 
            {
              Object RESULT =null;
typeDate = "int";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",85, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // intTipoDato ::= INT NT$3 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("intTipoDato",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$4 ::= 
            {
              Object RESULT =null;
typeDate = "double";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DoubleTipoDato ::= DOUBLE NT$4 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DoubleTipoDato",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$5 ::= 
            {
              Object RESULT =null;
typeDate = "char";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",87, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CharTipoDato ::= CHAR NT$5 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CharTipoDato",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$6 ::= 
            {
              Object RESULT =null;
typeDate = "boolean";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",88, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // BooleanTipoDato ::= BOOLEAN NT$6 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BooleanTipoDato",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$7 ::= 
            {
              Object RESULT =null;
typeDate = "String";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // StringTipoDato ::= STRING NT$7 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StringTipoDato",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$8 ::= 
            {
              Object RESULT =null;
typeDate = "Object";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",90, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ObjectTipoDato ::= ID NT$8 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ObjectTipoDato",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ingresoNuevasVariables ::= IGUAL opcionesDatosIngreso variablesConsecutivas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ingresoNuevasVariables",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ingresoNuevasVariables ::= puntoComaSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ingresoNuevasVariables",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // opcionesDatosIngreso ::= tDAtosFacto tDatosPrima 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesDatosIngreso",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // variablesConsecutivas ::= COMA ID variablesConsecutivasFactores 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesConsecutivas",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // variablesConsecutivas ::= puntoComaSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesConsecutivas",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // variablesConsecutivasFactores ::= IGUAL opcionesDatosIngreso variablesConsecutivas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesConsecutivasFactores",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // variablesConsecutivasFactores ::= puntoComaSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesConsecutivasFactores",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // tDAtosFacto ::= charSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tDAtosFacto",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // tDAtosFacto ::= funcionesBooleanas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tDAtosFacto",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // tDAtosFacto ::= expresionesEspecificasElementales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tDAtosFacto",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // tDAtosFacto ::= Casting 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tDAtosFacto",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // tDAtosFacto ::= error 
            {
              Object RESULT =null;
		NewJFrame.jTextArea1.append("\n"+cantidadErrores+"  Error en clase: "+nameClass+" lexema:" + sym.terminalNames[cur_token.sym]);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tDAtosFacto",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // funcionesBooleanas ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionesBooleanas",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // funcionesBooleanas ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionesBooleanas",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresionesEspecificasElementales ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesEspecificasElementales",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresionesEspecificasElementales ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesEspecificasElementales",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresionesEspecificasElementales ::= TEXT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesEspecificasElementales",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // tDatosPrima ::= operadoresTipos opcionesDatosIngreso 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tDatosPrima",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // tDatosPrima ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tDatosPrima",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Casting ::= PARENTESISABIERTO opcionesDatosIngreso PARENTESISCERRADO tDatosDespues 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Casting",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Casting ::= PARENTESISABIERTO typeVaribleSimple PARENTESISCERRADO opcionesDatosIngreso 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Casting",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // tDatosDespues ::= operadoresTipos opcionesDatosIngreso 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tDatosDespues",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // tDatosDespues ::= INTERO opcionesDatosIngreso DOBLE_PUNTO opcionesDatosIngreso 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tDatosDespues",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // tDatosDespues ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tDatosDespues",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // typeVaribleSimple ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVaribleSimple",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // typeVaribleSimple ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVaribleSimple",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // typeVaribleSimple ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVaribleSimple",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // typeVaribleSimple ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVaribleSimple",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // typeVaribleSimple ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVaribleSimple",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operadoresTipos ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadoresTipos",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operadoresTipos ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadoresTipos",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operadoresTipos ::= DOUBLE_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadoresTipos",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // operadoresTipos ::= MENOR_Q_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadoresTipos",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // operadoresTipos ::= MAYOR_Q_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadoresTipos",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // operadoresTipos ::= MENOR_Q 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadoresTipos",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // operadoresTipos ::= MAYOR_Q 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadoresTipos",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // operadoresTipos ::= ADMIRACION_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadoresTipos",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // operadoresTipos ::= operadoresAritmeticos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadoresTipos",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // operadoresAritmeticos ::= SUMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadoresAritmeticos",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // operadoresAritmeticos ::= RESTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadoresAritmeticos",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // operadoresAritmeticos ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadoresAritmeticos",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // operadoresAritmeticos ::= DIVISION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadoresAritmeticos",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // charSintaxis ::= SIMPLE_COMILLA CARACTER SIMPLE_COMILLA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("charSintaxis",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // newParentesisOCochtes ::= parametrosSintaxisGeneral 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("newParentesisOCochtes",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // parametrosSintaxisGeneral ::= PARENTESISABIERTO parametrosConsecutivosOBjetos PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosSintaxisGeneral",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // parametrosSintaxisGeneral ::= PARENTESISABIERTO PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosSintaxisGeneral",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // parametrosConsecutivosOBjetos ::= opcionesDatosIngreso objectInst 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosConsecutivosOBjetos",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // objectInst ::= COMA parametrosConsecutivosOBjetos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("objectInst",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // objectInst ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("objectInst",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$9 ::= 
            {
              Object RESULT =null;
nameMethods=nameVariable;typeMethods = typeDate;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",91, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // metodoSintaxis ::= NT$9 PARENTESISABIERTO pMetodoS PARENTESISCERRADO LLAVESABIERTO localMetodo LLAVESCERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodoSintaxis",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NT$10 ::= 
            {
              Object RESULT =null;
typeMethods = "void";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",92, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
nameMethods = a.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",93, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // metodoSintaxis ::= VOID NT$10 ID NT$11 PARENTESISABIERTO pMetodoS PARENTESISCERRADO LLAVESABIERTO localMetodo LLAVESCERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodoSintaxis",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NT$12 ::= 
            {
              Object RESULT =null;
int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
            int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
            addMethodsParameters(aleft,aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",94, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // pMetodoS ::= variableID NT$12 pMetodoSP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pMetodoS",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // pMetodoS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pMetodoS",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // pMetodoSP ::= COMA pMetodoS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pMetodoSP",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // pMetodoSP ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pMetodoSP",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // localMetodo ::= local localMetodo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("localMetodo",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // localMetodo ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("localMetodo",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // local ::= variableLocal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // local ::= SentenciasControlSintaxisGeneral 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // local ::= salidasOpciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // variableLocal ::= variableLocalFinal ingresoNuevasVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableLocal",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // variableLocalFinal ::= FINAL variableIDLocal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableLocalFinal",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // variableLocalFinal ::= variableIDLocal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableLocalFinal",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // variableLocalFinal ::= usarVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableLocalFinal",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // variableLocalFinal ::= salidasOpciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableLocalFinal",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // variableIDLocal ::= DoubleTipoDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableIDLocal",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // variableIDLocal ::= CharTipoDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableIDLocal",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // variableIDLocal ::= BooleanTipoDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableIDLocal",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // variableIDLocal ::= StringTipoDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableIDLocal",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // variableIDLocal ::= intTipoDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableIDLocal",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // usarVariable ::= ID OperadoresIncrementales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("usarVariable",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // usarVariable ::= THIS loclaMetodFacto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("usarVariable",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // usarVariable ::= SUPER soloId PARENTESISABIERTO opcionesDatosIngreso secuenciDatos PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("usarVariable",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // soloId ::= PUNTO ID soloId 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("soloId",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // soloId ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("soloId",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // secuenciDatos ::= COMA opcionesDatosIngreso secuenciDatos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("secuenciDatos",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // secuenciDatos ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("secuenciDatos",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // OperadoresIncrementales ::= CREMENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadoresIncrementales",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // OperadoresIncrementales ::= SUMA_IGUAL opcionesDatosIngreso 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadoresIncrementales",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // OperadoresIncrementales ::= INCREMENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadoresIncrementales",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // OperadoresIncrementales ::= RESTA_IGUAL opcionesDatosIngreso 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadoresIncrementales",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // OperadoresIncrementales ::= ID loclaMetodFacto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadoresIncrementales",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // OperadoresIncrementales ::= loclaMetodFacto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadoresIncrementales",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // loclaMetodFacto ::= PUNTO ID variableObjectUsarCrear 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loclaMetodFacto",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // loclaMetodFacto ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loclaMetodFacto",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // variableObjectUsarCrear ::= PARENTESISABIERTO variableSet 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableObjectUsarCrear",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // variableObjectUsarCrear ::= loclaMetodFacto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableObjectUsarCrear",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // variableSet ::= opcionesDatosIngreso secuenciDatos PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableSet",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // variableSet ::= PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableSet",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // salidasOpciones ::= BREAK puntoComaSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("salidasOpciones",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // salidasOpciones ::= RETURN opcionesDatosIngreso puntoComaSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("salidasOpciones",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // SentenciasControlSintaxisGeneral ::= WHILE PARENTESISABIERTO opcionesDatosIngreso PARENTESISCERRADO realicarSentenciasControlSintaxisGeneral 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciasControlSintaxisGeneral",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // SentenciasControlSintaxisGeneral ::= DO realicarSentenciasControlSintaxisGeneral WHILE PARENTESISABIERTO opcionesDatosIngreso PARENTESISCERRADO puntoComaSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciasControlSintaxisGeneral",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // SentenciasControlSintaxisGeneral ::= IF PARENTESISABIERTO opcionesDatosIngreso PARENTESISCERRADO realicarSentenciasControlSintaxisGeneral sentenciaElse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciasControlSintaxisGeneral",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // SentenciasControlSintaxisGeneral ::= SWITCH PARENTESISABIERTO opcionesDatosIngreso PARENTESISCERRADO LLAVESABIERTO SwitchSintaxisGeneral LLAVESCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciasControlSintaxisGeneral",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // realicarSentenciasControlSintaxisGeneral ::= LLAVESABIERTO localMetodo LLAVESCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("realicarSentenciasControlSintaxisGeneral",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // SwitchSintaxisGeneral ::= CASE parametrosConsecutivosOBjetos DOBLE_PUNTO SwitchEspecificoSintaxis SwitchSintaxisGeneral 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SwitchSintaxisGeneral",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // SwitchSintaxisGeneral ::= DEFAULT DOBLE_PUNTO SwitchEspecificoSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SwitchSintaxisGeneral",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // SwitchSintaxisGeneral ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SwitchSintaxisGeneral",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // SwitchEspecificoSintaxis ::= declaracionesSwitch SwitchEspecificoSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SwitchEspecificoSintaxis",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // SwitchEspecificoSintaxis ::= salidasOpciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SwitchEspecificoSintaxis",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // declaracionesSwitch ::= variableLocal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesSwitch",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // declaracionesSwitch ::= SentenciasControlSintaxisGeneral 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesSwitch",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // sentenciaElse ::= ELSE sentenciaElseFac 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaElse",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // sentenciaElse ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaElse",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // sentenciaElseFac ::= LLAVESABIERTO localMetodo LLAVESCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaElseFac",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // sentenciaElseFac ::= IF PARENTESISABIERTO opcionesDatosIngreso PARENTESISCERRADO LLAVESABIERTO localMetodo LLAVESCERRADO sentenciaElse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaElseFac",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // sentenciaElseFac ::= error 
            {
              Object RESULT =null;
		NewJFrame.jTextArea1.append("\n"+cantidadErrores+"  Error en clase: "+nameClass+" lexema:" + sym.terminalNames[cur_token.sym]);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaElseFac",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
