
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package AnalizadoresLex_Sin;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.Symbol;
import Frontend.*;
import Objects.tipoDatos;
import Objects.metodoObject;
import Objects.VariableObject;
import Objects.classObject;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\352\000\002\002\004\000\002\002\004\000\002\003" +
    "\003\000\002\003\006\000\002\004\007\000\002\004\002" +
    "\000\002\010\005\000\002\010\003\000\002\107\003\000" +
    "\002\107\002\000\002\006\004\000\002\006\003\000\002" +
    "\007\004\000\002\007\004\000\002\005\003\000\002\005" +
    "\003\000\002\131\002\000\002\013\012\000\002\022\002" +
    "\000\002\022\006\000\002\022\006\000\002\023\005\000" +
    "\002\023\002\000\002\017\004\000\002\017\004\000\002" +
    "\011\003\000\002\011\002\000\002\012\003\000\002\012" +
    "\002\000\002\016\004\000\002\016\004\000\002\052\003" +
    "\000\002\052\002\000\002\053\003\000\002\053\002\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\014\004\000\002\014\002\000\002\042\003\000\002\042" +
    "\002\000\002\025\004\000\002\025\003\000\002\020\004" +
    "\000\002\020\003\000\002\132\002\000\002\021\005\000" +
    "\002\133\002\000\002\021\005\000\002\116\003\000\002" +
    "\116\003\000\002\116\003\000\002\116\003\000\002\116" +
    "\003\000\002\116\003\000\002\116\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\134\002\000\002" +
    "\030\005\000\002\135\002\000\002\031\005\000\002\136" +
    "\002\000\002\032\005\000\002\137\002\000\002\033\005" +
    "\000\002\140\002\000\002\034\005\000\002\141\002\000" +
    "\002\035\005\000\002\051\004\000\002\142\002\000\002" +
    "\051\006\000\002\067\004\000\002\067\002\000\002\024" +
    "\005\000\002\024\003\000\002\037\004\000\002\125\005" +
    "\000\002\125\003\000\002\126\005\000\002\126\003\000" +
    "\002\027\003\000\002\027\004\000\002\027\005\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\004\000\002\027\003\000\002\127\003" +
    "\000\002\127\003\000\002\130\003\000\002\130\003\000" +
    "\002\130\003\000\002\043\004\000\002\043\002\000\002" +
    "\124\006\000\002\124\006\000\002\060\004\000\002\060" +
    "\006\000\002\060\002\000\002\120\003\000\002\120\003" +
    "\000\002\120\003\000\002\120\003\000\002\120\003\000" +
    "\002\121\003\000\002\121\003\000\002\121\003\000\002" +
    "\121\003\000\002\121\003\000\002\121\003\000\002\121" +
    "\003\000\002\121\003\000\002\121\003\000\002\121\003" +
    "\000\002\121\003\000\002\111\003\000\002\111\003\000" +
    "\002\111\003\000\002\111\003\000\002\026\005\000\002" +
    "\117\003\000\002\117\006\000\002\123\003\000\002\123" +
    "\002\000\002\122\004\000\002\122\002\000\002\055\005" +
    "\000\002\055\004\000\002\036\004\000\002\041\004\000" +
    "\002\041\002\000\002\056\005\000\002\056\003\000\002" +
    "\064\005\000\002\064\002\000\002\073\004\000\002\054" +
    "\004\000\002\057\004\000\002\057\006\000\002\057\004" +
    "\000\002\057\002\000\002\110\004\000\002\110\003\000" +
    "\002\143\002\000\002\044\011\000\002\144\002\000\002" +
    "\145\002\000\002\044\014\000\002\146\002\000\002\044" +
    "\012\000\002\147\002\000\002\045\005\000\002\045\002" +
    "\000\002\046\004\000\002\046\002\000\002\063\004\000" +
    "\002\063\002\000\002\062\003\000\002\062\003\000\002" +
    "\062\003\000\002\061\004\000\002\074\004\000\002\074" +
    "\003\000\002\074\003\000\002\074\003\000\002\071\003" +
    "\000\002\071\003\000\002\071\003\000\002\071\003\000" +
    "\002\071\003\000\002\076\004\000\002\076\004\000\002" +
    "\076\010\000\002\047\005\000\002\047\002\000\002\115" +
    "\005\000\002\115\002\000\002\077\003\000\002\077\004" +
    "\000\002\077\003\000\002\077\004\000\002\077\004\000" +
    "\002\077\003\000\002\077\006\000\002\077\004\000\002" +
    "\065\005\000\002\065\002\000\002\070\004\000\002\070" +
    "\003\000\002\072\005\000\002\072\003\000\002\066\004" +
    "\000\002\066\005\000\002\075\007\000\002\075\011\000" +
    "\002\075\010\000\002\075\011\000\002\075\006\000\002" +
    "\050\005\000\002\112\007\000\002\112\005\000\002\112" +
    "\002\000\002\113\004\000\002\113\003\000\002\114\003" +
    "\000\002\114\003\000\002\101\004\000\002\101\007\000" +
    "\002\102\004\000\002\102\004\000\002\100\003\000\002" +
    "\100\003\000\002\100\003\000\002\100\003\000\002\100" +
    "\003\000\002\100\003\000\002\103\004\000\002\103\005" +
    "\000\002\104\004\000\002\104\003\000\002\105\004\000" +
    "\002\105\002\000\002\106\005\000\002\106\012\000\002" +
    "\106\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0192\000\020\015\006\016\005\045\ufffc\046\ufffc\047" +
    "\ufffc\050\ufffc\051\ufffc\001\002\000\014\045\uffff\046\uffff" +
    "\047\uffff\050\uffff\051\uffff\001\002\000\006\051\u018a\054" +
    "\ufff8\001\002\000\004\054\u0182\001\002\000\004\002\u0181" +
    "\001\002\000\014\045\016\046\012\047\014\050\021\051" +
    "\013\001\002\000\010\024\uffe5\050\021\051\013\001\002" +
    "\000\036\003\uffde\004\uffde\005\uffde\006\uffde\010\uffde\020" +
    "\uffde\024\uffde\032\uffde\050\uffde\051\uffde\054\uffde\055\uffde" +
    "\067\uffde\102\uffde\001\002\000\042\003\uffe1\004\uffe1\005" +
    "\uffe1\006\uffe1\010\uffe1\020\uffe1\024\uffe1\032\uffe1\045\uffe1" +
    "\046\uffe1\047\uffe1\050\u017e\054\uffe1\055\uffe1\067\uffe1\102" +
    "\uffe1\001\002\000\036\003\uffdc\004\uffdc\005\uffdc\006\uffdc" +
    "\010\uffdc\020\uffdc\024\uffdc\032\uffdc\050\uffdc\051\uffdc\054" +
    "\uffdc\055\uffdc\067\uffdc\102\uffdc\001\002\000\012\024\uffe7" +
    "\045\016\046\012\047\014\001\002\000\036\003\uffdd\004" +
    "\uffdd\005\uffdd\006\uffdd\010\uffdd\020\uffdd\024\uffdd\032\uffdd" +
    "\050\uffdd\051\uffdd\054\uffdd\055\uffdd\067\uffdd\102\uffdd\001" +
    "\002\000\004\024\024\001\002\000\004\002\000\001\002" +
    "\000\042\003\uffdf\004\uffdf\005\uffdf\006\uffdf\010\uffdf\020" +
    "\uffdf\024\uffdf\032\uffdf\045\uffdf\046\uffdf\047\uffdf\051\023" +
    "\054\uffdf\055\uffdf\067\uffdf\102\uffdf\001\002\000\040\003" +
    "\uffe3\004\uffe3\005\uffe3\006\uffe3\010\uffe3\020\uffe3\024\uffe3" +
    "\032\uffe3\045\uffe3\046\uffe3\047\uffe3\054\uffe3\055\uffe3\067" +
    "\uffe3\102\uffe3\001\002\000\040\003\uffe0\004\uffe0\005\uffe0" +
    "\006\uffe0\010\uffe0\020\uffe0\024\uffe0\032\uffe0\045\uffe0\046" +
    "\uffe0\047\uffe0\054\uffe0\055\uffe0\067\uffe0\102\uffe0\001\002" +
    "\000\004\054\025\001\002\000\010\026\ufff1\027\ufff1\104" +
    "\ufff1\001\002\000\010\026\030\027\027\104\uffef\001\002" +
    "\000\004\054\u0178\001\002\000\004\054\u0172\001\002\000" +
    "\004\104\032\001\002\000\044\003\uffd8\004\uffd8\005\uffd8" +
    "\006\uffd8\010\uffd8\020\uffd8\032\uffd8\045\016\046\012\047" +
    "\014\050\021\051\013\054\uffd8\055\uffd8\067\uffd8\102\uffd8" +
    "\105\uffda\001\002\000\034\003\uffd8\004\uffd8\005\uffd8\006" +
    "\uffd8\010\uffd8\020\uffd8\032\uffd8\050\021\051\013\054\uffd8" +
    "\055\uffd8\067\uffd8\102\uffd8\001\002\000\030\003\060\004" +
    "\043\005\067\006\045\010\054\020\064\032\066\054\052" +
    "\055\055\067\044\102\uff69\001\002\000\030\003\uffd9\004" +
    "\uffd9\005\uffd9\006\uffd9\010\uffd9\020\uffd9\032\uffd9\054\uffd9" +
    "\055\uffd9\067\uffd9\102\uffd9\001\002\000\004\105\040\001" +
    "\002\000\030\003\uffd6\004\uffd6\005\uffd6\006\uffd6\010\uffd6" +
    "\020\uffd6\032\uffd6\054\uffd6\055\uffd6\067\uffd6\102\uffd6\001" +
    "\002\000\004\002\ufff0\001\002\000\022\003\uffc7\020\uffc7" +
    "\023\uffc7\032\uffc7\054\uffc7\067\uffc7\102\uffc7\103\uffc7\001" +
    "\002\000\004\105\uffdb\001\002\000\006\054\uffc2\106\uffc2" +
    "\001\002\000\032\003\211\011\203\012\210\013\207\021" +
    "\217\031\213\052\177\053\215\054\205\056\214\102\206" +
    "\104\201\001\002\000\006\054\uffbe\106\uffbe\001\002\000" +
    "\004\102\u015d\001\002\000\022\003\uffc8\020\uffc8\023\uffc8" +
    "\032\uffc8\054\uffc8\067\uffc8\102\uffc8\103\uffc8\001\002\000" +
    "\004\105\uffd4\001\002\000\022\003\uffc5\020\uffc5\023\uffc5" +
    "\032\uffc5\054\uffc5\067\uffc5\102\uffc5\103\uffc5\001\002\000" +
    "\010\054\uffb8\102\uff64\106\uffb8\001\002\000\044\003\uffd1" +
    "\004\uffd1\005\uffd1\006\uffd1\010\uffd1\020\uffd1\032\uffd1\045" +
    "\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\054\uffd1\055\uffd1" +
    "\067\uffd1\102\uffd1\105\uffd1\001\002\000\006\054\uffbc\106" +
    "\uffbc\001\002\000\006\054\uffba\106\uffba\001\002\000\044" +
    "\003\uffd3\004\uffd3\005\uffd3\006\uffd3\010\uffd3\020\uffd3\032" +
    "\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\054\uffd3" +
    "\055\uffd3\067\uffd3\102\uffd3\105\uffd3\001\002\000\022\003" +
    "\uffc6\020\uffc6\023\uffc6\032\uffc6\054\uffc6\067\uffc6\102\uffc6" +
    "\103\uffc6\001\002\000\120\003\ufff2\004\ufff2\005\ufff2\006" +
    "\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\016\ufff2\020\ufff2" +
    "\021\ufff2\025\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034" +
    "\ufff2\035\ufff2\036\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2" +
    "\044\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2\051\ufff2\052" +
    "\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2\067\ufff2\102\ufff2" +
    "\103\ufff2\104\ufff2\105\ufff2\001\002\000\016\003\060\020" +
    "\064\032\066\054\u014c\067\044\102\uff69\001\002\000\022" +
    "\003\uffc3\020\uffc3\023\uffc3\032\uffc3\054\uffc3\067\uffc3\102" +
    "\uffc3\103\uffc3\001\002\000\022\003\uffc4\020\uffc4\023\uffc4" +
    "\032\uffc4\054\uffc4\067\uffc4\102\uffc4\103\uffc4\001\002\000" +
    "\120\003\ufff3\004\ufff3\005\ufff3\006\ufff3\010\ufff3\011\ufff3" +
    "\012\ufff3\013\ufff3\016\ufff3\020\ufff3\021\ufff3\025\ufff3\030" +
    "\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3" +
    "\040\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3\045\ufff3\046" +
    "\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3" +
    "\055\ufff3\056\ufff3\067\ufff3\102\ufff3\103\ufff3\104\ufff3\105" +
    "\ufff3\001\002\000\112\003\uffb0\004\uffb0\005\uffb0\006\uffb0" +
    "\010\uffb0\011\uffb0\012\uffb0\013\uffb0\020\uffb0\021\uffb0\025" +
    "\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0" +
    "\036\uffb0\040\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047" +
    "\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0" +
    "\056\uffb0\067\uffb0\102\uffb0\103\uffb0\104\uffb0\105\uffb0\001" +
    "\002\000\004\054\uff67\001\002\000\006\054\uffc0\106\uffc0" +
    "\001\002\000\006\054\072\106\073\001\002\000\022\003" +
    "\uffbf\020\uffbf\023\uffbf\032\uffbf\054\uffbf\067\uffbf\102\uffbf" +
    "\103\uffbf\001\002\000\024\003\uffb2\020\uffb2\023\uffb2\032" +
    "\uffb2\054\uffb2\067\uffb2\102\uffb2\103\uffb2\106\077\001\002" +
    "\000\004\107\074\001\002\000\006\054\uffb5\106\uffb5\001" +
    "\002\000\006\054\072\106\073\001\002\000\022\003\uffb4" +
    "\020\uffb4\023\uffb4\032\uffb4\054\uffb4\067\uffb4\102\uffb4\103" +
    "\uffb4\001\002\000\004\107\101\001\002\000\022\003\uffb6" +
    "\020\uffb6\023\uffb6\032\uffb6\054\uffb6\067\uffb6\102\uffb6\103" +
    "\uffb6\001\002\000\022\003\uffb3\020\uffb3\023\uffb3\032\uffb3" +
    "\054\uffb3\067\uffb3\102\uffb3\103\uffb3\001\002\000\004\054" +
    "\103\001\002\000\004\102\uff66\001\002\000\004\102\105" +
    "\001\002\000\020\004\043\005\067\006\045\010\054\054" +
    "\110\055\055\103\uff60\001\002\000\004\103\117\001\002" +
    "\000\006\023\uff62\103\uff62\001\002\000\006\054\uffb8\106" +
    "\uffb8\001\002\000\006\054\072\106\073\001\002\000\022" +
    "\003\uffb7\020\uffb7\023\uffb7\032\uffb7\054\uffb7\067\uffb7\102" +
    "\uffb7\103\uffb7\001\002\000\006\023\114\103\uff5e\001\002" +
    "\000\020\004\043\005\067\006\045\010\054\054\110\055" +
    "\055\103\uff60\001\002\000\004\103\uff61\001\002\000\004" +
    "\103\uff5f\001\002\000\004\104\120\001\002\000\044\004" +
    "\043\005\067\006\045\010\054\025\133\030\147\033\150" +
    "\034\122\035\135\036\131\040\126\043\136\044\123\050" +
    "\142\054\132\055\055\105\uff5c\001\002\000\010\003\uff52" +
    "\020\uff52\067\uff52\001\002\000\004\102\u0148\001\002\000" +
    "\032\003\211\011\203\012\210\013\207\021\217\031\213" +
    "\052\177\053\215\054\205\056\214\102\206\104\201\001" +
    "\002\000\052\003\uff54\004\uff59\005\uff59\006\uff59\010\uff59" +
    "\020\uff54\025\uff59\030\uff59\033\uff59\034\uff59\035\uff59\036" +
    "\uff59\040\uff59\043\uff59\044\uff59\050\uff59\054\uff59\055\uff59" +
    "\067\uff54\105\uff59\001\002\000\010\003\uff55\020\uff55\067" +
    "\uff55\001\002\000\004\102\u0133\001\002\000\010\003\uff53" +
    "\020\uff53\067\uff53\001\002\000\010\003\uff50\020\uff50\067" +
    "\uff50\001\002\000\004\102\u0120\001\002\000\032\003\uff3e" +
    "\017\u0105\020\uff3e\054\u0115\057\u0110\061\u0114\062\u0117\063" +
    "\u0116\067\uff3e\102\u0111\103\uff3e\106\u0113\001\002\000\014" +
    "\003\uff3e\017\u0105\020\uff3e\067\uff3e\103\uff3e\001\002\000" +
    "\010\003\uff56\020\uff56\067\uff56\001\002\000\004\104\225" +
    "\001\002\000\006\003\060\020\064\001\002\000\044\004" +
    "\043\005\067\006\045\010\054\025\133\030\147\033\150" +
    "\034\122\035\135\036\131\040\126\043\136\044\123\050" +
    "\142\054\132\055\055\105\uff5c\001\002\000\010\003\uff51" +
    "\020\uff51\067\uff51\001\002\000\004\105\374\001\002\000" +
    "\014\004\043\005\067\006\045\010\054\055\055\001\002" +
    "\000\010\003\060\020\064\067\044\001\002\000\010\003" +
    "\uff4f\020\uff4f\067\uff4f\001\002\000\044\004\uff5b\005\uff5b" +
    "\006\uff5b\010\uff5b\025\uff5b\030\uff5b\033\uff5b\034\uff5b\035" +
    "\uff5b\036\uff5b\040\uff5b\043\uff5b\044\uff5b\050\uff5b\054\uff5b" +
    "\055\uff5b\105\uff5b\001\002\000\044\004\uff5a\005\uff5a\006" +
    "\uff5a\010\uff5a\025\uff5a\030\uff5a\033\uff5a\034\uff5a\035\uff5a" +
    "\036\uff5a\040\uff5a\043\uff5a\044\uff5a\050\uff5a\054\uff5a\055" +
    "\uff5a\105\uff5a\001\002\000\006\017\357\102\uff4a\001\002" +
    "\000\004\102\151\001\002\000\020\003\161\004\043\005" +
    "\067\006\045\010\054\054\160\055\055\001\002\000\010" +
    "\003\uff26\020\uff26\067\uff26\001\002\000\010\003\uff23\020" +
    "\uff23\067\uff23\001\002\000\010\003\uff24\020\uff24\067\uff24" +
    "\001\002\000\010\003\uff25\020\uff25\067\uff25\001\002\000" +
    "\034\003\211\011\203\012\210\013\207\021\217\031\213" +
    "\052\177\053\215\054\205\056\214\102\206\103\204\104" +
    "\201\001\002\000\010\003\uff22\020\uff22\067\uff22\001\002" +
    "\000\006\054\164\106\165\001\002\000\010\003\uff21\020" +
    "\uff21\067\uff21\001\002\000\010\003\060\020\064\067\044" +
    "\001\002\000\034\003\uff28\011\uff28\012\uff28\013\uff28\021" +
    "\uff28\031\uff28\052\uff28\053\uff28\054\uff28\056\uff28\102\uff28" +
    "\103\uff28\104\uff28\001\002\000\012\003\060\020\064\022" +
    "\171\067\044\001\002\000\004\107\167\001\002\000\034" +
    "\003\uff27\011\uff27\012\uff27\013\uff27\021\uff27\031\uff27\052" +
    "\uff27\053\uff27\054\uff27\056\uff27\102\uff27\103\uff27\104\uff27" +
    "\001\002\000\006\054\164\106\165\001\002\000\034\003" +
    "\uff1f\011\uff1f\012\uff1f\013\uff1f\021\uff1f\031\uff1f\052\uff1f" +
    "\053\uff1f\054\uff1f\056\uff1f\102\uff1f\103\uff1f\104\uff1f\001" +
    "\002\000\004\054\174\001\002\000\034\003\uff20\011\uff20" +
    "\012\uff20\013\uff20\021\uff20\031\uff20\052\uff20\053\uff20\054" +
    "\uff20\056\uff20\102\uff20\103\uff20\104\uff20\001\002\000\034" +
    "\003\uff1d\011\uff1d\012\uff1d\013\uff1d\021\uff1d\031\uff1d\052" +
    "\uff1d\053\uff1d\054\uff1d\056\uff1d\102\uff1d\103\uff1d\104\uff1d" +
    "\001\002\000\034\003\uff1e\011\uff1e\012\uff1e\013\uff1e\021" +
    "\uff1e\031\uff1e\052\uff1e\053\uff1e\054\uff1e\056\uff1e\102\uff1e" +
    "\103\uff1e\104\uff1e\001\002\000\056\003\uffa4\020\uffa4\022" +
    "\uffa4\023\uffa4\060\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4" +
    "\070\uffa4\071\uffa4\072\uffa4\073\uffa4\074\uffa4\075\uffa4\076" +
    "\uffa4\077\uffa4\100\uffa4\101\uffa4\103\uffa4\105\uffa4\107\uffa4" +
    "\001\002\000\044\004\uff33\005\uff33\006\uff33\010\uff33\025" +
    "\uff33\030\uff33\033\uff33\034\uff33\035\uff33\036\uff33\040\uff33" +
    "\043\uff33\044\uff33\050\uff33\054\uff33\055\uff33\105\uff33\001" +
    "\002\000\056\003\uff9e\020\uff9e\022\uff9e\023\uff9e\060\uff9e" +
    "\064\uff9e\065\uff9e\066\uff9e\067\uff9e\070\uff9e\071\uff9e\072" +
    "\uff9e\073\uff9e\074\uff9e\075\uff9e\076\uff9e\077\uff9e\100\uff9e" +
    "\101\uff9e\103\uff9e\105\uff9e\107\uff9e\001\002\000\056\003" +
    "\uffa6\020\uffa6\022\uffa6\023\uffa6\060\uffa6\064\uffa6\065\uffa6" +
    "\066\uffa6\067\uffa6\070\uffa6\071\uffa6\072\uffa6\073\uffa6\074" +
    "\uffa6\075\uffa6\076\uffa6\077\uffa6\100\uffa6\101\uffa6\103\uffa6" +
    "\105\uffa6\107\uffa6\001\002\000\034\003\211\011\203\012" +
    "\210\013\207\021\217\031\213\052\177\053\215\054\205" +
    "\056\214\102\206\104\201\105\263\001\002\000\056\003" +
    "\uff9b\020\uff9b\022\uff9b\023\uff9b\060\312\064\324\065\307" +
    "\066\311\067\uff9b\070\310\071\306\072\314\073\315\074" +
    "\323\075\316\076\322\077\313\100\317\101\304\103\uff9b" +
    "\105\uff9b\107\uff9b\001\002\000\056\003\uffa1\020\uffa1\022" +
    "\uffa1\023\uffa1\060\uffa1\064\uffa1\065\uffa1\066\uffa1\067\uffa1" +
    "\070\uffa1\071\uffa1\072\uffa1\073\uffa1\074\uffa1\075\uffa1\076" +
    "\uffa1\077\uffa1\100\uffa1\101\uffa1\103\uffa1\105\uffa1\107\uffa1" +
    "\001\002\000\004\104\225\001\002\000\064\003\uff6c\017" +
    "\334\020\uff6c\022\uff6c\023\uff6c\060\uff6c\064\uff6c\065\uff6c" +
    "\066\uff6c\067\uff6c\070\uff6c\071\uff6c\072\uff6c\073\uff6c\074" +
    "\uff6c\075\uff6c\076\uff6c\077\uff6c\100\uff6c\101\uff6c\102\337" +
    "\103\uff6c\105\uff6c\106\335\107\uff6c\001\002\000\044\003" +
    "\211\004\274\005\301\006\275\010\277\011\203\012\210" +
    "\013\207\021\217\031\213\052\177\053\215\054\205\055" +
    "\300\056\214\102\206\104\201\001\002\000\032\003\211" +
    "\011\203\012\210\013\207\021\217\031\213\052\177\053" +
    "\215\054\205\056\214\102\206\104\201\001\002\000\056" +
    "\003\uffa0\020\uffa0\022\uffa0\023\uffa0\060\uffa0\064\uffa0\065" +
    "\uffa0\066\uffa0\067\uffa0\070\uffa0\071\uffa0\072\uffa0\073\uffa0" +
    "\074\uffa0\075\uffa0\076\uffa0\077\uffa0\100\uffa0\101\uffa0\103" +
    "\uffa0\105\uffa0\107\uffa0\001\002\000\056\003\uffa2\020\uffa2" +
    "\022\uffa2\023\uffa2\060\uffa2\064\uffa2\065\uffa2\066\uffa2\067" +
    "\uffa2\070\uffa2\071\uffa2\072\uffa2\073\uffa2\074\uffa2\075\uffa2" +
    "\076\uffa2\077\uffa2\100\uffa2\101\uffa2\103\uffa2\105\uffa2\107" +
    "\uffa2\001\002\000\056\003\uffa5\020\uffa5\022\uffa5\023\uffa5" +
    "\060\uffa5\064\uffa5\065\uffa5\066\uffa5\067\uffa5\070\uffa5\071" +
    "\uffa5\072\uffa5\073\uffa5\074\uffa5\075\uffa5\076\uffa5\077\uffa5" +
    "\100\uffa5\101\uffa5\103\uffa5\105\uffa5\107\uffa5\001\002\000" +
    "\020\003\236\004\242\005\235\006\241\010\240\054\233" +
    "\055\234\001\002\000\056\003\uff9d\020\uff9d\022\uff9d\023" +
    "\uff9d\060\uff9d\064\uff9d\065\uff9d\066\uff9d\067\uff9d\070\uff9d" +
    "\071\uff9d\072\uff9d\073\uff9d\074\uff9d\075\uff9d\076\uff9d\077" +
    "\uff9d\100\uff9d\101\uff9d\103\uff9d\105\uff9d\107\uff9d\001\002" +
    "\000\056\003\uff9f\020\uff9f\022\uff9f\023\uff9f\060\uff9f\064" +
    "\uff9f\065\uff9f\066\uff9f\067\uff9f\070\uff9f\071\uff9f\072\uff9f" +
    "\073\uff9f\074\uff9f\075\uff9f\076\uff9f\077\uff9f\100\uff9f\101" +
    "\uff9f\103\uff9f\105\uff9f\107\uff9f\001\002\000\056\003\uffaa" +
    "\020\uffaa\022\uffaa\023\uffaa\060\uffaa\064\uffaa\065\uffaa\066" +
    "\uffaa\067\uffaa\070\uffaa\071\uffaa\072\uffaa\073\uffaa\074\uffaa" +
    "\075\uffaa\076\uffaa\077\uffaa\100\uffaa\101\uffaa\103\uffaa\105" +
    "\uffaa\107\uffaa\001\002\000\004\007\231\001\002\000\056" +
    "\003\uffa7\020\uffa7\022\uffa7\023\uffa7\060\uffa7\064\uffa7\065" +
    "\uffa7\066\uffa7\067\uffa7\070\uffa7\071\uffa7\072\uffa7\073\uffa7" +
    "\074\uffa7\075\uffa7\076\uffa7\077\uffa7\100\uffa7\101\uffa7\103" +
    "\uffa7\105\uffa7\107\uffa7\001\002\000\006\003\060\020\064" +
    "\001\002\000\010\025\133\030\147\054\132\001\002\000" +
    "\004\103\224\001\002\000\004\104\225\001\002\000\044" +
    "\004\043\005\067\006\045\010\054\025\133\030\147\033" +
    "\150\034\122\035\135\036\131\040\126\043\136\044\123" +
    "\050\142\054\132\055\055\105\uff5c\001\002\000\044\004" +
    "\uff29\005\uff29\006\uff29\010\uff29\025\uff29\030\uff29\033\uff29" +
    "\034\uff29\035\uff29\036\uff29\040\uff29\043\uff29\044\uff29\050" +
    "\uff29\054\uff29\055\uff29\105\uff29\001\002\000\004\105\230" +
    "\001\002\000\046\004\uff32\005\uff32\006\uff32\010\uff32\025" +
    "\uff32\030\uff32\033\uff32\034\uff32\035\uff32\036\uff32\037\uff32" +
    "\040\uff32\043\uff32\044\uff32\050\uff32\054\uff32\055\uff32\105" +
    "\uff32\001\002\000\004\021\232\001\002\000\056\003\uff81" +
    "\020\uff81\022\uff81\023\uff81\060\uff81\064\uff81\065\uff81\066" +
    "\uff81\067\uff81\070\uff81\071\uff81\072\uff81\073\uff81\074\uff81" +
    "\075\uff81\076\uff81\077\uff81\100\uff81\101\uff81\103\uff81\105" +
    "\uff81\107\uff81\001\002\000\006\102\uffcd\106\uffcd\001\002" +
    "\000\006\102\uffcf\106\uffcf\001\002\000\006\102\uffcc\106" +
    "\uffcc\001\002\000\006\102\uffc9\106\uffc9\001\002\000\006" +
    "\102\246\106\244\001\002\000\006\102\uffca\106\uffca\001" +
    "\002\000\006\102\uffcb\106\uffcb\001\002\000\006\102\uffce" +
    "\106\uffce\001\002\000\056\003\uff80\020\uff80\022\uff80\023" +
    "\uff80\060\uff80\064\uff80\065\uff80\066\uff80\067\uff80\070\uff80" +
    "\071\uff80\072\uff80\073\uff80\074\uff80\075\uff80\076\uff80\077" +
    "\uff80\100\uff80\101\uff80\103\uff80\105\uff80\107\uff80\001\002" +
    "\000\034\003\211\011\203\012\210\013\207\021\217\031" +
    "\213\052\177\053\215\054\205\056\214\102\206\104\201" +
    "\107\uff7d\001\002\000\056\003\uffa8\020\uffa8\022\uffa8\023" +
    "\uffa8\060\uffa8\064\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8" +
    "\071\uffa8\072\uffa8\073\uffa8\074\uffa8\075\uffa8\076\uffa8\077" +
    "\uffa8\100\uffa8\101\uffa8\103\uffa8\105\uffa8\107\uffa8\001\002" +
    "\000\034\003\211\011\203\012\210\013\207\021\217\031" +
    "\213\052\177\053\215\054\205\056\214\102\206\103\250" +
    "\104\201\001\002\000\004\103\255\001\002\000\056\003" +
    "\uff79\020\uff79\022\uff79\023\uff79\060\uff79\064\uff79\065\uff79" +
    "\066\uff79\067\uff79\070\uff79\071\uff79\072\uff79\073\uff79\074" +
    "\uff79\075\uff79\076\uff79\077\uff79\100\uff79\101\uff79\103\uff79" +
    "\105\uff79\107\uff79\001\002\000\010\022\uff76\023\252\103" +
    "\uff76\001\002\000\032\003\211\011\203\012\210\013\207" +
    "\021\217\031\213\052\177\053\215\054\205\056\214\102" +
    "\206\104\201\001\002\000\006\022\uff78\103\uff78\001\002" +
    "\000\006\022\uff77\103\uff77\001\002\000\056\003\uff7a\020" +
    "\uff7a\022\uff7a\023\uff7a\060\uff7a\064\uff7a\065\uff7a\066\uff7a" +
    "\067\uff7a\070\uff7a\071\uff7a\072\uff7a\073\uff7a\074\uff7a\075" +
    "\uff7a\076\uff7a\077\uff7a\100\uff7a\101\uff7a\103\uff7a\105\uff7a" +
    "\107\uff7a\001\002\000\004\107\260\001\002\000\004\107" +
    "\uff7e\001\002\000\060\003\uff7b\020\uff7b\022\uff7b\023\uff7b" +
    "\060\uff7b\064\uff7b\065\uff7b\066\uff7b\067\uff7b\070\uff7b\071" +
    "\uff7b\072\uff7b\073\uff7b\074\uff7b\075\uff7b\076\uff7b\077\uff7b" +
    "\100\uff7b\101\uff7b\103\uff7b\104\262\105\uff7b\107\uff7b\001" +
    "\002\000\056\003\uff7f\020\uff7f\022\uff7f\023\uff7f\060\uff7f" +
    "\064\uff7f\065\uff7f\066\uff7f\067\uff7f\070\uff7f\071\uff7f\072" +
    "\uff7f\073\uff7f\074\uff7f\075\uff7f\076\uff7f\077\uff7f\100\uff7f" +
    "\101\uff7f\103\uff7f\105\uff7f\107\uff7f\001\002\000\034\003" +
    "\211\011\203\012\210\013\207\021\217\031\213\052\177" +
    "\053\215\054\205\056\214\102\206\104\201\105\263\001" +
    "\002\000\056\003\uff74\020\uff74\022\uff74\023\uff74\060\uff74" +
    "\064\uff74\065\uff74\066\uff74\067\uff74\070\uff74\071\uff74\072" +
    "\uff74\073\uff74\074\uff74\075\uff74\076\uff74\077\uff74\100\uff74" +
    "\101\uff74\103\uff74\105\uff74\107\uff74\001\002\000\056\003" +
    "\uff7c\020\uff7c\022\uff7c\023\uff7c\060\uff7c\064\uff7c\065\uff7c" +
    "\066\uff7c\067\uff7c\070\uff7c\071\uff7c\072\uff7c\073\uff7c\074" +
    "\uff7c\075\uff7c\076\uff7c\077\uff7c\100\uff7c\101\uff7c\103\uff7c" +
    "\105\uff7c\107\uff7c\001\002\000\006\023\266\105\uff72\001" +
    "\002\000\032\003\211\011\203\012\210\013\207\021\217" +
    "\031\213\052\177\053\215\054\205\056\214\102\206\104" +
    "\201\001\002\000\004\105\270\001\002\000\056\003\uff75" +
    "\020\uff75\022\uff75\023\uff75\060\uff75\064\uff75\065\uff75\066" +
    "\uff75\067\uff75\070\uff75\071\uff75\072\uff75\073\uff75\074\uff75" +
    "\075\uff75\076\uff75\077\uff75\100\uff75\101\uff75\103\uff75\105" +
    "\uff75\107\uff75\001\002\000\006\023\266\105\uff72\001\002" +
    "\000\004\105\uff73\001\002\000\056\003\uffa3\020\uffa3\022" +
    "\uffa3\023\uffa3\060\uffa3\064\uffa3\065\uffa3\066\uffa3\067\uffa3" +
    "\070\uffa3\071\uffa3\072\uffa3\073\uffa3\074\uffa3\075\uffa3\076" +
    "\uffa3\077\uffa3\100\uffa3\101\uffa3\103\uffa3\105\uffa3\107\uffa3" +
    "\001\002\000\004\103\uff93\001\002\000\004\103\uff92\001" +
    "\002\000\004\103\332\001\002\000\004\103\uff91\001\002" +
    "\000\004\103\uff94\001\002\000\004\103\uff95\001\002\000" +
    "\004\103\303\001\002\000\060\003\uff96\014\321\020\uff96" +
    "\022\uff96\023\uff96\060\312\064\324\065\307\066\311\067" +
    "\uff96\070\310\071\306\072\314\073\315\074\323\075\316" +
    "\076\322\077\313\100\317\101\304\103\uff96\105\uff96\107" +
    "\uff96\001\002\000\032\003\uff87\011\uff87\012\uff87\013\uff87" +
    "\021\uff87\031\uff87\052\uff87\053\uff87\054\uff87\056\uff87\102" +
    "\uff87\104\uff87\001\002\000\032\003\uff86\011\uff86\012\uff86" +
    "\013\uff86\021\uff86\031\uff86\052\uff86\053\uff86\054\uff86\056" +
    "\uff86\102\uff86\104\uff86\001\002\000\032\003\uff8f\011\uff8f" +
    "\012\uff8f\013\uff8f\021\uff8f\031\uff8f\052\uff8f\053\uff8f\054" +
    "\uff8f\056\uff8f\102\uff8f\104\uff8f\001\002\000\032\003\uff83" +
    "\011\uff83\012\uff83\013\uff83\021\uff83\031\uff83\052\uff83\053" +
    "\uff83\054\uff83\056\uff83\102\uff83\104\uff83\001\002\000\032" +
    "\003\uff90\011\uff90\012\uff90\013\uff90\021\uff90\031\uff90\052" +
    "\uff90\053\uff90\054\uff90\056\uff90\102\uff90\104\uff90\001\002" +
    "\000\032\003\uff82\011\uff82\012\uff82\013\uff82\021\uff82\031" +
    "\uff82\052\uff82\053\uff82\054\uff82\056\uff82\102\uff82\104\uff82" +
    "\001\002\000\032\003\uff85\011\uff85\012\uff85\013\uff85\021" +
    "\uff85\031\uff85\052\uff85\053\uff85\054\uff85\056\uff85\102\uff85" +
    "\104\uff85\001\002\000\032\003\uff89\011\uff89\012\uff89\013" +
    "\uff89\021\uff89\031\uff89\052\uff89\053\uff89\054\uff89\056\uff89" +
    "\102\uff89\104\uff89\001\002\000\032\003\uff8e\011\uff8e\012" +
    "\uff8e\013\uff8e\021\uff8e\031\uff8e\052\uff8e\053\uff8e\054\uff8e" +
    "\056\uff8e\102\uff8e\104\uff8e\001\002\000\032\003\uff8d\011" +
    "\uff8d\012\uff8d\013\uff8d\021\uff8d\031\uff8d\052\uff8d\053\uff8d" +
    "\054\uff8d\056\uff8d\102\uff8d\104\uff8d\001\002\000\032\003" +
    "\uff8b\011\uff8b\012\uff8b\013\uff8b\021\uff8b\031\uff8b\052\uff8b" +
    "\053\uff8b\054\uff8b\056\uff8b\102\uff8b\104\uff8b\001\002\000" +
    "\032\003\uff88\011\uff88\012\uff88\013\uff88\021\uff88\031\uff88" +
    "\052\uff88\053\uff88\054\uff88\056\uff88\102\uff88\104\uff88\001" +
    "\002\000\056\003\uff9a\020\uff9a\022\uff9a\023\uff9a\060\uff9a" +
    "\064\uff9a\065\uff9a\066\uff9a\067\uff9a\070\uff9a\071\uff9a\072" +
    "\uff9a\073\uff9a\074\uff9a\075\uff9a\076\uff9a\077\uff9a\100\uff9a" +
    "\101\uff9a\103\uff9a\105\uff9a\107\uff9a\001\002\000\032\003" +
    "\211\011\203\012\210\013\207\021\217\031\213\052\177" +
    "\053\215\054\205\056\214\102\206\104\201\001\002\000" +
    "\032\003\uff8a\011\uff8a\012\uff8a\013\uff8a\021\uff8a\031\uff8a" +
    "\052\uff8a\053\uff8a\054\uff8a\056\uff8a\102\uff8a\104\uff8a\001" +
    "\002\000\032\003\uff8c\011\uff8c\012\uff8c\013\uff8c\021\uff8c" +
    "\031\uff8c\052\uff8c\053\uff8c\054\uff8c\056\uff8c\102\uff8c\104" +
    "\uff8c\001\002\000\032\003\uff84\011\uff84\012\uff84\013\uff84" +
    "\021\uff84\031\uff84\052\uff84\053\uff84\054\uff84\056\uff84\102" +
    "\uff84\104\uff84\001\002\000\032\003\211\011\203\012\210" +
    "\013\207\021\217\031\213\052\177\053\215\054\205\056" +
    "\214\102\206\104\201\001\002\000\056\003\uff98\020\uff98" +
    "\022\uff98\023\uff98\060\uff98\064\uff98\065\uff98\066\uff98\067" +
    "\uff98\070\uff98\071\uff98\072\uff98\073\uff98\074\uff98\075\uff98" +
    "\076\uff98\077\uff98\100\uff98\101\uff98\103\uff98\105\uff98\107" +
    "\uff98\001\002\000\004\022\330\001\002\000\032\003\211" +
    "\011\203\012\210\013\207\021\217\031\213\052\177\053" +
    "\215\054\205\056\214\102\206\104\201\001\002\000\056" +
    "\003\uff97\020\uff97\022\uff97\023\uff97\060\uff97\064\uff97\065" +
    "\uff97\066\uff97\067\uff97\070\uff97\071\uff97\072\uff97\073\uff97" +
    "\074\uff97\075\uff97\076\uff97\077\uff97\100\uff97\101\uff97\103" +
    "\uff97\105\uff97\107\uff97\001\002\000\032\003\211\011\203" +
    "\012\210\013\207\021\217\031\213\052\177\053\215\054" +
    "\205\056\214\102\206\104\201\001\002\000\056\003\uff99" +
    "\020\uff99\022\uff99\023\uff99\060\uff99\064\uff99\065\uff99\066" +
    "\uff99\067\uff99\070\uff99\071\uff99\072\uff99\073\uff99\074\uff99" +
    "\075\uff99\076\uff99\077\uff99\100\uff99\101\uff99\103\uff99\105" +
    "\uff99\107\uff99\001\002\000\004\054\350\001\002\000\032" +
    "\003\211\011\203\012\210\013\207\021\217\031\213\052" +
    "\177\053\215\054\205\056\214\102\206\104\201\001\002" +
    "\000\056\003\uff71\020\uff71\022\uff71\023\uff71\060\uff71\064" +
    "\uff71\065\uff71\066\uff71\067\uff71\070\uff71\071\uff71\072\uff71" +
    "\073\uff71\074\uff71\075\uff71\076\uff71\077\uff71\100\uff71\101" +
    "\uff71\103\uff71\105\uff71\107\uff71\001\002\000\034\003\211" +
    "\011\203\012\210\013\207\021\217\031\213\052\177\053" +
    "\215\054\205\056\214\102\206\103\341\104\201\001\002" +
    "\000\004\103\343\001\002\000\056\003\uff6a\020\uff6a\022" +
    "\uff6a\023\uff6a\060\uff6a\064\uff6a\065\uff6a\066\uff6a\067\uff6a" +
    "\070\uff6a\071\uff6a\072\uff6a\073\uff6a\074\uff6a\075\uff6a\076" +
    "\uff6a\077\uff6a\100\uff6a\101\uff6a\103\uff6a\105\uff6a\107\uff6a" +
    "\001\002\000\056\003\uff6d\020\uff6d\022\uff6d\023\uff6d\060" +
    "\uff6d\064\uff6d\065\uff6d\066\uff6d\067\uff6d\070\uff6d\071\uff6d" +
    "\072\uff6d\073\uff6d\074\uff6d\075\uff6d\076\uff6d\077\uff6d\100" +
    "\uff6d\101\uff6d\103\uff6d\105\uff6d\107\uff6d\001\002\000\056" +
    "\003\uff6b\020\uff6b\022\uff6b\023\uff6b\060\uff6b\064\uff6b\065" +
    "\uff6b\066\uff6b\067\uff6b\070\uff6b\071\uff6b\072\uff6b\073\uff6b" +
    "\074\uff6b\075\uff6b\076\uff6b\077\uff6b\100\uff6b\101\uff6b\103" +
    "\uff6b\105\uff6b\107\uff6b\001\002\000\004\107\345\001\002" +
    "\000\064\003\uff6c\017\334\020\uff6c\022\uff6c\023\uff6c\060" +
    "\uff6c\064\uff6c\065\uff6c\066\uff6c\067\uff6c\070\uff6c\071\uff6c" +
    "\072\uff6c\073\uff6c\074\uff6c\075\uff6c\076\uff6c\077\uff6c\100" +
    "\uff6c\101\uff6c\102\337\103\uff6c\105\uff6c\106\335\107\uff6c" +
    "\001\002\000\056\003\uff6e\020\uff6e\022\uff6e\023\uff6e\060" +
    "\uff6e\064\uff6e\065\uff6e\066\uff6e\067\uff6e\070\uff6e\071\uff6e" +
    "\072\uff6e\073\uff6e\074\uff6e\075\uff6e\076\uff6e\077\uff6e\100" +
    "\uff6e\101\uff6e\103\uff6e\105\uff6e\107\uff6e\001\002\000\056" +
    "\003\uff6f\020\uff6f\022\uff6f\023\uff6f\060\uff6f\064\uff6f\065" +
    "\uff6f\066\uff6f\067\uff6f\070\uff6f\071\uff6f\072\uff6f\073\uff6f" +
    "\074\uff6f\075\uff6f\076\uff6f\077\uff6f\100\uff6f\101\uff6f\103" +
    "\uff6f\105\uff6f\107\uff6f\001\002\000\064\003\uff6c\017\334" +
    "\020\uff6c\022\uff6c\023\uff6c\060\uff6c\064\uff6c\065\uff6c\066" +
    "\uff6c\067\uff6c\070\uff6c\071\uff6c\072\uff6c\073\uff6c\074\uff6c" +
    "\075\uff6c\076\uff6c\077\uff6c\100\uff6c\101\uff6c\102\337\103" +
    "\uff6c\105\uff6c\106\335\107\uff6c\001\002\000\056\003\uff70" +
    "\020\uff70\022\uff70\023\uff70\060\uff70\064\uff70\065\uff70\066" +
    "\uff70\067\uff70\070\uff70\071\uff70\072\uff70\073\uff70\074\uff70" +
    "\075\uff70\076\uff70\077\uff70\100\uff70\101\uff70\103\uff70\105" +
    "\uff70\107\uff70\001\002\000\044\004\uff2a\005\uff2a\006\uff2a" +
    "\010\uff2a\025\uff2a\030\uff2a\033\uff2a\034\uff2a\035\uff2a\036" +
    "\uff2a\040\uff2a\043\uff2a\044\uff2a\050\uff2a\054\uff2a\055\uff2a" +
    "\105\uff2a\001\002\000\056\003\uffaf\020\uffaf\022\uffaf\023" +
    "\uffaf\060\uffaf\064\uffaf\065\uffaf\066\uffaf\067\uffaf\070\uffaf" +
    "\071\uffaf\072\uffaf\073\uffaf\074\uffaf\075\uffaf\076\uffaf\077" +
    "\uffaf\100\uffaf\101\uffaf\103\uffaf\105\uffaf\107\uffaf\001\002" +
    "\000\032\003\211\011\203\012\210\013\207\021\217\031" +
    "\213\052\177\053\215\054\205\056\214\102\206\104\201" +
    "\001\002\000\056\003\uff9c\020\uff9c\022\uff9c\023\uff9c\060" +
    "\uff9c\064\uff9c\065\uff9c\066\uff9c\067\uff9c\070\uff9c\071\uff9c" +
    "\072\uff9c\073\uff9c\074\uff9c\075\uff9c\076\uff9c\077\uff9c\100" +
    "\uff9c\101\uff9c\103\uff9c\105\uff9c\107\uff9c\001\002\000\056" +
    "\003\uffa9\020\uffa9\022\uffa9\023\uffa9\060\uffa9\064\uffa9\065" +
    "\uffa9\066\uffa9\067\uffa9\070\uffa9\071\uffa9\072\uffa9\073\uffa9" +
    "\074\uffa9\075\uffa9\076\uffa9\077\uffa9\100\uffa9\101\uffa9\103" +
    "\uffa9\105\uffa9\107\uffa9\001\002\000\004\054\370\001\002" +
    "\000\004\102\361\001\002\000\032\003\211\011\203\012" +
    "\210\013\207\021\217\031\213\052\177\053\215\054\205" +
    "\056\214\102\206\104\201\001\002\000\006\023\363\103" +
    "\uff48\001\002\000\032\003\211\011\203\012\210\013\207" +
    "\021\217\031\213\052\177\053\215\054\205\056\214\102" +
    "\206\104\201\001\002\000\004\103\365\001\002\000\012" +
    "\003\uff4c\020\uff4c\067\uff4c\103\uff4c\001\002\000\006\023" +
    "\363\103\uff48\001\002\000\004\103\uff49\001\002\000\006" +
    "\017\357\102\uff4a\001\002\000\004\102\uff4b\001\002\000" +
    "\044\004\uff58\005\uff58\006\uff58\010\uff58\025\uff58\030\uff58" +
    "\033\uff58\034\uff58\035\uff58\036\uff58\040\uff58\043\uff58\044" +
    "\uff58\050\uff58\054\uff58\055\uff58\105\uff58\001\002\000\010" +
    "\003\uff57\020\uff57\067\uff57\001\002\000\044\003\uff65\004" +
    "\uff65\005\uff65\006\uff65\010\uff65\020\uff65\032\uff65\045\uff65" +
    "\046\uff65\047\uff65\050\uff65\051\uff65\054\uff65\055\uff65\067" +
    "\uff65\102\uff65\105\uff65\001\002\000\004\105\uff5d\001\002" +
    "\000\056\003\uff39\004\uff39\005\uff39\006\uff39\010\uff39\020" +
    "\uff39\025\uff39\030\uff39\033\uff39\034\uff39\035\uff39\036\uff39" +
    "\040\uff39\041\uff39\042\uff39\043\uff39\044\uff39\050\uff39\054" +
    "\uff39\055\uff39\067\uff39\105\uff39\001\002\000\004\034\u0100" +
    "\001\002\000\004\102\u0101\001\002\000\032\003\211\011" +
    "\203\012\210\013\207\021\217\031\213\052\177\053\215" +
    "\054\205\056\214\102\206\104\201\001\002\000\004\103" +
    "\u0103\001\002\000\006\003\060\020\064\001\002\000\044" +
    "\004\uff36\005\uff36\006\uff36\010\uff36\025\uff36\030\uff36\033" +
    "\uff36\034\uff36\035\uff36\036\uff36\040\uff36\043\uff36\044\uff36" +
    "\050\uff36\054\uff36\055\uff36\105\uff36\001\002\000\004\054" +
    "\u0107\001\002\000\012\003\uff4d\020\uff4d\067\uff4d\103\uff4d" +
    "\001\002\000\016\003\uff3e\017\u0105\020\uff3e\067\uff3e\102" +
    "\u0109\103\uff3e\001\002\000\012\003\uff3f\020\uff3f\067\uff3f" +
    "\103\uff3f\001\002\000\034\003\211\011\203\012\210\013" +
    "\207\021\217\031\213\052\177\053\215\054\205\056\214" +
    "\102\206\103\u010c\104\201\001\002\000\012\003\uff3c\020" +
    "\uff3c\067\uff3c\103\uff3c\001\002\000\012\003\uff3d\020\uff3d" +
    "\067\uff3d\103\uff3d\001\002\000\012\003\uff3a\020\uff3a\067" +
    "\uff3a\103\uff3a\001\002\000\006\023\363\103\uff48\001\002" +
    "\000\004\103\u010f\001\002\000\012\003\uff3b\020\uff3b\067" +
    "\uff3b\103\uff3b\001\002\000\032\003\211\011\203\012\210" +
    "\013\207\021\217\031\213\052\177\053\215\054\205\056" +
    "\214\102\206\104\201\001\002\000\034\003\211\011\203" +
    "\012\210\013\207\021\217\031\213\052\177\053\215\054" +
    "\205\056\214\102\206\103\341\104\201\001\002\000\012" +
    "\003\uff4e\020\uff4e\067\uff4e\103\uff4e\001\002\000\032\003" +
    "\211\011\203\012\210\013\207\021\217\031\213\052\177" +
    "\053\215\054\205\056\214\102\206\104\201\001\002\000" +
    "\012\003\uff47\020\uff47\067\uff47\103\uff47\001\002\000\014" +
    "\003\uff3e\017\u0105\020\uff3e\067\uff3e\103\uff3e\001\002\000" +
    "\032\003\211\011\203\012\210\013\207\021\217\031\213" +
    "\052\177\053\215\054\205\056\214\102\206\104\201\001" +
    "\002\000\012\003\uff45\020\uff45\067\uff45\103\uff45\001\002" +
    "\000\012\003\uff42\020\uff42\067\uff42\103\uff42\001\002\000" +
    "\012\003\uff44\020\uff44\067\uff44\103\uff44\001\002\000\012" +
    "\003\uff43\020\uff43\067\uff43\103\uff43\001\002\000\004\107" +
    "\u011c\001\002\000\014\003\uff3e\017\u0105\020\uff3e\067\uff3e" +
    "\103\uff3e\001\002\000\012\003\uff41\020\uff41\067\uff41\103" +
    "\uff41\001\002\000\012\003\uff40\020\uff40\067\uff40\103\uff40" +
    "\001\002\000\012\003\uff46\020\uff46\067\uff46\103\uff46\001" +
    "\002\000\032\003\211\011\203\012\210\013\207\021\217" +
    "\031\213\052\177\053\215\054\205\056\214\102\206\104" +
    "\201\001\002\000\004\103\u0122\001\002\000\004\104\225" +
    "\001\002\000\046\004\uff1b\005\uff1b\006\uff1b\010\uff1b\025" +
    "\uff1b\030\uff1b\033\uff1b\034\uff1b\035\uff1b\036\uff1b\037\u0124" +
    "\040\uff1b\043\uff1b\044\uff1b\050\uff1b\054\uff1b\055\uff1b\105" +
    "\uff1b\001\002\000\010\003\u0126\036\u0129\104\u0127\001\002" +
    "\000\044\004\uff35\005\uff35\006\uff35\010\uff35\025\uff35\030" +
    "\uff35\033\uff35\034\uff35\035\uff35\036\uff35\040\uff35\043\uff35" +
    "\044\uff35\050\uff35\054\uff35\055\uff35\105\uff35\001\002\000" +
    "\044\004\uff18\005\uff18\006\uff18\010\uff18\025\uff18\030\uff18" +
    "\033\uff18\034\uff18\035\uff18\036\uff18\040\uff18\043\uff18\044" +
    "\uff18\050\uff18\054\uff18\055\uff18\105\uff18\001\002\000\044" +
    "\004\043\005\067\006\045\010\054\025\133\030\147\033" +
    "\150\034\122\035\135\036\131\040\126\043\136\044\123" +
    "\050\142\054\132\055\055\105\uff5c\001\002\000\044\004" +
    "\uff1c\005\uff1c\006\uff1c\010\uff1c\025\uff1c\030\uff1c\033\uff1c" +
    "\034\uff1c\035\uff1c\036\uff1c\040\uff1c\043\uff1c\044\uff1c\050" +
    "\uff1c\054\uff1c\055\uff1c\105\uff1c\001\002\000\004\102\u012a" +
    "\001\002\000\032\003\211\011\203\012\210\013\207\021" +
    "\217\031\213\052\177\053\215\054\205\056\214\102\206" +
    "\104\201\001\002\000\004\103\u012c\001\002\000\004\104" +
    "\u012d\001\002\000\044\004\043\005\067\006\045\010\054" +
    "\025\133\030\147\033\150\034\122\035\135\036\131\040" +
    "\126\043\136\044\123\050\142\054\132\055\055\105\uff5c" +
    "\001\002\000\004\105\u012f\001\002\000\046\004\uff1b\005" +
    "\uff1b\006\uff1b\010\uff1b\025\uff1b\030\uff1b\033\uff1b\034\uff1b" +
    "\035\uff1b\036\uff1b\037\u0124\040\uff1b\043\uff1b\044\uff1b\050" +
    "\uff1b\054\uff1b\055\uff1b\105\uff1b\001\002\000\044\004\uff19" +
    "\005\uff19\006\uff19\010\uff19\025\uff19\030\uff19\033\uff19\034" +
    "\uff19\035\uff19\036\uff19\040\uff19\043\uff19\044\uff19\050\uff19" +
    "\054\uff19\055\uff19\105\uff19\001\002\000\004\105\u0132\001" +
    "\002\000\044\004\uff1a\005\uff1a\006\uff1a\010\uff1a\025\uff1a" +
    "\030\uff1a\033\uff1a\034\uff1a\035\uff1a\036\uff1a\040\uff1a\043" +
    "\uff1a\044\uff1a\050\uff1a\054\uff1a\055\uff1a\105\uff1a\001\002" +
    "\000\032\003\211\011\203\012\210\013\207\021\217\031" +
    "\213\052\177\053\215\054\205\056\214\102\206\104\201" +
    "\001\002\000\004\103\u0135\001\002\000\004\104\u0136\001" +
    "\002\000\010\041\u0139\042\u0137\105\uff2f\001\002\000\004" +
    "\022\u0144\001\002\000\004\105\u0143\001\002\000\032\003" +
    "\211\011\203\012\210\013\207\021\217\031\213\052\177" +
    "\053\215\054\205\056\214\102\206\104\201\001\002\000" +
    "\004\022\u013b\001\002\000\042\004\043\005\067\006\045" +
    "\010\054\025\133\030\147\033\150\034\122\035\135\036" +
    "\131\040\126\043\136\044\123\050\142\054\132\055\055" +
    "\001\002\000\010\041\u0139\042\u0137\105\uff2f\001\002\000" +
    "\016\003\uff54\020\uff54\041\uff2d\042\uff2d\067\uff54\105\uff2d" +
    "\001\002\000\042\004\043\005\067\006\045\010\054\025" +
    "\133\030\147\033\150\034\122\035\135\036\131\040\126" +
    "\043\136\044\123\050\142\054\132\055\055\001\002\000" +
    "\042\004\uff2c\005\uff2c\006\uff2c\010\uff2c\025\uff2c\030\uff2c" +
    "\033\uff2c\034\uff2c\035\uff2c\036\uff2c\040\uff2c\043\uff2c\044" +
    "\uff2c\050\uff2c\054\uff2c\055\uff2c\001\002\000\042\004\uff2b" +
    "\005\uff2b\006\uff2b\010\uff2b\025\uff2b\030\uff2b\033\uff2b\034" +
    "\uff2b\035\uff2b\036\uff2b\040\uff2b\043\uff2b\044\uff2b\050\uff2b" +
    "\054\uff2b\055\uff2b\001\002\000\010\041\uff2e\042\uff2e\105" +
    "\uff2e\001\002\000\004\105\uff31\001\002\000\044\004\uff34" +
    "\005\uff34\006\uff34\010\uff34\025\uff34\030\uff34\033\uff34\034" +
    "\uff34\035\uff34\036\uff34\040\uff34\043\uff34\044\uff34\050\uff34" +
    "\054\uff34\055\uff34\105\uff34\001\002\000\042\004\043\005" +
    "\067\006\045\010\054\025\133\030\147\033\150\034\122" +
    "\035\135\036\131\040\126\043\136\044\123\050\142\054" +
    "\132\055\055\001\002\000\004\105\uff30\001\002\000\006" +
    "\003\060\020\064\001\002\000\056\003\uff38\004\uff38\005" +
    "\uff38\006\uff38\010\uff38\020\uff38\025\uff38\030\uff38\033\uff38" +
    "\034\uff38\035\uff38\036\uff38\040\uff38\041\uff38\042\uff38\043" +
    "\uff38\044\uff38\050\uff38\054\uff38\055\uff38\067\uff38\105\uff38" +
    "\001\002\000\032\003\211\011\203\012\210\013\207\021" +
    "\217\031\213\052\177\053\215\054\205\056\214\102\206" +
    "\104\201\001\002\000\004\103\u014a\001\002\000\004\104" +
    "\225\001\002\000\044\004\uff37\005\uff37\006\uff37\010\uff37" +
    "\025\uff37\030\uff37\033\uff37\034\uff37\035\uff37\036\uff37\040" +
    "\uff37\043\uff37\044\uff37\050\uff37\054\uff37\055\uff37\105\uff37" +
    "\001\002\000\004\102\uff64\001\002\000\004\105\uffd5\001" +
    "\002\000\004\102\u014f\001\002\000\020\004\043\005\067" +
    "\006\045\010\054\054\110\055\055\103\uff60\001\002\000" +
    "\004\103\u0151\001\002\000\004\104\u0152\001\002\000\044" +
    "\004\043\005\067\006\045\010\054\025\133\030\147\033" +
    "\150\034\122\035\135\036\131\040\126\043\136\044\123" +
    "\050\142\054\132\055\055\105\uff5c\001\002\000\004\105" +
    "\u0154\001\002\000\044\003\uff63\004\uff63\005\uff63\006\uff63" +
    "\010\uff63\020\uff63\032\uff63\045\uff63\046\uff63\047\uff63\050" +
    "\uff63\051\uff63\054\uff63\055\uff63\067\uff63\102\uff63\105\uff63" +
    "\001\002\000\044\003\uffd8\004\uffd8\005\uffd8\006\uffd8\010" +
    "\uffd8\020\uffd8\032\uffd8\045\016\046\012\047\014\050\021" +
    "\051\013\054\uffd8\055\uffd8\067\uffd8\102\uffd8\105\uffda\001" +
    "\002\000\004\105\uffd2\001\002\000\006\054\072\106\073" +
    "\001\002\000\022\003\uffb9\020\uffb9\023\uffb9\032\uffb9\054" +
    "\uffb9\067\uffb9\102\uffb9\103\uffb9\001\002\000\006\054\072" +
    "\106\073\001\002\000\022\003\uffbb\020\uffbb\023\uffbb\032" +
    "\uffbb\054\uffbb\067\uffbb\102\uffbb\103\uffbb\001\002\000\044" +
    "\003\uffd8\004\uffd8\005\uffd8\006\uffd8\010\uffd8\020\uffd8\032" +
    "\uffd8\045\016\046\012\047\014\050\021\051\013\054\uffd8" +
    "\055\uffd8\067\uffd8\102\uffd8\105\uffda\001\002\000\004\105" +
    "\uffd0\001\002\000\020\004\043\005\067\006\045\010\054" +
    "\054\110\055\055\103\uff60\001\002\000\004\103\u015f\001" +
    "\002\000\004\104\u0160\001\002\000\044\004\043\005\067" +
    "\006\045\010\054\025\133\030\147\033\150\034\122\035" +
    "\135\036\131\040\126\043\136\044\123\050\142\054\132" +
    "\055\055\105\uff5c\001\002\000\004\105\u0162\001\002\000" +
    "\044\003\uff68\004\uff68\005\uff68\006\uff68\010\uff68\020\uff68" +
    "\032\uff68\045\uff68\046\uff68\047\uff68\050\uff68\051\uff68\054" +
    "\uff68\055\uff68\067\uff68\102\uff68\105\uff68\001\002\000\006" +
    "\054\072\106\073\001\002\000\022\003\uffbd\020\uffbd\023" +
    "\uffbd\032\uffbd\054\uffbd\067\uffbd\102\uffbd\103\uffbd\001\002" +
    "\000\010\003\060\020\064\023\u0166\001\002\000\004\054" +
    "\u0169\001\002\000\112\003\uffb1\004\uffb1\005\uffb1\006\uffb1" +
    "\010\uffb1\011\uffb1\012\uffb1\013\uffb1\020\uffb1\021\uffb1\025" +
    "\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1" +
    "\036\uffb1\040\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047" +
    "\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1" +
    "\056\uffb1\067\uffb1\102\uffb1\103\uffb1\104\uffb1\105\uffb1\001" +
    "\002\000\112\003\uffad\004\uffad\005\uffad\006\uffad\010\uffad" +
    "\011\uffad\012\uffad\013\uffad\020\uffad\021\uffad\025\uffad\030" +
    "\uffad\031\uffad\032\uffad\033\uffad\034\uffad\035\uffad\036\uffad" +
    "\040\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050" +
    "\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056\uffad" +
    "\067\uffad\102\uffad\103\uffad\104\uffad\105\uffad\001\002\000" +
    "\010\003\060\020\064\067\u016b\001\002\000\112\003\uffab" +
    "\004\uffab\005\uffab\006\uffab\010\uffab\011\uffab\012\uffab\013" +
    "\uffab\020\uffab\021\uffab\025\uffab\030\uffab\031\uffab\032\uffab" +
    "\033\uffab\034\uffab\035\uffab\036\uffab\040\uffab\043\uffab\044" +
    "\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab" +
    "\053\uffab\054\uffab\055\uffab\056\uffab\067\uffab\102\uffab\103" +
    "\uffab\104\uffab\105\uffab\001\002\000\032\003\211\011\203" +
    "\012\210\013\207\021\217\031\213\052\177\053\215\054" +
    "\205\056\214\102\206\104\201\001\002\000\112\003\uffae" +
    "\004\uffae\005\uffae\006\uffae\010\uffae\011\uffae\012\uffae\013" +
    "\uffae\020\uffae\021\uffae\025\uffae\030\uffae\031\uffae\032\uffae" +
    "\033\uffae\034\uffae\035\uffae\036\uffae\040\uffae\043\uffae\044" +
    "\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae" +
    "\053\uffae\054\uffae\055\uffae\056\uffae\067\uffae\102\uffae\103" +
    "\uffae\104\uffae\105\uffae\001\002\000\010\003\060\020\064" +
    "\023\u0166\001\002\000\112\003\uffac\004\uffac\005\uffac\006" +
    "\uffac\010\uffac\011\uffac\012\uffac\013\uffac\020\uffac\021\uffac" +
    "\025\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035" +
    "\uffac\036\uffac\040\uffac\043\uffac\044\uffac\045\uffac\046\uffac" +
    "\047\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055" +
    "\uffac\056\uffac\067\uffac\102\uffac\103\uffac\104\uffac\105\uffac" +
    "\001\002\000\006\054\072\106\073\001\002\000\022\003" +
    "\uffc1\020\uffc1\023\uffc1\032\uffc1\054\uffc1\067\uffc1\102\uffc1" +
    "\103\uffc1\001\002\000\030\003\uffd7\004\uffd7\005\uffd7\006" +
    "\uffd7\010\uffd7\020\uffd7\032\uffd7\054\uffd7\055\uffd7\067\uffd7" +
    "\102\uffd7\001\002\000\012\017\u0173\026\uffeb\027\uffeb\104" +
    "\uffeb\001\002\000\004\054\u0176\001\002\000\010\026\030" +
    "\027\027\104\uffef\001\002\000\004\104\uffee\001\002\000" +
    "\012\017\u0173\026\uffeb\027\uffeb\104\uffeb\001\002\000\010" +
    "\026\uffec\027\uffec\104\uffec\001\002\000\012\017\u0173\026" +
    "\uffeb\027\uffeb\104\uffeb\001\002\000\010\026\030\027\027" +
    "\104\uffef\001\002\000\004\104\uffed\001\002\000\004\024" +
    "\uffea\001\002\000\004\024\uffe8\001\002\000\040\003\uffe4" +
    "\004\uffe4\005\uffe4\006\uffe4\010\uffe4\020\uffe4\024\uffe4\032" +
    "\uffe4\045\uffe4\046\uffe4\047\uffe4\054\uffe4\055\uffe4\067\uffe4" +
    "\102\uffe4\001\002\000\040\003\uffe2\004\uffe2\005\uffe2\006" +
    "\uffe2\010\uffe2\020\uffe2\024\uffe2\032\uffe2\045\uffe2\046\uffe2" +
    "\047\uffe2\054\uffe2\055\uffe2\067\uffe2\102\uffe2\001\002\000" +
    "\004\024\uffe6\001\002\000\004\024\uffe9\001\002\000\004" +
    "\002\001\001\002\000\010\003\060\017\u0183\020\064\001" +
    "\002\000\004\054\u0187\001\002\000\016\016\005\045\ufffc" +
    "\046\ufffc\047\ufffc\050\ufffc\051\ufffc\001\002\000\016\016" +
    "\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa\001\002" +
    "\000\014\045\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe\001" +
    "\002\000\010\003\060\017\u0183\020\064\001\002\000\016" +
    "\016\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\001" +
    "\002\000\004\054\u018b\001\002\000\004\054\ufff9\001\002" +
    "\000\010\003\060\017\u018c\020\064\001\002\000\006\054" +
    "\u0190\065\u0191\001\002\000\016\016\ufff6\045\ufff6\046\ufff6" +
    "\047\ufff6\050\ufff6\051\ufff6\001\002\000\016\016\005\045" +
    "\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc\001\002\000\014" +
    "\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\001\002\000" +
    "\010\003\060\017\u018c\020\064\001\002\000\006\003\060" +
    "\020\064\001\002\000\016\016\ufff7\045\ufff7\046\ufff7\047" +
    "\ufff7\050\ufff7\051\ufff7\001\002\000\016\016\ufff4\045\ufff4" +
    "\046\ufff4\047\ufff4\050\ufff4\051\ufff4\001\002\000\016\016" +
    "\ufff5\045\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0192\000\010\002\006\003\007\004\003\001\001\000" +
    "\002\001\001\000\004\107\u0188\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\017\015\010\016\014\017" +
    "\016\001\001\000\006\012\u017f\016\u017e\001\001\000\002" +
    "\001\001\000\004\052\u017c\001\001\000\002\001\001\000" +
    "\006\011\u017a\015\u017b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\053\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\131\025\001\001\000\004\022\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\014\035" +
    "\015\032\016\034\025\033\042\036\001\001\000\006\016" +
    "\034\042\u0170\001\001\000\034\005\064\020\041\021\047" +
    "\024\055\030\061\031\046\032\040\033\056\034\050\035" +
    "\062\040\060\044\052\143\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\134\u016e\001\001" +
    "\000\020\026\215\027\201\037\u0164\073\211\124\174\127" +
    "\217\130\177\001\001\000\004\136\u0162\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\141\110\146\u014d\001\001\000\004\133\u015a" +
    "\001\001\000\004\137\u0158\001\001\000\004\140\u0156\001" +
    "\001\000\004\132\u0154\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\005\064\021\u014c\024\055\044\052\143" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\144\101\001\001\000" +
    "\004\135\067\001\001\000\004\051\070\001\001\000\002" +
    "\001\001\000\004\067\077\001\001\000\002\001\001\000" +
    "\004\142\074\001\001\000\004\051\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\145\103\001\001\000\002" +
    "\001\001\000\022\030\061\031\046\032\040\033\056\034" +
    "\050\035\062\040\106\045\105\001\001\000\002\001\001" +
    "\000\004\147\112\001\001\000\004\141\110\001\001\000" +
    "\004\051\111\001\001\000\002\001\001\000\004\046\114" +
    "\001\001\000\022\030\061\031\046\032\040\033\056\034" +
    "\050\035\062\040\106\045\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\030\143\031" +
    "\126\032\120\033\137\034\127\061\144\062\136\063\140" +
    "\066\123\071\133\074\142\075\145\076\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\026\215\027\201" +
    "\037\u0145\073\211\124\174\127\217\130\177\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\065" +
    "\u0117\077\u0111\001\001\000\004\065\u0105\001\001\000\002" +
    "\001\001\000\004\050\376\001\001\000\004\005\375\001" +
    "\001\000\034\030\143\031\126\032\120\033\137\034\127" +
    "\061\144\062\136\063\374\066\123\071\133\074\142\075" +
    "\145\076\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\030\143\031\126\032\120\033\137\034\127\071" +
    "\372\001\001\000\006\005\064\024\371\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\047" +
    "\357\001\001\000\002\001\001\000\020\030\156\031\151" +
    "\032\154\033\153\034\152\100\161\102\155\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\026\215\027\201\037\220\073\211\101" +
    "\175\124\174\127\217\130\177\001\001\000\002\001\001" +
    "\000\004\103\165\001\001\000\002\001\001\000\006\005" +
    "\064\024\162\001\001\000\002\001\001\000\010\005\064" +
    "\024\172\104\171\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\103\167\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\026\215\027\201\037\264\056" +
    "\355\073\211\124\174\127\217\130\177\001\001\000\010" +
    "\043\352\111\304\121\353\001\001\000\002\001\001\000" +
    "\004\050\351\001\001\000\004\057\335\001\001\000\022" +
    "\026\215\027\201\037\301\073\211\120\275\124\174\127" +
    "\217\130\177\001\001\000\020\026\215\027\201\037\272" +
    "\073\211\124\174\127\217\130\177\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\116\236" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\221" +
    "\001\001\000\004\076\222\001\001\000\002\001\001\000" +
    "\004\050\225\001\001\000\034\030\143\031\126\032\120" +
    "\033\137\034\127\061\144\062\136\063\226\066\123\071" +
    "\133\074\142\075\145\076\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\055\242\117\244\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\026\215\027\201\037\256\073" +
    "\211\123\255\124\174\127\217\130\177\001\001\000\002" +
    "\001\001\000\022\026\215\027\201\036\246\037\250\073" +
    "\211\124\174\127\217\130\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\252\001\001\000\022\026" +
    "\215\027\201\036\253\037\250\073\211\124\174\127\217" +
    "\130\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\122\260\001\001\000\002\001\001\000\022\026\215\027" +
    "\201\037\264\056\263\073\211\124\174\127\217\130\177" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\064" +
    "\266\001\001\000\020\026\215\027\201\037\270\073\211" +
    "\124\174\127\217\130\177\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\064\271\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\060\317\111\304\121" +
    "\324\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\026\215\027\201\037\326\073\211" +
    "\124\174\127\217\130\177\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\026\215\027\201" +
    "\037\325\073\211\124\174\127\217\130\177\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\026\215\027\201" +
    "\037\330\073\211\124\174\127\217\130\177\001\001\000" +
    "\002\001\001\000\020\026\215\027\201\037\332\073\211" +
    "\124\174\127\217\130\177\001\001\000\002\001\001\000" +
    "\004\054\346\001\001\000\020\026\215\027\201\037\343" +
    "\073\211\124\174\127\217\130\177\001\001\000\002\001" +
    "\001\000\024\026\215\027\201\036\337\037\250\073\211" +
    "\110\341\124\174\127\217\130\177\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\057\345\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\057\350\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\026" +
    "\215\027\201\037\354\073\211\124\174\127\217\130\177" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\026\215\027\201\037\361" +
    "\073\211\124\174\127\217\130\177\001\001\000\004\115" +
    "\363\001\001\000\020\026\215\027\201\037\365\073\211" +
    "\124\174\127\217\130\177\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\115\366\001\001\000\002\001\001" +
    "\000\004\047\370\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\026\215\027\201\037\u0101\073\211\124\174\127\217" +
    "\130\177\001\001\000\002\001\001\000\004\005\u0103\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\065\u0109\070\u0107\001\001\000\002\001\001\000" +
    "\022\026\215\027\201\037\u010c\072\u010a\073\211\124\174" +
    "\127\217\130\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\115\u010d\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\026\215\027\201\037" +
    "\u011e\073\211\124\174\127\217\130\177\001\001\000\024" +
    "\026\215\027\201\036\337\037\250\073\211\110\u011d\124" +
    "\174\127\217\130\177\001\001\000\002\001\001\000\020" +
    "\026\215\027\201\037\u011a\073\211\124\174\127\217\130" +
    "\177\001\001\000\002\001\001\000\004\065\u0119\001\001" +
    "\000\020\026\215\027\201\037\u0118\073\211\124\174\127" +
    "\217\130\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\065\u011c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\026\215\027\201\037\u0120\073" +
    "\211\124\174\127\217\130\177\001\001\000\002\001\001" +
    "\000\004\050\u0122\001\001\000\004\105\u0124\001\001\000" +
    "\004\106\u0127\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\030\143\031\126\032\120\033\137\034\127\061" +
    "\144\062\136\063\u0130\066\123\071\133\074\142\075\145" +
    "\076\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\026\215\027\201\037\u012a\073\211\124\174\127\217" +
    "\130\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\030\143\031\126\032\120\033\137\034\127\061\144" +
    "\062\136\063\u012d\066\123\071\133\074\142\075\145\076" +
    "\124\001\001\000\002\001\001\000\004\105\u012f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\026\215\027\201\037\u0133\073\211\124\174\127\217" +
    "\130\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\112\u0137\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\026\215\027\201\036\u0139\037\250\073\211\124" +
    "\174\127\217\130\177\001\001\000\002\001\001\000\034" +
    "\030\143\031\126\032\120\033\137\034\127\061\u013e\066" +
    "\u013c\071\133\074\142\075\u013f\076\124\113\u013b\114\u013d" +
    "\001\001\000\004\112\u0141\001\001\000\002\001\001\000" +
    "\034\030\143\031\126\032\120\033\137\034\127\061\u013e" +
    "\066\u013c\071\133\074\142\075\u013f\076\124\113\u0140\114" +
    "\u013d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\030" +
    "\143\031\126\032\120\033\137\034\127\061\u013e\066\u013c" +
    "\071\133\074\142\075\u013f\076\124\113\u0144\114\u013d\001" +
    "\001\000\002\001\001\000\004\005\u0146\001\001\000\002" +
    "\001\001\000\020\026\215\027\201\037\u0148\073\211\124" +
    "\174\127\217\130\177\001\001\000\002\001\001\000\004" +
    "\050\u014a\001\001\000\002\001\001\000\004\146\u014d\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\030\061" +
    "\031\046\032\040\033\056\034\050\035\062\040\106\045" +
    "\u014f\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\030\143\031\126\032\120\033\137\034\127\061\144\062" +
    "\136\063\u0152\066\123\071\133\074\142\075\145\076\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\014" +
    "\u0155\015\032\016\034\025\033\042\036\001\001\000\002" +
    "\001\001\000\004\051\u0157\001\001\000\002\001\001\000" +
    "\004\051\u0159\001\001\000\002\001\001\000\014\014\u015b" +
    "\015\032\016\034\025\033\042\036\001\001\000\002\001" +
    "\001\000\022\030\061\031\046\032\040\033\056\034\050" +
    "\035\062\040\106\045\u015d\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\030\143\031\126\032\120\033\137" +
    "\034\127\061\144\062\136\063\u0160\066\123\071\133\074" +
    "\142\075\145\076\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\051\u0163\001\001\000\002\001\001\000" +
    "\006\005\u0167\125\u0166\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\u0169\126\u016b\001" +
    "\001\000\002\001\001\000\020\026\215\027\201\037\u016c" +
    "\073\211\124\174\127\217\130\177\001\001\000\002\001" +
    "\001\000\006\005\u0167\125\u016d\001\001\000\002\001\001" +
    "\000\004\051\u016f\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\u0173\001\001\000\002\001\001\000\004" +
    "\022\u0174\001\001\000\002\001\001\000\004\023\u0176\001" +
    "\001\000\002\001\001\000\004\023\u0178\001\001\000\004" +
    "\022\u0179\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\u0184\010\u0183\001\001\000\002\001\001\000\004\004\u0185" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\u0184\010\u0187\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\u018c\006\u018d\001\001\000" +
    "\004\007\u0191\001\001\000\002\001\001\000\004\004\u018e" +
    "\001\001\000\002\001\001\000\006\005\u018c\006\u0193\001" +
    "\001\000\004\005\u0192\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        private classObject classFinalSystax ;
        private tipoDatos typeDate = null;
        private tipoDatos typeMethods = null;


        // variables auxiliares
        private Symbol s;
        private String nameClass;
        private String nameVariable;
        private String nameMethods;

        //listas para guardar
        private List<metodoObject> ListMethods =new ArrayList<>();
        private List<VariableObject> ListVariable= new ArrayList<>();
        private List<VariableObject> listParameters= new ArrayList<>();

        //Errores
        private int cantidadErrores= 0;

    //parser
        parser(Lexico lexico){
            super(lexico);
        }

// errores
        public void syntax_error(Symbol cur_token) {
            cantidadErrores++;

            NewJFrame.jTextArea1.append("\n"+cantidadErrores+" - Clase<"+nameClass+"> en simbolo<" + sym.terminalNames[cur_token.sym]+String.format(">posicion: <%d>, <%d>", (cur_token.left+1), (cur_token.right+1)));
        }


     
        public Symbol getSymbol(){
            return this.s;
        }

// metodos
       private void addVariable (int aleft,int aright){
            ListVariable.add(new VariableObject(typeDate,aright+1,aleft+1,nameVariable));
            typeDate=null;
            nameVariable = "";
        }
        private void addMethods (int aleft,int aright){
            if(typeMethods ==null){
                typeMethods = tipoDatos.CONSTRUCTOR;
            }
            ListMethods.add(new metodoObject(typeMethods, listParameters, (aright+1), (aleft+1), nameMethods));
            listParameters =  new ArrayList<>();
            typeMethods=null;
            nameVariable = "";
        }
        private void addMethodsParameters (int aleft,int aright){
      
            listParameters.add(new VariableObject(typeDate,aright+1,aleft+1,nameVariable));
            typeDate=null;
            nameVariable = "";
        }


        public void arrayType() {
        switch (typeDate) {
           
            case INT:
                typeDate = tipoDatos.ARRAYINT;
                break;
            case DOUBLE:
                typeDate = tipoDatos.ARRAYDOUBLE;
                break;
            case CHAR:
                typeDate = tipoDatos.ARRAYCHAR;
                break;
            case BOOLEAN:
                typeDate = tipoDatos.ARRAYBOOLEAN;
                break;
            case STRING:
                typeDate = tipoDatos.ARRAYSTRING;
                break;
            case OBJECT:
                typeDate = tipoDatos.ARRAYOBJECT;
                break;
            default:
                break;
        }
    }

    //metodos
    public String getNameClass(){
        return this.nameClass;
    }
        public int getcantidadErrores(){
            return this.cantidadErrores;
        }
        public List<VariableObject> getListVariable() {
        return ListVariable;
        }
        public List<metodoObject> getListMethods() {
        return ListMethods;
        }
        public classObject getClassSyntax(){
            return this.classFinalSystax;
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= inicioSintaxis clase 
            {
              Object RESULT =null;
		classFinalSystax = new classObject(nameClass, ListMethods, ListVariable, null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicioSintaxis ::= importSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioSintaxis",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicioSintaxis ::= PACKAGE ID pc importSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioSintaxis",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // importSintaxis ::= IMPORT staticImport ID sp importSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("importSintaxis",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // importSintaxis ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("importSintaxis",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // pc ::= PUNTO ID pc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pc",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // pc ::= puntoComaSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pc",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // staticImport ::= STATIC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("staticImport",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // staticImport ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("staticImport",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sp ::= PUNTO sintaxisMayorImportaciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sp ::= puntoComaSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sintaxisMayorImportaciones ::= ID sp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sintaxisMayorImportaciones",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sintaxisMayorImportaciones ::= MULTIPLICACION puntoComaSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sintaxisMayorImportaciones",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // puntoComaSintaxis ::= PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("puntoComaSintaxis",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // puntoComaSintaxis ::= error 
            {
              Object RESULT =null;
		NewJFrame.jTextArea1.append("\n"+cantidadErrores+"Error en clase: "+nameClass+" lexema:" + sym.terminalNames[cur_token.sym]);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("puntoComaSintaxis",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$0 ::= 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
nameClass = identificador.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",87, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // clase ::= v CLASS ID NT$0 herenciaSintaxis LLAVESABIERTO internoClase LLAVESCERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // herenciaSintaxis ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("herenciaSintaxis",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // herenciaSintaxis ::= EXNTENDS ID secuenciIDHRE herenciaSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("herenciaSintaxis",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // herenciaSintaxis ::= IMPLEMENTS ID secuenciIDHRE herenciaSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("herenciaSintaxis",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // secuenciIDHRE ::= PUNTO ID secuenciIDHRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("secuenciIDHRE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // secuenciIDHRE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("secuenciIDHRE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // v ::= staticFinalSintaxisEspecifica vfactorizadoStatic 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("v",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // v ::= visibilidadTerminal vfactorizadoVC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("v",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // vfactorizadoStatic ::= visibilidadTerminal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vfactorizadoStatic",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // vfactorizadoStatic ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vfactorizadoStatic",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // vfactorizadoVC ::= staticFinalSintaxisEspecifica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vfactorizadoVC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // vfactorizadoVC ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vfactorizadoVC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // staticFinalSintaxisEspecifica ::= STATIC staticOpcionInclusion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("staticFinalSintaxisEspecifica",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // staticFinalSintaxisEspecifica ::= FINAL finalOpcionInclusion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("staticFinalSintaxisEspecifica",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // staticOpcionInclusion ::= FINAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("staticOpcionInclusion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // staticOpcionInclusion ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("staticOpcionInclusion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // finalOpcionInclusion ::= STATIC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("finalOpcionInclusion",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // finalOpcionInclusion ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("finalOpcionInclusion",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // visibilidadTerminal ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("visibilidadTerminal",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // visibilidadTerminal ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("visibilidadTerminal",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // visibilidadTerminal ::= PROTECTED 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("visibilidadTerminal",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // internoClase ::= visionEspecificaDeClases internoClaseFa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("internoClase",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // internoClase ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("internoClase",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // visualizacionClaseFinal ::= staticFinalSintaxisEspecifica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("visualizacionClaseFinal",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // visualizacionClaseFinal ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("visualizacionClaseFinal",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // visionEspecificaDeClases ::= visibilidadTerminal visualizacionClaseFinal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("visionEspecificaDeClases",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // visionEspecificaDeClases ::= visualizacionClaseFinal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("visionEspecificaDeClases",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // internoClaseFa ::= variableID ingresoOpcionesClases 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("internoClaseFa",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // internoClaseFa ::= ingresoOpcionesClases 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("internoClaseFa",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$1 ::= 
            {
              Object RESULT =null;
int izquierda = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
    int derecha = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
    addVariable(izquierda,derecha);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",88, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ingresoOpcionesClases ::= ingresoNuevasVariables NT$1 internoClase 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ingresoOpcionesClases",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$2 ::= 
            {
              Object RESULT =null;
int izquierda = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
    int derecha = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
    addMethods(izquierda,derecha);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ingresoOpcionesClases ::= metodoSintaxis NT$2 internoClase 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ingresoOpcionesClases",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipoDatosSintaxis ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDatosSintaxis",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipoDatosSintaxis ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDatosSintaxis",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipoDatosSintaxis ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDatosSintaxis",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipoDatosSintaxis ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDatosSintaxis",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipoDatosSintaxis ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDatosSintaxis",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tipoDatosSintaxis ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDatosSintaxis",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tipoDatosSintaxis ::= error 
            {
              Object RESULT =null;
		Frontend.NewJFrame.jTextArea1.append("\n"+cantidadErrores+"  Error en clase: "+nameClass+" lexema:" + sym.terminalNames[cur_token.sym]);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDatosSintaxis",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // variableID ::= DoubleTipoDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableID",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // variableID ::= CharTipoDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableID",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // variableID ::= BooleanTipoDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableID",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // variableID ::= StringTipoDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableID",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // variableID ::= ObjectTipoDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableID",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // variableID ::= intTipoDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableID",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$3 ::= 
            {
              Object RESULT =null;
typeDate = tipoDatos.INT;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",90, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // intTipoDato ::= INT NT$3 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("intTipoDato",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$4 ::= 
            {
              Object RESULT =null;
typeDate = tipoDatos.DOUBLE;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",91, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DoubleTipoDato ::= DOUBLE NT$4 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DoubleTipoDato",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$5 ::= 
            {
              Object RESULT =null;
typeDate = tipoDatos.CHAR;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",92, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CharTipoDato ::= CHAR NT$5 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CharTipoDato",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$6 ::= 
            {
              Object RESULT =null;
typeDate = tipoDatos.BOOLEAN;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",93, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // BooleanTipoDato ::= BOOLEAN NT$6 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BooleanTipoDato",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$7 ::= 
            {
              Object RESULT =null;
typeDate = tipoDatos.STRING;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",94, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // StringTipoDato ::= STRING NT$7 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StringTipoDato",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$8 ::= 
            {
              Object RESULT =null;
typeDate = tipoDatos.OBJECT;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ObjectTipoDato ::= ID NT$8 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ObjectTipoDato",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // onlyIDArray ::= ID arrayID 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		nameVariable = identificador.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("onlyIDArray",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$9 ::= 
            {
              Object RESULT =null;
arrayType();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",96, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // onlyIDArray ::= CORCHETEABIERTO CORCHETECERRADO NT$9 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("onlyIDArray",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // arrayID ::= CORCHETEABIERTO CORCHETECERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayID",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // arrayID ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayID",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ingresoNuevasVariables ::= IGUAL opcionesDatosIngreso variablesConsecutivas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ingresoNuevasVariables",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ingresoNuevasVariables ::= puntoComaSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ingresoNuevasVariables",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // opcionesDatosIngreso ::= tDAtosFacto tDatosPrima 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesDatosIngreso",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // variablesConsecutivas ::= COMA ID variablesConsecutivasFactores 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesConsecutivas",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // variablesConsecutivas ::= puntoComaSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesConsecutivas",83, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // variablesConsecutivasFactores ::= IGUAL opcionesDatosIngreso variablesConsecutivas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesConsecutivasFactores",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // variablesConsecutivasFactores ::= puntoComaSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesConsecutivasFactores",84, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // tDAtosFacto ::= charSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tDAtosFacto",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // tDAtosFacto ::= LLAVESABIERTO lCon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tDAtosFacto",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // tDAtosFacto ::= NEW tipoDatosSintaxis newParentesisOCochtes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tDAtosFacto",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // tDAtosFacto ::= funcionesBooleanas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tDAtosFacto",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // tDAtosFacto ::= expresionesEspecificasElementales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tDAtosFacto",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // tDAtosFacto ::= usarOBJECT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tDAtosFacto",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // tDAtosFacto ::= Casting 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tDAtosFacto",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // tDAtosFacto ::= ADMIRACION opcionesDatosIngreso 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tDAtosFacto",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // tDAtosFacto ::= error 
            {
              Object RESULT =null;
		NewJFrame.jTextArea1.append("\n"+cantidadErrores+"  Error en clase: "+nameClass+" lexema:" + sym.terminalNames[cur_token.sym]);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tDAtosFacto",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // funcionesBooleanas ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionesBooleanas",85, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // funcionesBooleanas ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionesBooleanas",85, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresionesEspecificasElementales ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesEspecificasElementales",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresionesEspecificasElementales ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesEspecificasElementales",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresionesEspecificasElementales ::= TEXT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesEspecificasElementales",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // tDatosPrima ::= operadoresTipos opcionesDatosIngreso 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tDatosPrima",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // tDatosPrima ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tDatosPrima",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Casting ::= PARENTESISABIERTO opcionesDatosIngreso PARENTESISCERRADO tDatosDespues 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Casting",82, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Casting ::= PARENTESISABIERTO typeVaribleSimple PARENTESISCERRADO opcionesDatosIngreso 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Casting",82, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // tDatosDespues ::= operadoresTipos opcionesDatosIngreso 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tDatosDespues",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // tDatosDespues ::= INTERO opcionesDatosIngreso DOBLE_PUNTO opcionesDatosIngreso 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tDatosDespues",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // tDatosDespues ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tDatosDespues",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // typeVaribleSimple ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVaribleSimple",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // typeVaribleSimple ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVaribleSimple",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // typeVaribleSimple ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVaribleSimple",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // typeVaribleSimple ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVaribleSimple",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // typeVaribleSimple ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeVaribleSimple",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // operadoresTipos ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadoresTipos",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // operadoresTipos ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadoresTipos",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // operadoresTipos ::= DOUBLE_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadoresTipos",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // operadoresTipos ::= MENOR_Q_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadoresTipos",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // operadoresTipos ::= MAYOR_Q_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadoresTipos",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // operadoresTipos ::= MENOR_Q 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadoresTipos",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // operadoresTipos ::= MAYOR_Q 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadoresTipos",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // operadoresTipos ::= ONEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadoresTipos",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // operadoresTipos ::= ONEO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadoresTipos",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // operadoresTipos ::= ADMIRACION_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadoresTipos",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // operadoresTipos ::= operadoresAritmeticos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadoresTipos",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // operadoresAritmeticos ::= SUMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadoresAritmeticos",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // operadoresAritmeticos ::= RESTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadoresAritmeticos",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // operadoresAritmeticos ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadoresAritmeticos",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // operadoresAritmeticos ::= DIVISION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadoresAritmeticos",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // charSintaxis ::= SIMPLE_COMILLA CARACTER SIMPLE_COMILLA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("charSintaxis",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // newParentesisOCochtes ::= parametrosSintaxisGeneral 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("newParentesisOCochtes",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // newParentesisOCochtes ::= CORCHETEABIERTO tDatosserietDatos CORCHETECERRADO serietDatos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("newParentesisOCochtes",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // tDatosserietDatos ::= opcionesDatosIngreso 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tDatosserietDatos",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // tDatosserietDatos ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tDatosserietDatos",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // serietDatos ::= LLAVESABIERTO lCon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("serietDatos",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // serietDatos ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("serietDatos",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // parametrosSintaxisGeneral ::= PARENTESISABIERTO parametrosConsecutivosOBjetos PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosSintaxisGeneral",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // parametrosSintaxisGeneral ::= PARENTESISABIERTO PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosSintaxisGeneral",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // parametrosConsecutivosOBjetos ::= opcionesDatosIngreso objectInst 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosConsecutivosOBjetos",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // objectInst ::= COMA parametrosConsecutivosOBjetos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("objectInst",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // objectInst ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("objectInst",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // lCon ::= opcionesDatosIngreso lConFact LLAVESCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lCon",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // lCon ::= LLAVESCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lCon",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // lConFact ::= COMA opcionesDatosIngreso lConFact 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lConFact",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // lConFact ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lConFact",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // usarOBJECT ::= ID idDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("usarOBJECT",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // idDatoFac ::= ID idDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("idDatoFac",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // idDato ::= PUNTO idDatoFac 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("idDato",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // idDato ::= CORCHETEABIERTO opcionesDatosIngreso CORCHETECERRADO idDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("idDato",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // idDato ::= PARENTESISABIERTO factoIDATO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("idDato",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // idDato ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("idDato",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // factoIDATO ::= parametrosConsecutivosOBjetos PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factoIDATO",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // factoIDATO ::= PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factoIDATO",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // NT$10 ::= 
            {
              Object RESULT =null;
nameMethods=nameVariable;typeMethods = typeDate;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",97, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // metodoSintaxis ::= NT$10 PARENTESISABIERTO pMetodoS PARENTESISCERRADO LLAVESABIERTO localMetodo LLAVESCERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodoSintaxis",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // NT$11 ::= 
            {
              Object RESULT =null;
typeMethods = tipoDatos.VOID;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",98, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
nameMethods = a.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",99, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // metodoSintaxis ::= VOID NT$11 ID NT$12 PARENTESISABIERTO pMetodoS PARENTESISCERRADO LLAVESABIERTO localMetodo LLAVESCERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodoSintaxis",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // NT$13 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
nameMethods = a.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",100, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // metodoSintaxis ::= ID NT$13 PARENTESISABIERTO pMetodoS PARENTESISCERRADO LLAVESABIERTO localMetodo LLAVESCERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodoSintaxis",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // NT$14 ::= 
            {
              Object RESULT =null;
int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
            int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
            addMethodsParameters(aleft,aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",101, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // pMetodoS ::= variableID NT$14 pMetodoSP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pMetodoS",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // pMetodoS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pMetodoS",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // pMetodoSP ::= COMA pMetodoS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pMetodoSP",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // pMetodoSP ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pMetodoSP",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // localMetodo ::= local localMetodo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("localMetodo",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // localMetodo ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("localMetodo",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // local ::= variableLocal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // local ::= SentenciasControlSintaxisGeneral 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // local ::= salidasOpciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // variableLocal ::= variableLocalFinal ingresoNuevasVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableLocal",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // variableLocalFinal ::= FINAL variableIDLocal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableLocalFinal",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // variableLocalFinal ::= variableIDLocal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableLocalFinal",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // variableLocalFinal ::= usarVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableLocalFinal",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // variableLocalFinal ::= salidasOpciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableLocalFinal",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // variableIDLocal ::= DoubleTipoDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableIDLocal",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // variableIDLocal ::= CharTipoDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableIDLocal",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // variableIDLocal ::= BooleanTipoDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableIDLocal",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // variableIDLocal ::= StringTipoDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableIDLocal",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // variableIDLocal ::= intTipoDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableIDLocal",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // usarVariable ::= ID OperadoresIncrementales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("usarVariable",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // usarVariable ::= THIS loclaMetodFacto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("usarVariable",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // usarVariable ::= SUPER soloId PARENTESISABIERTO opcionesDatosIngreso secuenciDatos PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("usarVariable",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // soloId ::= PUNTO ID soloId 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("soloId",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // soloId ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("soloId",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // secuenciDatos ::= COMA opcionesDatosIngreso secuenciDatos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("secuenciDatos",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // secuenciDatos ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("secuenciDatos",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // OperadoresIncrementales ::= CREMENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadoresIncrementales",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // OperadoresIncrementales ::= SUMA_IGUAL opcionesDatosIngreso 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadoresIncrementales",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // OperadoresIncrementales ::= INCREMENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadoresIncrementales",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // OperadoresIncrementales ::= RESTA_IGUAL opcionesDatosIngreso 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadoresIncrementales",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // OperadoresIncrementales ::= ID loclaMetodFacto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadoresIncrementales",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // OperadoresIncrementales ::= loclaMetodFacto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadoresIncrementales",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // OperadoresIncrementales ::= CORCHETEABIERTO opcionesDatosIngreso CORCHETECERRADO loclaMetodFacto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadoresIncrementales",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // OperadoresIncrementales ::= PARENTESISABIERTO factoIDATO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadoresIncrementales",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // loclaMetodFacto ::= PUNTO ID variableObjectUsarCrear 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loclaMetodFacto",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // loclaMetodFacto ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loclaMetodFacto",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // variableObjectUsarCrear ::= PARENTESISABIERTO variableSet 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableObjectUsarCrear",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // variableObjectUsarCrear ::= loclaMetodFacto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableObjectUsarCrear",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // variableSet ::= opcionesDatosIngreso secuenciDatos PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableSet",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // variableSet ::= PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableSet",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // salidasOpciones ::= BREAK puntoComaSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("salidasOpciones",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // salidasOpciones ::= RETURN opcionesDatosIngreso puntoComaSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("salidasOpciones",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // SentenciasControlSintaxisGeneral ::= WHILE PARENTESISABIERTO opcionesDatosIngreso PARENTESISCERRADO realicarSentenciasControlSintaxisGeneral 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciasControlSintaxisGeneral",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // SentenciasControlSintaxisGeneral ::= DO realicarSentenciasControlSintaxisGeneral WHILE PARENTESISABIERTO opcionesDatosIngreso PARENTESISCERRADO puntoComaSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciasControlSintaxisGeneral",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // SentenciasControlSintaxisGeneral ::= IF PARENTESISABIERTO opcionesDatosIngreso PARENTESISCERRADO realicarSentenciasControlSintaxisGeneral sentenciaElse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciasControlSintaxisGeneral",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // SentenciasControlSintaxisGeneral ::= SWITCH PARENTESISABIERTO opcionesDatosIngreso PARENTESISCERRADO LLAVESABIERTO SwitchSintaxisGeneral LLAVESCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciasControlSintaxisGeneral",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // SentenciasControlSintaxisGeneral ::= FOR PARENTESISABIERTO inializarVariable ForSintaxisGeneral 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciasControlSintaxisGeneral",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // realicarSentenciasControlSintaxisGeneral ::= LLAVESABIERTO localMetodo LLAVESCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("realicarSentenciasControlSintaxisGeneral",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // SwitchSintaxisGeneral ::= CASE parametrosConsecutivosOBjetos DOBLE_PUNTO SwitchEspecificoSintaxis SwitchSintaxisGeneral 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SwitchSintaxisGeneral",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // SwitchSintaxisGeneral ::= DEFAULT DOBLE_PUNTO SwitchEspecificoSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SwitchSintaxisGeneral",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // SwitchSintaxisGeneral ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SwitchSintaxisGeneral",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // SwitchEspecificoSintaxis ::= declaracionesSwitch SwitchEspecificoSintaxis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SwitchEspecificoSintaxis",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // SwitchEspecificoSintaxis ::= salidasOpciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SwitchEspecificoSintaxis",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // declaracionesSwitch ::= variableLocal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesSwitch",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // declaracionesSwitch ::= SentenciasControlSintaxisGeneral 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesSwitch",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // ForSintaxisGeneral ::= PARENTESISCERRADO realicarSentenciasControlSintaxisGeneral 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ForSintaxisGeneral",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // ForSintaxisGeneral ::= opcionesDatosIngreso puntoComaSintaxis usarVariable PARENTESISCERRADO realicarSentenciasControlSintaxisGeneral 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ForSintaxisGeneral",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // inializarVariable ::= variableIDFor ingresoNuevasVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inializarVariable",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // inializarVariable ::= ID forVariableId 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inializarVariable",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // variableIDFor ::= DoubleTipoDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableIDFor",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // variableIDFor ::= CharTipoDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableIDFor",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // variableIDFor ::= BooleanTipoDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableIDFor",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // variableIDFor ::= StringTipoDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableIDFor",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // variableIDFor ::= intTipoDato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableIDFor",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // variableIDFor ::= error 
            {
              Object RESULT =null;
		NewJFrame.jTextArea1.append("\n"+cantidadErrores+"  Error en clase: "+nameClass+" lexema:" + sym.terminalNames[cur_token.sym]);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableIDFor",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // forVariableId ::= ID forVariableIdFac 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forVariableId",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // forVariableId ::= CORCHETEABIERTO CORCHETECERRADO forVariableId 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forVariableId",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // forVariableIdFac ::= DOBLE_PUNTO ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forVariableIdFac",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // forVariableIdFac ::= ingresoNuevasVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forVariableIdFac",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // sentenciaElse ::= ELSE sentenciaElseFac 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaElse",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // sentenciaElse ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaElse",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // sentenciaElseFac ::= LLAVESABIERTO localMetodo LLAVESCERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaElseFac",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // sentenciaElseFac ::= IF PARENTESISABIERTO opcionesDatosIngreso PARENTESISCERRADO LLAVESABIERTO localMetodo LLAVESCERRADO sentenciaElse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaElseFac",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // sentenciaElseFac ::= error 
            {
              Object RESULT =null;
		NewJFrame.jTextArea1.append("\n"+cantidadErrores+"  Error en clase: "+nameClass+" lexema:" + sym.terminalNames[cur_token.sym]);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaElseFac",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
