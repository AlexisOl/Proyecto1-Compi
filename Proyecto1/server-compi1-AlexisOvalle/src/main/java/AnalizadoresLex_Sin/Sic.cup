package AnalizadoresLex_Sin;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.Symbol;

import Frontend.*;

import Objects.tipoDatos;
import Objects.metodoObject;
import Objects.VariableObject;
import Objects.classObject;
    
    parser code {:

        private classObject classFinalSystax ;
        private tipoDatos typeDate = null;
        private tipoDatos typeMethods = null;


        // variables auxiliares
        private Symbol s;
        private String nameClass;
        private String nameVariable;
        private String nameMethods;

        //listas para guardar
        private List<metodoObject> ListMethods =new ArrayList<>();
        private List<VariableObject> ListVariable= new ArrayList<>();
        private List<VariableObject> listParameters= new ArrayList<>();

        //Errores
        private int cantidadErrores= 0;

    //parser
        parser(Lexico lexico){
            super(lexico);
        }

// errores
        public void syntax_error(Symbol cur_token) {
            cantidadErrores++;

            NewJFrame.jTextArea1.append("\n"+cantidadErrores+" - Clase<"+nameClass+"> en simbolo<" + sym.terminalNames[cur_token.sym]+String.format(">posicion: <%d>, <%d>", (cur_token.left+1), (cur_token.right+1)));
        }


     
        public Symbol getSymbol(){
            return this.s;
        }

// metodos
       private void addVariable (int aleft,int aright){
            ListVariable.add(new VariableObject(typeDate,aright+1,aleft+1,nameVariable));
            typeDate=null;
            nameVariable = "";
        }
        private void addMethods (int aleft,int aright){
            if(typeMethods ==null){
                typeMethods = tipoDatos.CONSTRUCTOR;
            }
            ListMethods.add(new metodoObject(typeMethods, listParameters, (aright+1), (aleft+1), nameMethods));
            listParameters =  new ArrayList<>();
            typeMethods=null;
            nameVariable = "";
        }
        private void addMethodsParameters (int aleft,int aright){
      
            listParameters.add(new VariableObject(typeDate,aright+1,aleft+1,nameVariable));
            typeDate=null;
            nameVariable = "";
        }


        public void arrayType() {
        switch (typeDate) {
           
            case INT:
                typeDate = tipoDatos.ARRAYINT;
                break;
            case DOUBLE:
                typeDate = tipoDatos.ARRAYDOUBLE;
                break;
            case CHAR:
                typeDate = tipoDatos.ARRAYCHAR;
                break;
            case BOOLEAN:
                typeDate = tipoDatos.ARRAYBOOLEAN;
                break;
            case STRING:
                typeDate = tipoDatos.ARRAYSTRING;
                break;
            case OBJECT:
                typeDate = tipoDatos.ARRAYOBJECT;
                break;
            default:
                break;
        }
    }

    //metodos
    public String getNameClass(){
        return this.nameClass;
    }
        public int getcantidadErrores(){
            return this.cantidadErrores;
        }
        public List<VariableObject> getListVariable() {
        return ListVariable;
        }
        public List<metodoObject> getListMethods() {
        return ListMethods;
        }
        public classObject getClassSyntax(){
            return this.classFinalSystax;
        }
:};
// ingreso de  terminales

terminal String INT,DOUBLE;
terminal String CHAR,CARACTER;
terminal String BOOLEAN,TRUE,FALSE,ADMIRACION,INTERO;

terminal PACKAGE,IMPORT, PUNTO,PUNTO_COMA,SIMPLE_COMILLA,DOBLE_PUNTO,COMA, CLASS,THIS, EXNTENDS,IMPLEMENTS,SUPER, NEW,VOID;
/*Sentencias*/

terminal FOR,WHILE,DO,IF,ELSE,SWITCH,CASE,DEFAULT,BREAK,RETURN;

/*visibilidad*/ 
terminal PRIVATE,PUBLIC,PROTECTED,FINAL,STATIC;
/****************************/

terminal String DECIMAL,ENTERO,ID,STRING,TEXT;

//operadores aritmeticos
terminal SUMA_IGUAL,SUMA,CREMENTO,INCREMENTO,RESTA_IGUAL,RESTA,MULTIPLICACION_IGUAL,MULTIPLICACION,MODULO_IGUAL,DIVISION_IGUAL,DIVISION;//OPERACION
terminal IGUAL,MODULO;//= 

/*SIMBOLOS OPERADOR RELACIONALES MENOR_Q*/
terminal TWOO,TWOY,DOUBLE_IGUAL,MENOR_Q_IGUAL,MAYOR_Q_IGUAL,MENOR_Q,MAYOR_Q,ONEY,ONEO,ADMIRACION_IGUAL;
/*Operadores de agupacion */
terminal PARENTESISABIERTO,PARENTESISCERRADO,LLAVESABIERTO,LLAVESCERRADO,CORCHETEABIERTO,CORCHETECERRADO;


// ingreso de no terminales
non terminal inicio,inicioSintaxis,importSintaxis,puntoComaSintaxis,sp,sintaxisMayorImportaciones,pc,vfactorizadoStatic,vfactorizadoVC;
/*LA CLASE   ingresoOpcionesClases */
non terminal clase,internoClase,visibilidadTerminal,staticFinalSintaxisEspecifica,v,internoClaseFa,ingresoOpcionesClases,herenciaSintaxis,secuenciIDHRE;
/*VARIABLE GLOBAL O ingresoNuevasVariables DE LA CALSE*/
non terminal ingresoNuevasVariables,visionEspecificaDeClases,charSintaxis,tDAtosFacto;
non terminal intTipoDato, DoubleTipoDato, CharTipoDato, BooleanTipoDato,StringTipoDato, ObjectTipoDato;
non terminal parametrosConsecutivosOBjetos,opcionesDatosIngreso,variableID,objectInst,visualizacionClaseFinal,tDatosPrima;
/*METODOS*/
non terminal metodoSintaxis,pMetodoS,pMetodoSP,soloId,realicarSentenciasControlSintaxisGeneral;
non terminal onlyIDArray,staticOpcionInclusion,finalOpcionInclusion;
non terminal idDatoFac ,parametrosSintaxisGeneral,lCon, idDato,tDatosDespues;
/*LOCAL METODO*/
non terminal variableLocal,local,localMetodo,lConFact,loclaMetodFacto,salidasOpciones,arrayID;
non terminal variableObjectUsarCrear,variableIDLocal,variableSet,usarOBJECT,variableLocalFinal;
/*SENTENCIAS DE CONTROLS*/
non terminal SentenciasControlSintaxisGeneral,usarVariable,OperadoresIncrementales;
non terminal variableIDFor,ForSintaxisGeneral,inializarVariable,forVariableId,forVariableIdFac;
non terminal sentenciaElse,sentenciaElseFac,staticImport,factoIDATO, operadoresAritmeticos;
non terminal SwitchSintaxisGeneral,SwitchEspecificoSintaxis,declaracionesSwitch;
non terminal secuenciDatos,tipoDatosSintaxis,newParentesisOCochtes,typeVaribleSimple,operadoresTipos;
non terminal serietDatos,tDatosserietDatos,Casting,variablesConsecutivas,variablesConsecutivasFactores, funcionesBooleanas, expresionesEspecificasElementales;



// formas de precedencia
precedence left SUMA, RESTA;
precedence left MULTIPLICACION, DIVISION;
precedence left MODULO,DIVISION;


precedence left DOUBLE_IGUAL,ADMIRACION_IGUAL;
precedence left MAYOR_Q_IGUAL,MENOR_Q;
precedence left MENOR_Q_IGUAL,MAYOR_Q;
precedence left TWOO,ONEO;
precedence left TWOY,ONEY;

// Inicio de las gramaticas -- INGRESO DE CLASE DE FORMA GENERAL
start with inicio;

inicio ::= 
inicioSintaxis clase {:classFinalSystax = new classObject(nameClass, ListMethods, ListVariable, null);:}
;

/*
Inicio de las sentencias
*/
inicioSintaxis ::= 
importSintaxis
| PACKAGE ID pc importSintaxis
;

//sintaxis basica de los imports
importSintaxis ::= 
    IMPORT staticImport ID sp importSintaxis
|
;

//SI VIENE MAS PUNTOS EN LA EXPORTACIOn
pc ::= PUNTO ID pc
| puntoComaSintaxis
;

staticImport ::= 
STATIC
|
;
// punto id, ; , punto * ; , punto id punto * ;

// fin de sintaxis de ingreso
sp ::= 
PUNTO sintaxisMayorImportaciones
| puntoComaSintaxis
;

sintaxisMayorImportaciones ::= 
  ID sp
 | MULTIPLICACION puntoComaSintaxis
;

//ingreso punto coma final sintaxis
puntoComaSintaxis ::=  
PUNTO_COMA
| error{:NewJFrame.jTextArea1.append("\n"+cantidadErrores+"Error en clase: "+nameClass+" lexema:" + sym.terminalNames[cur_token.sym]);:}
;
//-------------------------------------------------------------------------------------------


/*Ingreso de clases*/

clase ::= 
v CLASS ID:identificador {:nameClass = identificador.toString();:} herenciaSintaxis LLAVESABIERTO  internoClase  LLAVESCERRADO
;
/*sintaxis de herencia */
herenciaSintaxis ::= 
     
| EXNTENDS ID secuenciIDHRE herenciaSintaxis
| IMPLEMENTS ID secuenciIDHRE herenciaSintaxis
;
//---------------------------------------------



secuenciIDHRE ::= 
PUNTO ID secuenciIDHRE
|
;


//---------------------------------------------
v ::= 
    staticFinalSintaxisEspecifica vfactorizadoStatic
    | visibilidadTerminal vfactorizadoVC
;
vfactorizadoStatic ::= 
    visibilidadTerminal
    |
;

vfactorizadoVC ::= 
    staticFinalSintaxisEspecifica
    |
;
staticFinalSintaxisEspecifica ::=
    STATIC staticOpcionInclusion
    |FINAL finalOpcionInclusion
;
//-------------------------------------------------------------*

staticOpcionInclusion ::= 
    FINAL
    |
;

finalOpcionInclusion ::= 
    STATIC
    |
;

visibilidadTerminal ::= 
    PUBLIC
    | PRIVATE
    | PROTECTED
;
//-------------------------------------------------------------*



/*FIANAL VISIBILIDAD DE LAS CLASES*/
internoClase ::=
    visionEspecificaDeClases internoClaseFa
    | 
;

//visualizacion clases--------------------------------------------------------------------
visualizacionClaseFinal ::=
    staticFinalSintaxisEspecifica
    | 
;

visionEspecificaDeClases ::=
    visibilidadTerminal visualizacionClaseFinal 
    | visualizacionClaseFinal
;



internoClaseFa ::= 
    variableID ingresoOpcionesClases
    |ingresoOpcionesClases
;

//-------------------------------------------------------------------------------------------

ingresoOpcionesClases ::= 
    ingresoNuevasVariables
    {:int izquierda = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
    int derecha = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
    addVariable(izquierda,derecha);:} internoClase 

    | metodoSintaxis 
    {:int izquierda = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
    int derecha = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
    addMethods(izquierda,derecha);:} internoClase
;


//tipos de opciones de datos-------------------------------------------------------------------------
tipoDatosSintaxis ::= 
    STRING
    |INT
    |ID
    |DOUBLE
    |CHAR
    |BOOLEAN
    | error{:Frontend.NewJFrame.jTextArea1.append("\n"+cantidadErrores+"  Error en clase: "+nameClass+" lexema:" + sym.terminalNames[cur_token.sym]);:}
;

//Sentencias de control (tipos de datos)---------------------------------------------------------------

/*variables
*/
variableID ::= 
 
      DoubleTipoDato 
    | CharTipoDato 
    | BooleanTipoDato 
    | StringTipoDato 
    | ObjectTipoDato 
    | intTipoDato 
;


//sintaxis ESPECIFICA DE TIPOS DE DATOS------------------------------------------------------------
intTipoDato ::=
 INT {:typeDate = tipoDatos.INT;:} onlyIDArray
;

DoubleTipoDato ::= 
DOUBLE {:typeDate = tipoDatos.DOUBLE;:}  onlyIDArray
;

CharTipoDato ::= 
CHAR {:typeDate = tipoDatos.CHAR;:} onlyIDArray
;
BooleanTipoDato ::=
BOOLEAN {:typeDate = tipoDatos.BOOLEAN;:} onlyIDArray
;

StringTipoDato ::= 
STRING {:typeDate = tipoDatos.STRING;:} onlyIDArray
;

ObjectTipoDato ::= 
ID {:typeDate = tipoDatos.OBJECT;:} onlyIDArray
;


//----------------------------------------------------------------------------------------------

//arreay [] | ID
onlyIDArray ::= 
ID:identificador arrayID {:nameVariable = identificador.toString();:}
| CORCHETEABIERTO  CORCHETECERRADO {:arrayType();:} onlyIDArray
;

arrayID ::= 
CORCHETEABIERTO CORCHETECERRADO
|
;


/*Ingreso de variables*---------------------------------------------------------------------/*/


ingresoNuevasVariables ::= 
    IGUAL opcionesDatosIngreso variablesConsecutivas
    | puntoComaSintaxis
;

opcionesDatosIngreso ::= 
tDAtosFacto tDatosPrima
;


// Asignacion de variables y en caso son consecutivas.
variablesConsecutivas ::=
      COMA ID variablesConsecutivasFactores
    | puntoComaSintaxis
;

variablesConsecutivasFactores ::= 
IGUAL opcionesDatosIngreso variablesConsecutivas
|  puntoComaSintaxis
;




// Opciones de ingreso de variables
tDAtosFacto ::= 
    charSintaxis
    |LLAVESABIERTO lCon
    |NEW tipoDatosSintaxis newParentesisOCochtes
    |funcionesBooleanas
    |expresionesEspecificasElementales
    |usarOBJECT
    |Casting
    |ADMIRACION opcionesDatosIngreso
| error{:NewJFrame.jTextArea1.append("\n"+cantidadErrores+"  Error en clase: "+nameClass+" lexema:" + sym.terminalNames[cur_token.sym]);:}
;
// FUNCIONES BOOLEANAS------------------------------------------------------------------
funcionesBooleanas ::= 
TRUE
| FALSE
;
// EXPRESIONES ELEMENTALES------------------------------------------------------------------

expresionesEspecificasElementales::=
    ENTERO
    |DECIMAL
    |TEXT 
;

tDatosPrima ::= 
    operadoresTipos opcionesDatosIngreso
    |
;
//----------casteo de funciones-------------------------------------------------------------------------
Casting ::=  
   PARENTESISABIERTO opcionesDatosIngreso PARENTESISCERRADO  tDatosDespues
    | PARENTESISABIERTO typeVaribleSimple PARENTESISCERRADO  opcionesDatosIngreso
;

tDatosDespues ::= 
    operadoresTipos opcionesDatosIngreso
    | INTERO opcionesDatosIngreso DOBLE_PUNTO opcionesDatosIngreso
    |
;



//TIPOS DE DATOS DE VARIABLES----------------------------------------------------------
typeVaribleSimple ::= 
    DOUBLE
    |STRING
    |INT
    |CHAR
    |BOOLEAN
;

operadoresTipos ::= 
    TWOO
    |TWOY
    |DOUBLE_IGUAL
    |MENOR_Q_IGUAL
    |MAYOR_Q_IGUAL
    |MENOR_Q
    |MAYOR_Q
    |ONEY
    |ONEO
    |ADMIRACION_IGUAL
    |operadoresAritmeticos
  
;
//------------operadores-------------------------------------------------------------------
operadoresAritmeticos ::= 
    SUMA
    |RESTA
    |MULTIPLICACION
    |DIVISION
    |MODULO
;
//Sintaxis para varibles char------------------------------------------
charSintaxis ::= 
    SIMPLE_COMILLA CARACTER SIMPLE_COMILLA
;

// ingreso de parentesis 
newParentesisOCochtes ::= 
    parametrosSintaxisGeneral
    | CORCHETEABIERTO tDatosserietDatos CORCHETECERRADO serietDatos
;


tDatosserietDatos ::=
    opcionesDatosIngreso
    |
;

serietDatos ::=
    LLAVESABIERTO lCon
    |
;

//parametros consecuti
parametrosSintaxisGeneral ::=
 PARENTESISABIERTO parametrosConsecutivosOBjetos PARENTESISCERRADO 
| PARENTESISABIERTO PARENTESISCERRADO 
;

parametrosConsecutivosOBjetos ::=
 opcionesDatosIngreso objectInst
;

objectInst ::=
 COMA parametrosConsecutivosOBjetos
|
;


//ARREGLOS-------- idDato
// esto para crear arreglos{}
lCon ::=
 opcionesDatosIngreso lConFact LLAVESCERRADO
| LLAVESCERRADO
;

lConFact ::=
  COMA opcionesDatosIngreso  lConFact
|
;

//USAR OBJECT------------------------------------------------------------------------------------
usarOBJECT ::= 
    ID idDato
;

//ARRAY.LETER - 4 ,ID.ID(); //GET
idDatoFac ::= 
    ID  idDato
;

idDato ::= 
    PUNTO idDatoFac
    |CORCHETEABIERTO opcionesDatosIngreso CORCHETECERRADO idDato
    |PARENTESISABIERTO factoIDATO
    |
;

factoIDATO ::=
    parametrosConsecutivosOBjetos PARENTESISCERRADO
    |PARENTESISCERRADO
;


/**INgreso de metodos------------------------------------------------------------------------**/

metodoSintaxis ::= 
{:nameMethods=nameVariable;typeMethods = typeDate;:} PARENTESISABIERTO pMetodoS PARENTESISCERRADO LLAVESABIERTO  localMetodo  LLAVESCERRADO 
|VOID {:typeMethods = tipoDatos.VOID;:}  ID:a {:nameMethods = a.toString();:} PARENTESISABIERTO pMetodoS PARENTESISCERRADO LLAVESABIERTO  localMetodo   LLAVESCERRADO
|ID:a {:nameMethods = a.toString();:} PARENTESISABIERTO pMetodoS PARENTESISCERRADO LLAVESABIERTO  localMetodo  LLAVESCERRADO
;


//peticiiones de metodos
pMetodoS ::= 
variableID {:int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
            int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
            addMethodsParameters(aleft,aright);:} pMetodoSP
|
;

pMetodoSP ::= 
COMA pMetodoS
| 
;

localMetodo ::= 
local  localMetodo
|
;

local ::= 
variableLocal
|SentenciasControlSintaxisGeneral
|salidasOpciones
;

/*VARIALBES LOCALES DENTRO DE UN METODO*/
variableLocal ::= 
    variableLocalFinal ingresoNuevasVariables
;

//VARIABLE FINAL 
variableLocalFinal ::=
    FINAL variableIDLocal
    |variableIDLocal    
    |usarVariable
    |salidasOpciones
;

variableIDLocal ::= 
    DoubleTipoDato 
    | CharTipoDato 
    | BooleanTipoDato 
    | StringTipoDato  
    | intTipoDato 
;

/*CUALQUIER ACCION menos colocar otra sentencia ya no es*/
usarVariable ::= 
    ID OperadoresIncrementales
    |THIS loclaMetodFacto
    |SUPER soloId  PARENTESISABIERTO opcionesDatosIngreso secuenciDatos PARENTESISCERRADO
;

soloId ::=
 PUNTO ID soloId
|
;

secuenciDatos ::= 
 COMA opcionesDatosIngreso secuenciDatos
|
;

// id ++ id-- id+= id -=
OperadoresIncrementales ::= 
    CREMENTO
    |SUMA_IGUAL opcionesDatosIngreso 
    |INCREMENTO
    |RESTA_IGUAL opcionesDatosIngreso
    |MULTIPLICACION_IGUAL opcionesDatosIngreso
    |DIVISION_IGUAL opcionesDatosIngreso
    |MODULO_IGUAL opcionesDatosIngreso
    |ID loclaMetodFacto
    |loclaMetodFacto
    |CORCHETEABIERTO opcionesDatosIngreso CORCHETECERRADO loclaMetodFacto
    |PARENTESISABIERTO  factoIDATO
;
//asignar al set
loclaMetodFacto ::= 
    PUNTO  ID  variableObjectUsarCrear 
    |
;

variableObjectUsarCrear ::= 
    PARENTESISABIERTO variableSet
    |loclaMetodFacto
;

variableSet ::= 
    opcionesDatosIngreso secuenciDatos PARENTESISCERRADO 
    |PARENTESISCERRADO
;



// sintaxis de operadores de salida 
salidasOpciones ::= 
    BREAK puntoComaSintaxis
    |RETURN opcionesDatosIngreso puntoComaSintaxis
;
/*sentencias de control
----------------------------------------------------------------------------------------------
*/
SentenciasControlSintaxisGeneral ::= 
WHILE PARENTESISABIERTO opcionesDatosIngreso PARENTESISCERRADO realicarSentenciasControlSintaxisGeneral
|DO realicarSentenciasControlSintaxisGeneral WHILE PARENTESISABIERTO opcionesDatosIngreso PARENTESISCERRADO puntoComaSintaxis
|IF PARENTESISABIERTO opcionesDatosIngreso PARENTESISCERRADO realicarSentenciasControlSintaxisGeneral sentenciaElse
|SWITCH PARENTESISABIERTO opcionesDatosIngreso PARENTESISCERRADO LLAVESABIERTO SwitchSintaxisGeneral LLAVESCERRADO
|FOR PARENTESISABIERTO inializarVariable  ForSintaxisGeneral
;


realicarSentenciasControlSintaxisGeneral ::= 
LLAVESABIERTO localMetodo LLAVESCERRADO 
;

// SINTAXIS DE SWITCH-----------------------------------------------------------------
SwitchSintaxisGeneral ::= 
        CASE parametrosConsecutivosOBjetos  DOBLE_PUNTO SwitchEspecificoSintaxis SwitchSintaxisGeneral
    |   DEFAULT DOBLE_PUNTO SwitchEspecificoSintaxis  
    |
;

SwitchEspecificoSintaxis ::= 
    declaracionesSwitch SwitchEspecificoSintaxis 
    |salidasOpciones
;

declaracionesSwitch ::= 
    variableLocal 
    |SentenciasControlSintaxisGeneral 
;
//-------------------------------------------------------------------------------------------
//sentencia de for
ForSintaxisGeneral ::= 
 PARENTESISCERRADO realicarSentenciasControlSintaxisGeneral
| opcionesDatosIngreso puntoComaSintaxis usarVariable  PARENTESISCERRADO realicarSentenciasControlSintaxisGeneral
;

inializarVariable ::= 
variableIDFor ingresoNuevasVariables
| ID forVariableId
;  

variableIDFor ::=
  
 DoubleTipoDato 
| CharTipoDato 
| BooleanTipoDato 
| StringTipoDato 
| intTipoDato 
| error{:NewJFrame.jTextArea1.append("\n"+cantidadErrores+"  Error en clase: "+nameClass+" lexema:" + sym.terminalNames[cur_token.sym]);:}
;

forVariableId ::= 
ID forVariableIdFac
| CORCHETEABIERTO CORCHETECERRADO forVariableId
;

forVariableIdFac ::=
 DOBLE_PUNTO ID
| ingresoNuevasVariables
;

//Sintaxis IF Y ELSE
sentenciaElse ::=
 ELSE  sentenciaElseFac
|
;


sentenciaElseFac ::= LLAVESABIERTO localMetodo LLAVESCERRADO
|IF PARENTESISABIERTO opcionesDatosIngreso PARENTESISCERRADO LLAVESABIERTO localMetodo LLAVESCERRADO sentenciaElse
| error {:NewJFrame.jTextArea1.append("\n"+cantidadErrores+"  Error en clase: "+nameClass+" lexema:" + sym.terminalNames[cur_token.sym]);:}
;
