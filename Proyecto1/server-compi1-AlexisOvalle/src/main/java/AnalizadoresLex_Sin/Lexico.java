/* The following code was generated by JFlex 1.7.0 */

package AnalizadoresLex_Sin;
import AnalizadoresLex_Sin.sym;
import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import Objects.Token;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>simon2.jflex</tt>
 */
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\2\11\1\14\1\70\1\67\1\67\22\0\1\11\1\57\1\2"+
    "\2\0\1\53\1\54\1\3\1\61\1\62\1\13\1\51\1\50\1\5"+
    "\1\10\1\12\1\6\11\7\1\47\1\46\1\55\1\52\1\56\1\60"+
    "\1\0\22\1\1\36\7\1\1\65\1\0\1\66\1\0\1\1\1\0"+
    "\1\32\1\15\1\35\1\33\1\20\1\31\1\30\1\22\1\25\1\37"+
    "\1\41\1\27\1\42\1\26\1\23\1\40\1\37\1\24\1\21\1\17"+
    "\1\34\1\45\1\44\1\43\1\16\1\37\1\63\1\4\1\64\7\0"+
    "\1\70\53\0\1\1\21\0\1\1\35\0\2\1\6\0\2\1\2\0"+
    "\2\1\2\0\1\1\1\0\2\1\5\0\2\1\u1f2c\0\1\70\1\70"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\2\6"+
    "\1\7\1\4\1\10\1\11\17\2\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\2\0\1\33"+
    "\1\0\3\34\1\4\2\6\1\35\1\36\4\0\1\37"+
    "\1\40\15\2\1\41\10\2\1\42\11\2\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\0"+
    "\1\54\1\0\2\55\1\56\2\0\2\57\4\2\1\60"+
    "\10\2\1\61\1\2\1\62\1\2\1\63\20\2\1\34"+
    "\1\64\1\65\1\57\1\66\2\2\1\67\1\70\1\71"+
    "\10\2\1\72\5\2\1\73\2\2\1\74\6\2\1\75"+
    "\1\2\1\76\2\2\1\77\1\100\4\2\1\101\1\102"+
    "\1\103\2\2\1\104\1\105\5\2\1\106\2\2\1\107"+
    "\1\110\1\111\1\112\2\2\1\113\1\114\3\2\1\115"+
    "\1\116\1\117\1\2\1\120\1\2\1\121\1\122\3\2"+
    "\1\123\1\124";

  private static int [] zzUnpackAction() {
    int [] result = new int[232];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\71\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e"+
    "\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6"+
    "\0\u051f\0\u0558\0\u0591\0\u05ca\0\71\0\71\0\71\0\u0603"+
    "\0\u063c\0\u0675\0\u06ae\0\u06e7\0\u0720\0\u0759\0\71\0\71"+
    "\0\71\0\71\0\71\0\71\0\71\0\u0792\0\253\0\71"+
    "\0\u07cb\0\u0804\0\u083d\0\u0876\0\u08af\0\u08e8\0\u0921\0\71"+
    "\0\71\0\u095a\0\u0993\0\u09cc\0\u0a05\0\71\0\71\0\u0a3e"+
    "\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06"+
    "\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\162\0\u0d23\0\u0d5c\0\u0d95"+
    "\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d"+
    "\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec\0\71"+
    "\0\71\0\71\0\71\0\71\0\71\0\71\0\71\0\71"+
    "\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209\0\71\0\u1242\0\u127b"+
    "\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u1398\0\u13d1\0\162\0\u140a"+
    "\0\u1443\0\u147c\0\u14b5\0\u14ee\0\u1527\0\u1560\0\u1599\0\162"+
    "\0\u15d2\0\162\0\u160b\0\162\0\u1644\0\u167d\0\u16b6\0\u16ef"+
    "\0\u1728\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845\0\u187e\0\u18b7"+
    "\0\u18f0\0\u1929\0\u1962\0\u199b\0\71\0\71\0\71\0\71"+
    "\0\162\0\u19d4\0\u1a0d\0\162\0\162\0\162\0\u1a46\0\u1a7f"+
    "\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5\0\162\0\u1c0e"+
    "\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2\0\162\0\u1d2b\0\u1d64\0\162"+
    "\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81\0\u1eba\0\162\0\u1ef3"+
    "\0\162\0\u1f2c\0\u1f65\0\162\0\162\0\u1f9e\0\u1fd7\0\u2010"+
    "\0\u2049\0\162\0\162\0\162\0\u2082\0\u20bb\0\162\0\162"+
    "\0\u20f4\0\u212d\0\u2166\0\u219f\0\u21d8\0\162\0\u2211\0\u224a"+
    "\0\162\0\162\0\162\0\162\0\u2283\0\u22bc\0\162\0\162"+
    "\0\u22f5\0\u232e\0\u2367\0\162\0\162\0\162\0\u23a0\0\162"+
    "\0\u23d9\0\162\0\162\0\u2412\0\u244b\0\u2484\0\162\0\162";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[232];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\13\1\16\1\3\1\17"+
    "\1\20\1\21\2\3\1\22\1\23\1\24\1\25\1\3"+
    "\1\26\1\3\1\27\1\3\1\30\1\31\1\3\1\32"+
    "\3\3\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\13\1\2\72\0\1\3"+
    "\2\0\1\3\1\56\2\3\5\0\31\3\3\0\1\56"+
    "\17\0\2\57\1\60\66\57\3\61\1\62\1\63\7\61"+
    "\1\0\52\61\3\0\1\3\1\0\1\64\1\65\1\56"+
    "\1\66\1\67\1\0\1\13\2\0\1\13\31\3\3\0"+
    "\1\56\15\0\1\13\6\0\1\70\1\10\1\11\42\0"+
    "\1\71\26\0\1\72\66\0\2\11\1\72\64\0\1\13"+
    "\4\0\1\13\2\0\1\13\52\0\1\13\13\0\1\73"+
    "\1\74\20\0\1\75\15\0\1\76\70\0\1\77\17\0"+
    "\1\3\2\0\1\3\1\56\2\3\5\0\1\3\1\100"+
    "\4\3\1\101\1\102\21\3\3\0\1\56\20\0\1\3"+
    "\2\0\1\3\1\56\2\3\5\0\5\3\1\103\1\3"+
    "\1\104\21\3\3\0\1\56\20\0\1\3\2\0\1\3"+
    "\1\56\2\3\5\0\12\3\1\105\13\3\1\106\2\3"+
    "\3\0\1\56\20\0\1\3\2\0\1\3\1\56\2\3"+
    "\5\0\2\3\1\107\2\3\1\110\11\3\1\111\7\3"+
    "\1\112\1\3\3\0\1\56\20\0\1\3\2\0\1\3"+
    "\1\56\2\3\5\0\3\3\1\113\25\3\3\0\1\56"+
    "\20\0\1\3\2\0\1\3\1\56\2\3\5\0\11\3"+
    "\1\114\2\3\1\115\10\3\1\116\3\3\3\0\1\56"+
    "\20\0\1\3\2\0\1\3\1\56\2\3\5\0\3\3"+
    "\1\117\25\3\3\0\1\56\20\0\1\3\2\0\1\3"+
    "\1\56\2\3\5\0\6\3\1\120\22\3\3\0\1\56"+
    "\20\0\1\3\2\0\1\3\1\56\2\3\5\0\6\3"+
    "\1\121\1\3\1\122\1\3\1\123\2\3\1\124\13\3"+
    "\3\0\1\56\20\0\1\3\2\0\1\3\1\56\2\3"+
    "\5\0\3\3\1\125\2\3\1\126\22\3\3\0\1\56"+
    "\20\0\1\3\2\0\1\3\1\56\2\3\5\0\5\3"+
    "\1\127\4\3\1\130\2\3\1\131\13\3\3\0\1\56"+
    "\20\0\1\3\2\0\1\3\1\56\2\3\5\0\2\3"+
    "\1\132\26\3\3\0\1\56\20\0\1\3\2\0\1\3"+
    "\1\56\2\3\5\0\7\3\1\133\5\3\1\134\1\3"+
    "\1\135\11\3\3\0\1\56\20\0\1\3\2\0\1\3"+
    "\1\56\2\3\5\0\5\3\1\136\23\3\3\0\1\56"+
    "\20\0\1\3\2\0\1\3\1\56\2\3\5\0\6\3"+
    "\1\137\22\3\3\0\1\56\25\0\1\10\1\11\41\0"+
    "\1\140\1\141\70\0\1\142\70\0\1\143\72\0\1\144"+
    "\66\0\1\145\70\0\1\146\70\0\1\147\24\0\2\3"+
    "\64\0\1\150\70\0\1\150\1\151\67\0\1\152\71\0"+
    "\1\151\65\0\1\3\2\0\1\65\1\56\2\3\1\0"+
    "\1\13\2\0\1\13\31\3\3\0\1\56\15\0\1\13"+
    "\2\0\1\3\2\0\1\3\1\56\2\3\1\72\4\0"+
    "\31\3\3\0\1\56\20\0\1\3\2\0\1\3\1\56"+
    "\2\67\1\72\4\0\31\3\3\0\1\56\23\0\2\153"+
    "\1\154\1\155\41\0\1\153\17\0\14\73\1\156\54\73"+
    "\13\74\1\157\55\74\4\0\2\160\1\161\1\162\41\0"+
    "\1\160\20\0\1\3\2\0\1\3\1\56\2\3\5\0"+
    "\2\3\1\163\26\3\3\0\1\56\20\0\1\3\2\0"+
    "\1\3\1\56\2\3\5\0\6\3\1\164\22\3\3\0"+
    "\1\56\20\0\1\3\2\0\1\3\1\56\2\3\5\0"+
    "\3\3\1\165\25\3\3\0\1\56\20\0\1\3\2\0"+
    "\1\3\1\56\2\3\5\0\10\3\1\166\20\3\3\0"+
    "\1\56\20\0\1\3\2\0\1\3\1\56\2\3\5\0"+
    "\1\3\1\167\15\3\1\170\11\3\3\0\1\56\20\0"+
    "\1\3\2\0\1\3\1\56\2\3\5\0\4\3\1\171"+
    "\24\3\3\0\1\56\20\0\1\3\2\0\1\3\1\56"+
    "\2\3\5\0\2\3\1\172\26\3\3\0\1\56\20\0"+
    "\1\3\2\0\1\3\1\56\2\3\5\0\15\3\1\173"+
    "\13\3\3\0\1\56\20\0\1\3\2\0\1\3\1\56"+
    "\2\3\5\0\6\3\1\174\22\3\3\0\1\56\20\0"+
    "\1\3\2\0\1\3\1\56\2\3\5\0\23\3\1\175"+
    "\5\3\3\0\1\56\20\0\1\3\2\0\1\3\1\56"+
    "\2\3\5\0\10\3\1\176\20\3\3\0\1\56\20\0"+
    "\1\3\2\0\1\3\1\56\2\3\5\0\2\3\1\177"+
    "\26\3\3\0\1\56\20\0\1\3\2\0\1\3\1\56"+
    "\2\3\5\0\2\3\1\200\26\3\3\0\1\56\20\0"+
    "\1\3\2\0\1\3\1\56\2\3\5\0\23\3\1\201"+
    "\5\3\3\0\1\56\20\0\1\3\2\0\1\3\1\56"+
    "\2\3\5\0\27\3\1\202\1\3\3\0\1\56\20\0"+
    "\1\3\2\0\1\3\1\56\2\3\5\0\11\3\1\203"+
    "\17\3\3\0\1\56\20\0\1\3\2\0\1\3\1\56"+
    "\2\3\5\0\7\3\1\204\21\3\3\0\1\56\20\0"+
    "\1\3\2\0\1\3\1\56\2\3\5\0\11\3\1\205"+
    "\17\3\3\0\1\56\20\0\1\3\2\0\1\3\1\56"+
    "\2\3\5\0\6\3\1\206\22\3\3\0\1\56\20\0"+
    "\1\3\2\0\1\3\1\56\2\3\5\0\12\3\1\207"+
    "\16\3\3\0\1\56\20\0\1\3\2\0\1\3\1\56"+
    "\2\3\5\0\14\3\1\210\14\3\3\0\1\56\20\0"+
    "\1\3\2\0\1\3\1\56\2\3\5\0\17\3\1\211"+
    "\11\3\3\0\1\56\20\0\1\3\2\0\1\3\1\56"+
    "\2\3\5\0\15\3\1\212\13\3\3\0\1\56\20\0"+
    "\1\3\2\0\1\3\1\56\2\3\5\0\15\3\1\213"+
    "\13\3\3\0\1\56\20\0\1\3\2\0\1\3\1\56"+
    "\2\3\5\0\2\3\1\214\1\3\1\215\24\3\3\0"+
    "\1\56\20\0\1\3\2\0\1\3\1\56\2\3\5\0"+
    "\7\3\1\216\21\3\3\0\1\56\20\0\1\3\2\0"+
    "\1\3\1\56\2\3\5\0\6\3\1\217\1\3\1\220"+
    "\20\3\3\0\1\56\20\0\1\3\2\0\1\3\1\56"+
    "\2\3\5\0\20\3\1\221\10\3\3\0\1\56\20\0"+
    "\1\3\2\0\1\3\1\56\2\3\5\0\1\222\30\3"+
    "\3\0\1\56\20\0\1\3\2\0\1\3\1\56\2\3"+
    "\5\0\10\3\1\223\20\3\3\0\1\56\20\0\1\3"+
    "\2\0\1\3\1\56\2\3\5\0\10\3\1\224\20\3"+
    "\3\0\1\56\22\0\1\225\70\0\1\64\1\225\72\0"+
    "\1\154\1\155\112\0\1\226\45\0\2\155\21\0\1\226"+
    "\37\0\12\74\1\227\1\157\55\74\6\0\1\161\1\162"+
    "\76\0\21\230\1\0\7\230\31\0\2\162\5\0\21\230"+
    "\1\0\7\230\24\0\1\3\2\0\1\3\1\56\2\3"+
    "\5\0\3\3\1\231\25\3\3\0\1\56\20\0\1\3"+
    "\2\0\1\3\1\56\2\3\5\0\12\3\1\232\16\3"+
    "\3\0\1\56\20\0\1\3\2\0\1\3\1\56\2\3"+
    "\5\0\15\3\1\233\13\3\3\0\1\56\20\0\1\3"+
    "\2\0\1\3\1\56\2\3\5\0\4\3\1\234\24\3"+
    "\3\0\1\56\20\0\1\3\2\0\1\3\1\56\2\3"+
    "\5\0\3\3\1\235\25\3\3\0\1\56\20\0\1\3"+
    "\2\0\1\3\1\56\2\3\5\0\3\3\1\236\25\3"+
    "\3\0\1\56\20\0\1\3\2\0\1\3\1\56\2\3"+
    "\5\0\3\3\1\237\25\3\3\0\1\56\20\0\1\3"+
    "\2\0\1\3\1\56\2\3\5\0\2\3\1\240\26\3"+
    "\3\0\1\56\20\0\1\3\2\0\1\3\1\56\2\3"+
    "\5\0\7\3\1\241\21\3\3\0\1\56\20\0\1\3"+
    "\2\0\1\3\1\56\2\3\5\0\3\3\1\242\25\3"+
    "\3\0\1\56\20\0\1\3\2\0\1\3\1\56\2\3"+
    "\5\0\2\3\1\243\26\3\3\0\1\56\20\0\1\3"+
    "\2\0\1\3\1\56\2\3\5\0\17\3\1\244\11\3"+
    "\3\0\1\56\20\0\1\3\2\0\1\3\1\56\2\3"+
    "\5\0\6\3\1\245\3\3\1\246\16\3\3\0\1\56"+
    "\20\0\1\3\2\0\1\3\1\56\2\3\5\0\13\3"+
    "\1\247\15\3\3\0\1\56\20\0\1\3\2\0\1\3"+
    "\1\56\2\3\5\0\15\3\1\250\13\3\3\0\1\56"+
    "\20\0\1\3\2\0\1\3\1\56\2\3\5\0\15\3"+
    "\1\251\13\3\3\0\1\56\20\0\1\3\2\0\1\3"+
    "\1\56\2\3\5\0\4\3\1\252\24\3\3\0\1\56"+
    "\20\0\1\3\2\0\1\3\1\56\2\3\5\0\15\3"+
    "\1\253\13\3\3\0\1\56\20\0\1\3\2\0\1\3"+
    "\1\56\2\3\5\0\1\254\30\3\3\0\1\56\20\0"+
    "\1\3\2\0\1\3\1\56\2\3\5\0\7\3\1\255"+
    "\21\3\3\0\1\56\20\0\1\3\2\0\1\3\1\56"+
    "\2\3\5\0\4\3\1\256\24\3\3\0\1\56\20\0"+
    "\1\3\2\0\1\3\1\56\2\3\5\0\20\3\1\257"+
    "\10\3\3\0\1\56\20\0\1\3\2\0\1\3\1\56"+
    "\2\3\5\0\3\3\1\260\25\3\3\0\1\56\20\0"+
    "\1\3\2\0\1\3\1\56\2\3\5\0\10\3\1\261"+
    "\20\3\3\0\1\56\20\0\1\3\2\0\1\3\1\56"+
    "\2\3\5\0\2\3\1\262\26\3\3\0\1\56\20\0"+
    "\1\3\2\0\1\3\1\56\2\3\5\0\30\3\1\263"+
    "\3\0\1\56\20\0\1\3\2\0\1\3\1\56\2\3"+
    "\5\0\24\3\1\264\4\3\3\0\1\56\20\0\1\3"+
    "\2\0\1\3\1\56\2\3\5\0\12\3\1\265\16\3"+
    "\3\0\1\56\20\0\1\3\2\0\1\3\1\56\2\3"+
    "\5\0\12\3\1\266\16\3\3\0\1\56\20\0\1\3"+
    "\2\0\1\3\1\56\2\3\5\0\16\3\1\267\12\3"+
    "\3\0\1\56\20\0\1\3\2\0\1\3\1\56\2\3"+
    "\5\0\3\3\1\270\25\3\3\0\1\56\20\0\1\3"+
    "\2\0\1\3\1\56\2\3\5\0\24\3\1\271\4\3"+
    "\3\0\1\56\20\0\1\3\2\0\1\3\1\56\2\3"+
    "\5\0\11\3\1\272\17\3\3\0\1\56\20\0\1\3"+
    "\2\0\1\3\1\56\2\3\5\0\10\3\1\273\20\3"+
    "\3\0\1\56\20\0\1\3\2\0\1\3\1\56\2\3"+
    "\5\0\2\3\1\274\26\3\3\0\1\56\20\0\1\3"+
    "\2\0\1\3\1\56\2\3\5\0\7\3\1\275\21\3"+
    "\3\0\1\56\20\0\1\3\2\0\1\3\1\56\2\3"+
    "\5\0\20\3\1\276\10\3\3\0\1\56\20\0\1\3"+
    "\2\0\1\3\1\56\2\3\5\0\7\3\1\277\21\3"+
    "\3\0\1\56\20\0\1\3\2\0\1\3\1\56\2\3"+
    "\5\0\7\3\1\300\21\3\3\0\1\56\20\0\1\3"+
    "\2\0\1\3\1\56\2\3\5\0\3\3\1\301\25\3"+
    "\3\0\1\56\20\0\1\3\2\0\1\3\1\56\2\3"+
    "\5\0\12\3\1\302\16\3\3\0\1\56\20\0\1\3"+
    "\2\0\1\3\1\56\2\3\5\0\2\3\1\303\26\3"+
    "\3\0\1\56\20\0\1\3\2\0\1\3\1\56\2\3"+
    "\5\0\3\3\1\304\25\3\3\0\1\56\20\0\1\3"+
    "\2\0\1\3\1\56\2\3\5\0\17\3\1\305\11\3"+
    "\3\0\1\56\20\0\1\3\2\0\1\3\1\56\2\3"+
    "\5\0\12\3\1\306\16\3\3\0\1\56\20\0\1\3"+
    "\2\0\1\3\1\56\2\3\5\0\4\3\1\307\24\3"+
    "\3\0\1\56\20\0\1\3\2\0\1\3\1\56\2\3"+
    "\5\0\5\3\1\310\23\3\3\0\1\56\20\0\1\3"+
    "\2\0\1\3\1\56\2\3\5\0\11\3\1\311\17\3"+
    "\3\0\1\56\20\0\1\3\2\0\1\3\1\56\2\3"+
    "\5\0\3\3\1\312\25\3\3\0\1\56\20\0\1\3"+
    "\2\0\1\3\1\56\2\3\5\0\15\3\1\313\13\3"+
    "\3\0\1\56\20\0\1\3\2\0\1\3\1\56\2\3"+
    "\5\0\15\3\1\314\13\3\3\0\1\56\20\0\1\3"+
    "\2\0\1\3\1\56\2\3\5\0\10\3\1\315\20\3"+
    "\3\0\1\56\20\0\1\3\2\0\1\3\1\56\2\3"+
    "\5\0\3\3\1\316\25\3\3\0\1\56\20\0\1\3"+
    "\2\0\1\3\1\56\2\3\5\0\15\3\1\317\13\3"+
    "\3\0\1\56\20\0\1\3\2\0\1\3\1\56\2\3"+
    "\5\0\16\3\1\320\12\3\3\0\1\56\20\0\1\3"+
    "\2\0\1\3\1\56\2\3\5\0\20\3\1\321\10\3"+
    "\3\0\1\56\20\0\1\3\2\0\1\3\1\56\2\3"+
    "\5\0\5\3\1\322\23\3\3\0\1\56\20\0\1\3"+
    "\2\0\1\3\1\56\2\3\5\0\11\3\1\323\17\3"+
    "\3\0\1\56\20\0\1\3\2\0\1\3\1\56\2\3"+
    "\5\0\2\3\1\324\26\3\3\0\1\56\20\0\1\3"+
    "\2\0\1\3\1\56\2\3\5\0\25\3\1\325\3\3"+
    "\3\0\1\56\20\0\1\3\2\0\1\3\1\56\2\3"+
    "\5\0\12\3\1\326\16\3\3\0\1\56\20\0\1\3"+
    "\2\0\1\3\1\56\2\3\5\0\3\3\1\327\25\3"+
    "\3\0\1\56\20\0\1\3\2\0\1\3\1\56\2\3"+
    "\5\0\13\3\1\330\15\3\3\0\1\56\20\0\1\3"+
    "\2\0\1\3\1\56\2\3\5\0\20\3\1\331\10\3"+
    "\3\0\1\56\20\0\1\3\2\0\1\3\1\56\2\3"+
    "\5\0\2\3\1\332\26\3\3\0\1\56\20\0\1\3"+
    "\2\0\1\3\1\56\2\3\5\0\13\3\1\333\15\3"+
    "\3\0\1\56\20\0\1\3\2\0\1\3\1\56\2\3"+
    "\5\0\20\3\1\334\10\3\3\0\1\56\20\0\1\3"+
    "\2\0\1\3\1\56\2\3\5\0\11\3\1\335\17\3"+
    "\3\0\1\56\20\0\1\3\2\0\1\3\1\56\2\3"+
    "\5\0\4\3\1\336\24\3\3\0\1\56\20\0\1\3"+
    "\2\0\1\3\1\56\2\3\5\0\3\3\1\337\25\3"+
    "\3\0\1\56\20\0\1\3\2\0\1\3\1\56\2\3"+
    "\5\0\2\3\1\340\26\3\3\0\1\56\20\0\1\3"+
    "\2\0\1\3\1\56\2\3\5\0\2\3\1\341\26\3"+
    "\3\0\1\56\20\0\1\3\2\0\1\3\1\56\2\3"+
    "\5\0\3\3\1\342\25\3\3\0\1\56\20\0\1\3"+
    "\2\0\1\3\1\56\2\3\5\0\3\3\1\343\25\3"+
    "\3\0\1\56\20\0\1\3\2\0\1\3\1\56\2\3"+
    "\5\0\11\3\1\344\17\3\3\0\1\56\20\0\1\3"+
    "\2\0\1\3\1\56\2\3\5\0\3\3\1\345\25\3"+
    "\3\0\1\56\20\0\1\3\2\0\1\3\1\56\2\3"+
    "\5\0\2\3\1\346\26\3\3\0\1\56\20\0\1\3"+
    "\2\0\1\3\1\56\2\3\5\0\16\3\1\347\12\3"+
    "\3\0\1\56\20\0\1\3\2\0\1\3\1\56\2\3"+
    "\5\0\4\3\1\350\24\3\3\0\1\56\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9405];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\1\11\22\1\3\11\7\1\7\11"+
    "\2\0\1\11\1\0\6\1\2\11\4\0\2\11\40\1"+
    "\11\11\1\0\1\1\1\0\2\1\1\11\2\0\44\1"+
    "\4\11\120\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[232];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    List<Token> listComments =  new ArrayList<>();
    private void addComments(){
        listComments.add(new Token((yyline+1),(yycolumn+1),yytext()));
    }
   
    public List<Token>  getlistComments(){
        return this.listComments;
    };


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 214) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Error(yytext());
            } 
            // fall through
          case 85: break;
          case 2: 
            { return new Symbol(sym.ID,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 86: break;
          case 3: 
            { return new Symbol(sym.SIMPLE_COMILLA,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 87: break;
          case 4: 
            { /*ESPACIOS*/
            } 
            // fall through
          case 88: break;
          case 5: 
            { return new Symbol(sym.RESTA,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 89: break;
          case 6: 
            { return new Symbol(sym.ENTERO,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 90: break;
          case 7: 
            { return new Symbol(sym.PUNTO,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 91: break;
          case 8: 
            { return new Symbol(sym.DIVISION,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 92: break;
          case 9: 
            { return new Symbol(sym.MULTIPLICACION,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 93: break;
          case 10: 
            { return new Symbol(sym.PUNTO_COMA,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 94: break;
          case 11: 
            { return new Symbol(sym.DOBLE_PUNTO,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 95: break;
          case 12: 
            { return new Symbol(sym.COMA,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 96: break;
          case 13: 
            { return new Symbol(sym.SUMA,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 97: break;
          case 14: 
            { return new Symbol(sym.IGUAL,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 98: break;
          case 15: 
            { return new Symbol(sym.MODULO,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 99: break;
          case 16: 
            { return new Symbol(sym.ONEY,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 100: break;
          case 17: 
            { return new Symbol(sym.MENOR_Q,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 101: break;
          case 18: 
            { return new Symbol(sym.MAYOR_Q,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 102: break;
          case 19: 
            { return new Symbol(sym.ADMIRACION,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 103: break;
          case 20: 
            { return new Symbol(sym.INTERO,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 104: break;
          case 21: 
            { return new Symbol(sym.P_APERTURA,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 105: break;
          case 22: 
            { return new Symbol(sym.P_CIERRE,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 106: break;
          case 23: 
            { return new Symbol(sym.L_APERTURA,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 107: break;
          case 24: 
            { return new Symbol(sym.L_CIERRE,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 108: break;
          case 25: 
            { return new Symbol(sym.C_APERTURA,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 109: break;
          case 26: 
            { return new Symbol(sym.C_CIERRE,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 110: break;
          case 27: 
            { return new Symbol(sym.TEXT,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 111: break;
          case 28: 
            { return new Symbol(sym.TWOO,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 112: break;
          case 29: 
            { return new Symbol(sym.INCREMENTO,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 113: break;
          case 30: 
            { return new Symbol(sym.RESTA_IGUAL,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 114: break;
          case 31: 
            { return new Symbol(sym.DIVISION_IGUAL,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 115: break;
          case 32: 
            { return new Symbol(sym.MULTIPLICACION_IGUAL,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 116: break;
          case 33: 
            { return new Symbol(sym.IF,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 117: break;
          case 34: 
            { return new Symbol(sym.DO,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 118: break;
          case 35: 
            { return new Symbol(sym.CREMENTO,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 119: break;
          case 36: 
            { return new Symbol(sym.SUMA_IGUAL,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 120: break;
          case 37: 
            { return new Symbol(sym.DOUBLE_IGUAL,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 121: break;
          case 38: 
            { return new Symbol(sym.MODULO_IGUAL,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 122: break;
          case 39: 
            { return new Symbol(sym.TWOY,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 123: break;
          case 40: 
            { return new Symbol(sym.MENOR_Q_IGUAL,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 124: break;
          case 41: 
            { return new Symbol(sym.MAYOR_Q_IGUAL,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 125: break;
          case 42: 
            { return new Symbol(sym.ADMIRACION_IGUAL,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 126: break;
          case 43: 
            { return new Symbol(sym.CARACTER,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 127: break;
          case 44: 
            { return new Symbol(sym.ONEO,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 128: break;
          case 45: 
            { return new Symbol(sym.DECIMAL,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 129: break;
          case 46: 
            { addComments();/*COMENTARIO DE UNA LINEA*/
            } 
            // fall through
          case 130: break;
          case 47: 
            { return new Symbol(sym.CHARTN,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 131: break;
          case 48: 
            { return new Symbol(sym.TRY,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 132: break;
          case 49: 
            { return new Symbol(sym.INT,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 133: break;
          case 50: 
            { return new Symbol(sym.NEW,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 134: break;
          case 51: 
            { return new Symbol(sym.FOR,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 135: break;
          case 52: 
            { return new Symbol(sym.F,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 136: break;
          case 53: 
            { addComments();/*COMENTARIO MULTILINEA*/
            } 
            // fall through
          case 137: break;
          case 54: 
            { return new Symbol(sym.BYTE,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 138: break;
          case 55: 
            { return new Symbol(sym.THIS,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 139: break;
          case 56: 
            { return new Symbol(sym.TRUE,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 140: break;
          case 57: 
            { return new Symbol(sym.ELSE,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 141: break;
          case 58: 
            { return new Symbol(sym.LONG,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 142: break;
          case 59: 
            { return new Symbol(sym.CHAR,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 143: break;
          case 60: 
            { return new Symbol(sym.CASE,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 144: break;
          case 61: 
            { return new Symbol(sym.VOID,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 145: break;
          case 62: 
            { return new Symbol(sym.BREAK,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 146: break;
          case 63: 
            { return new Symbol(sym.SHORT,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 147: break;
          case 64: 
            { return new Symbol(sym.SUPER,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 148: break;
          case 65: 
            { return new Symbol(sym.FINAL,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 149: break;
          case 66: 
            { return new Symbol(sym.FLOAT,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 150: break;
          case 67: 
            { return new Symbol(sym.FALSE,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 151: break;
          case 68: 
            { return new Symbol(sym.CLASS,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 152: break;
          case 69: 
            { return new Symbol(sym.CATCH,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 153: break;
          case 70: 
            { return new Symbol(sym.WHILE,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 154: break;
          case 71: 
            { return new Symbol(sym.STATIC,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 155: break;
          case 72: 
            { return new Symbol(sym.SWITCH,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 156: break;
          case 73: 
            { return new Symbol(sym.RETURN,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 157: break;
          case 74: 
            { return new Symbol(sym.IMPORT,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 158: break;
          case 75: 
            { return new Symbol(sym.DOUBLE,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 159: break;
          case 76: 
            { return new Symbol(sym.STRING,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 160: break;
          case 77: 
            { return new Symbol(sym.PUBLIC,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 161: break;
          case 78: 
            { return new Symbol(sym.BOOLEAN,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 162: break;
          case 79: 
            { return new Symbol(sym.EXNTENDS,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 163: break;
          case 80: 
            { return new Symbol(sym.DEFAULT,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 164: break;
          case 81: 
            { return new Symbol(sym.PRIVATE,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 165: break;
          case 82: 
            { return new Symbol(sym.PACKAGE,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 166: break;
          case 83: 
            { return new Symbol(sym.PROTECTED,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 167: break;
          case 84: 
            { return new Symbol(sym.IMPLEMENTS,yyline,yycolumn, (yytext()));
            } 
            // fall through
          case 168: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
